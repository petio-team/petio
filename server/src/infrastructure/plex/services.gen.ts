// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetServerCapabilitiesResponse, GetServerPreferencesResponse, GetAvailableClientsResponse, GetDevicesResponse, GetServerIdentityResponse, GetMyPlexAccountResponse, GetResizedPhotoData, GetResizedPhotoResponse, GetServerListResponse, MarkPlayedData, MarkPlayedResponse, MarkUnplayedData, MarkUnplayedResponse, UpdatePlayProgressData, UpdatePlayProgressResponse, GetTimelineData, GetTimelineResponse, StartUniversalTranscodeData, StartUniversalTranscodeResponse, GetServerActivitiesResponse, CancelServerActivitiesData, CancelServerActivitiesResponse, GetButlerTasksResponse, StartAllTasksResponse, StopAllTasksResponse, StartTaskData, StartTaskResponse, StopTaskData, StopTaskResponse, GetGlobalHubsData, GetGlobalHubsResponse, GetLibraryHubsData, GetLibraryHubsResponse, PerformSearchData, PerformSearchResponse, PerformVoiceSearchData, PerformVoiceSearchResponse, GetSearchResultsData, GetSearchResultsResponse, GetFileHashData, GetFileHashResponse, GetRecentlyAddedResponse, GetLibrariesResponse, GetLibraryData, GetLibraryResponse, DeleteLibraryData, DeleteLibraryResponse, GetLibraryItemsData, GetLibraryItemsResponse, RefreshLibraryData, RefreshLibraryResponse, SearchLibraryData, SearchLibraryResponse, GetMetadataData, GetMetadataResponse, GetMetadataChildrenData, GetMetadataChildrenResponse, GetOnDeckResponse, LogLineData, LogLineResponse, LogMultiLineData, LogMultiLineResponse, EnablePaperTrailResponse, GetPinData, GetPinResponse, GetTokenData, GetTokenResponse, CreatePlaylistData, CreatePlaylistResponse, GetPlaylistsData, GetPlaylistsResponse, GetPlaylistData, GetPlaylistResponse, DeletePlaylistData, DeletePlaylistResponse, UpdatePlaylistData, UpdatePlaylistResponse, GetPlaylistContentsData, GetPlaylistContentsResponse, ClearPlaylistContentsData, ClearPlaylistContentsResponse, AddPlaylistContentsData, AddPlaylistContentsResponse, UploadPlaylistData, UploadPlaylistResponse, GetTransientTokenData, GetTransientTokenResponse, GetSourceConnectionInformationData, GetSourceConnectionInformationResponse, GetStatisticsData, GetStatisticsResponse, GetSessionsResponse, GetSessionHistoryResponse, GetTranscodeSessionsResponse, StopTranscodeSessionData, StopTranscodeSessionResponse, GetUpdateStatusResponse, CheckForUpdatesData, CheckForUpdatesResponse, ApplyUpdatesData, ApplyUpdatesResponse } from './types.gen';

export class ServerService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Server Capabilities
     * Server Capabilities
     * @returns unknown The Server Capabilities
     * @throws ApiError
     */
    public getServerCapabilities(): CancelablePromise<GetServerCapabilitiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Server Preferences
     * Get Server Preferences
     * @returns unknown Server Preferences
     * @throws ApiError
     */
    public getServerPreferences(): CancelablePromise<GetServerPreferencesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/:/prefs',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Available Clients
     * Get Available Clients
     * @returns unknown Available Clients
     * @throws ApiError
     */
    public getAvailableClients(): CancelablePromise<GetAvailableClientsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/clients',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Devices
     * Get Devices
     * @returns unknown Devices
     * @throws ApiError
     */
    public getDevices(): CancelablePromise<GetDevicesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/devices',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Server Identity
     * Get Server Identity
     * @returns unknown The Server Identity information
     * @throws ApiError
     */
    public getServerIdentity(): CancelablePromise<GetServerIdentityResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/identity',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get MyPlex Account
     * Returns MyPlex Account Information
     * @returns unknown MyPlex Account
     * @throws ApiError
     */
    public getMyPlexAccount(): CancelablePromise<GetMyPlexAccountResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/myplex/account',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get a Resized Photo
     * Plex's Photo transcoder is used throughout the service to serve images at specified sizes.
     *
     * @param data The data for the request.
     * @param data.width The width for the resized photo
     * @param data.height The height for the resized photo
     * @param data.blur The width for the resized photo
     * @param data.minSize images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against.
     * @param data.upscale allow images to be resized beyond native dimensions.
     * @param data.url path to image within Plex
     * @param data.opacity The opacity for the resized photo
     * @returns unknown Resized Image
     * @throws ApiError
     */
    public getResizedPhoto(data: GetResizedPhotoData): CancelablePromise<GetResizedPhotoResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/photo/:/transcode',
            query: {
                width: data.width,
                height: data.height,
                opacity: data.opacity,
                blur: data.blur,
                minSize: data.minSize,
                upscale: data.upscale,
                url: data.url
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Server List
     * Get Server List
     * @returns unknown List of Servers
     * @throws ApiError
     */
    public getServerList(): CancelablePromise<GetServerListResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/servers',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class MediaService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Mark Media Played
     * This will mark the provided media key as Played.
     * @param data The data for the request.
     * @param data.key The media key to mark as played
     * @returns unknown Media is marked Played
     * @throws ApiError
     */
    public markPlayed(data: MarkPlayedData): CancelablePromise<MarkPlayedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/:/scrobble',
            query: {
                key: data.key
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Mark Media Unplayed
     * This will mark the provided media key as Unplayed.
     * @param data The data for the request.
     * @param data.key The media key to mark as Unplayed
     * @returns unknown Media is marked Unplayed
     * @throws ApiError
     */
    public markUnplayed(data: MarkUnplayedData): CancelablePromise<MarkUnplayedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/:/unscrobble',
            query: {
                key: data.key
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Update Media Play Progress
     * This API command can be used to update the play progress of a media item.
     *
     * @param data The data for the request.
     * @param data.key the media key
     * @param data.time The time, in milliseconds, used to set the media playback progress.
     * @param data.state The playback state of the media item.
     * @returns unknown Success - The request was successful.
     * @throws ApiError
     */
    public updatePlayProgress(data: UpdatePlayProgressData): CancelablePromise<UpdatePlayProgressResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/:/progress',
            query: {
                key: data.key,
                time: data.time,
                state: data.state
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class VideoService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get the timeline for a media item
     * Get the timeline for a media item
     * @param data The data for the request.
     * @param data.ratingKey The rating key of the media item
     * @param data.key The key of the media item to get the timeline for
     * @param data.state The state of the media item
     * @param data.hasMde Whether the media item has MDE
     * @param data.time The time of the media item
     * @param data.duration The duration of the media item
     * @param data.context The context of the media item
     * @param data.playQueueItemId The play queue item ID of the media item
     * @param data.playBackTime The playback time of the media item
     * @param data.row The row of the media item
     * @returns unknown The timeline for the media item
     * @throws ApiError
     */
    public getTimeline(data: GetTimelineData): CancelablePromise<GetTimelineResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/:/timeline',
            query: {
                ratingKey: data.ratingKey,
                key: data.key,
                state: data.state,
                hasMDE: data.hasMde,
                time: data.time,
                duration: data.duration,
                context: data.context,
                playQueueItemID: data.playQueueItemId,
                playBackTime: data.playBackTime,
                row: data.row
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Start Universal Transcode
     * Begin a Universal Transcode Session
     * @param data The data for the request.
     * @param data.hasMde Whether the media item has MDE
     * @param data.path The path to the media item to transcode
     * @param data.mediaIndex The index of the media item to transcode
     * @param data.partIndex The index of the part to transcode
     * @param data.protocol The protocol to use for the transcode session
     * @param data.fastSeek Whether to use fast seek or not
     * @param data.directPlay Whether to use direct play or not
     * @param data.directStream Whether to use direct stream or not
     * @param data.subtitleSize The size of the subtitles
     * @param data.subtites The subtitles
     * @param data.audioBoost The audio boost
     * @param data.location The location of the transcode session
     * @param data.mediaBufferSize The size of the media buffer
     * @param data.session The session ID
     * @param data.addDebugOverlay Whether to add a debug overlay or not
     * @param data.autoAdjustQuality Whether to auto adjust quality or not
     * @returns unknown The transcode session has started
     * @throws ApiError
     */
    public startUniversalTranscode(data: StartUniversalTranscodeData): CancelablePromise<StartUniversalTranscodeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/video/:/transcode/universal/start.mpd',
            query: {
                hasMDE: data.hasMde,
                path: data.path,
                mediaIndex: data.mediaIndex,
                partIndex: data.partIndex,
                protocol: data.protocol,
                fastSeek: data.fastSeek,
                directPlay: data.directPlay,
                directStream: data.directStream,
                subtitleSize: data.subtitleSize,
                subtites: data.subtites,
                audioBoost: data.audioBoost,
                location: data.location,
                mediaBufferSize: data.mediaBufferSize,
                session: data.session,
                addDebugOverlay: data.addDebugOverlay,
                autoAdjustQuality: data.autoAdjustQuality
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class ActivitiesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Server Activities
     * Get Server Activities
     * @returns unknown The Server Activities
     * @throws ApiError
     */
    public getServerActivities(): CancelablePromise<GetServerActivitiesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activities',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Cancel Server Activities
     * Cancel Server Activities
     * @param data The data for the request.
     * @param data.activityUuid The UUID of the activity to cancel.
     * @returns unknown The Server Activity was canceled
     * @throws ApiError
     */
    public cancelServerActivities(data: CancelServerActivitiesData): CancelablePromise<CancelServerActivitiesResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/activities/{activityUUID}',
            path: {
                activityUUID: data.activityUuid
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class ButlerService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Butler tasks
     * Returns a list of butler tasks
     * @returns unknown All butler tasks
     * @throws ApiError
     */
    public getButlerTasks(): CancelablePromise<GetButlerTasksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/butler',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Start all Butler tasks
     * This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     *
     * @returns unknown All tasks were started
     * @throws ApiError
     */
    public startAllTasks(): CancelablePromise<StartAllTasksResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/butler',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Stop all Butler tasks
     * This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     *
     * @returns unknown All tasks were stopped
     * @throws ApiError
     */
    public stopAllTasks(): CancelablePromise<StopAllTasksResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/butler',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Start a single Butler task
     * This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     *
     * @param data The data for the request.
     * @param data.taskName the name of the task to be started.
     * @returns unknown The task was started successfully
     * @throws ApiError
     */
    public startTask(data: StartTaskData): CancelablePromise<StartTaskResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/butler/{taskName}',
            path: {
                taskName: data.taskName
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Stop a single Butler task
     * This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     *
     * @param data The data for the request.
     * @param data.taskName The name of the task to be started.
     * @returns unknown The task was stopped
     * @throws ApiError
     */
    public stopTask(data: StopTaskData): CancelablePromise<StopTaskResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/butler/{taskName}',
            path: {
                taskName: data.taskName
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
                404: 'The task was not running'
            }
        });
    }
    
}

export class HubsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Global Hubs
     * Get Global Hubs filtered by the parameters provided.
     * @param data The data for the request.
     * @param data.count The number of items to return with each hub.
     * @param data.onlyTransient Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @returns unknown returns global hubs
     * @throws ApiError
     */
    public getGlobalHubs(data: GetGlobalHubsData = {}): CancelablePromise<GetGlobalHubsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/hubs',
            query: {
                count: data.count,
                onlyTransient: data.onlyTransient
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get library specific hubs
     * This endpoint will return a list of library specific hubs
     *
     * @param data The data for the request.
     * @param data.sectionId the Id of the library to query
     * @param data.count The number of items to return with each hub.
     * @param data.onlyTransient Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @returns unknown The hubs specific to the library
     * @throws ApiError
     */
    public getLibraryHubs(data: GetLibraryHubsData): CancelablePromise<GetLibraryHubsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/hubs/sections/{sectionId}',
            path: {
                sectionId: data.sectionId
            },
            query: {
                count: data.count,
                onlyTransient: data.onlyTransient
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class SearchService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Perform a search
     * This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).
     *
     * In the response's items, the following extra attributes are returned to further describe or disambiguate the result:
     *
     * - `reason`: The reason for the result, if not because of a direct search term match; can be either:
     * - `section`: There are multiple identical results from different sections.
     * - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).
     * - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for "dylan" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for "arnold", there might be movie results returned with a reason of `actor`
     * - `reasonTitle`: The string associated with the reason code. For a section reason, it'll be the section name; For a hub identifier, it'll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for "arnold").
     * - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.
     *
     * This request is intended to be very fast, and called as the user types.
     *
     * @param data The data for the request.
     * @param data.query The query term
     * @param data.sectionId This gives context to the search, and can result in re-ordering of search result hubs
     * @param data.limit The number of items to return per hub
     * @returns unknown The search results
     * @throws ApiError
     */
    public performSearch(data: PerformSearchData): CancelablePromise<PerformSearchResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/hubs/search',
            query: {
                query: data.query,
                sectionId: data.sectionId,
                limit: data.limit
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Perform a voice search
     * This endpoint performs a search specifically tailored towards voice or other imprecise input which may work badly with the substring and spell-checking heuristics used by the `/hubs/search` endpoint.
     * It uses a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) heuristic to search titles, and as such is much slower than the other search endpoint.
     * Whenever possible, clients should limit the search to the appropriate type.
     * Results, as well as their containing per-type hubs, contain a `distance` attribute which can be used to judge result quality.
     *
     * @param data The data for the request.
     * @param data.query The query term
     * @param data.sectionId This gives context to the search, and can result in re-ordering of search result hubs
     * @param data.limit The number of items to return per hub
     * @returns unknown The search results
     * @throws ApiError
     */
    public performVoiceSearch(data: PerformVoiceSearchData): CancelablePromise<PerformVoiceSearchResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/hubs/search/voice',
            query: {
                query: data.query,
                sectionId: data.sectionId,
                limit: data.limit
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Search Results
     * This will search the database for the string provided.
     * @param data The data for the request.
     * @param data.query The search query string to use
     * @returns unknown Search Results
     * @throws ApiError
     */
    public getSearchResults(data: GetSearchResultsData): CancelablePromise<GetSearchResultsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/search',
            query: {
                query: data.query
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class LibraryService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Hash Value
     * This resource returns hash values for local files
     * @param data The data for the request.
     * @param data.url This is the path to the local file, must be prefixed by `file://`
     * @param data.type Item type
     * @returns unknown The hash of the file
     * @throws ApiError
     */
    public getFileHash(data: GetFileHashData): CancelablePromise<GetFileHashResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/hashes',
            query: {
                url: data.url,
                type: data.type
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Recently Added
     * This endpoint will return the recently added content.
     *
     * @returns unknown The recently added content
     * @throws ApiError
     */
    public getRecentlyAdded(): CancelablePromise<GetRecentlyAddedResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/recentlyAdded',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get All Libraries
     * A library section (commonly referred to as just a library) is a collection of media.
     * Libraries are typed, and depending on their type provide either a flat or a hierarchical view of the media.
     * For example, a music library has an artist > albums > tracks structure, whereas a movie library is flat.
     *
     * Libraries have features beyond just being a collection of media; for starters, they include information about supported types, filters and sorts.
     * This allows a client to provide a rich interface around the media (e.g. allow sorting movies by release year).
     *
     * @returns unknown The libraries available on the Server
     * @throws ApiError
     */
    public getLibraries(): CancelablePromise<GetLibrariesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/sections',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Library Details
     * ## Library Details Endpoint
     *
     * This endpoint provides comprehensive details about the library, focusing on organizational aspects rather than the content itself.
     *
     * The details include:
     *
     * ### Directories
     * Organized into three categories:
     *
     * - **Primary Directories**:
     * - Used in some clients for quick access to media subsets (e.g., "All", "On Deck").
     * - Most can be replicated via media queries.
     * - Customizable by users.
     *
     * - **Secondary Directories**:
     * - Marked with `secondary="1"`.
     * - Used in older clients for structured navigation.
     *
     * - **Special Directories**:
     * - Includes a "By Folder" entry for filesystem-based browsing.
     * - Contains an obsolete `search="1"` entry for on-the-fly search dialog creation.
     *
     * ### Types
     * Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:
     *
     * - **Type Object Attributes**:
     * - `key`: Endpoint for the media list of this type.
     * - `type`: Metadata type (if standard Plex type).
     * - `title`: Title for this content type (e.g., "Movies").
     *
     * - **Filter Objects**:
     * - Subset of the media query language.
     * - Attributes include `filter` (name), `filterType` (data type), `key` (endpoint for value range), and `title`.
     *
     * - **Sort Objects**:
     * - Description of sort fields.
     * - Attributes include `defaultDirection` (asc/desc), `descKey` and `key` (sort parameters), and `title`.
     *
     * > **Note**: Filters and sorts are optional; without them, no filtering controls are rendered.
     *
     * @param data The data for the request.
     * @param data.sectionId the Id of the library to query
     * @param data.includeDetails Whether or not to include details for a section (types, filters, and sorts).
     * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     *
     * @returns unknown The details of the library
     * @throws ApiError
     */
    public getLibrary(data: GetLibraryData): CancelablePromise<GetLibraryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/sections/{sectionId}',
            path: {
                sectionId: data.sectionId
            },
            query: {
                includeDetails: data.includeDetails
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Delete Library Section
     * Delate a library using a specific section
     * @param data The data for the request.
     * @param data.sectionId the Id of the library to query
     * @returns unknown The library is deleted
     * @throws ApiError
     */
    public deleteLibrary(data: DeleteLibraryData): CancelablePromise<DeleteLibraryResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/library/sections/{sectionId}',
            path: {
                sectionId: data.sectionId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Library Items
     * Fetches details from a specific section of the library identified by a section key and a tag. The tag parameter accepts the following values:
     * - `all`: All items in the section.
     * - `unwatched`: Items that have not been played.
     * - `newest`: Items that are recently released.
     * - `recentlyAdded`: Items that are recently added to the library.
     * - `recentlyViewed`: Items that were recently viewed.
     * - `onDeck`: Items to continue watching.
     * - `collection`: Items categorized by collection.
     * - `edition`: Items categorized by edition.
     * - `genre`: Items categorized by genre.
     * - `year`: Items categorized by year of release.
     * - `decade`: Items categorized by decade.
     * - `director`: Items categorized by director.
     * - `actor`: Items categorized by starring actor.
     * - `country`: Items categorized by country of origin.
     * - `contentRating`: Items categorized by content rating.
     * - `rating`: Items categorized by rating.
     * - `resolution`: Items categorized by resolution.
     * - `firstCharacter`: Items categorized by the first letter.
     * - `folder`: Items categorized by folder.
     *
     * @param data The data for the request.
     * @param data.sectionId the Id of the library to query
     * @param data.tag A key representing a specific tag within the section.
     * @returns unknown The contents of the library by section and tag
     * @throws ApiError
     */
    public getLibraryItems(data: GetLibraryItemsData): CancelablePromise<GetLibraryItemsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/sections/{sectionId}/{tag}',
            path: {
                sectionId: data.sectionId,
                tag: data.tag
            }
        });
    }
    
    /**
     * Refresh Library
     * This endpoint Refreshes the library.
     *
     * @param data The data for the request.
     * @param data.sectionId the Id of the library to refresh
     * @returns unknown The library is refreshing
     * @throws ApiError
     */
    public refreshLibrary(data: RefreshLibraryData): CancelablePromise<RefreshLibraryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/sections/{sectionId}/refresh',
            path: {
                sectionId: data.sectionId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Search Library
     * Search for content within a specific section of the library.
     *
     * ### Types
     * Each type in the library comes with a set of filters and sorts, aiding in building dynamic media controls:
     *
     * - **Type Object Attributes**:
     * - `type`: Metadata type (if standard Plex type).
     * - `title`: Title for this content type (e.g., "Movies").
     *
     * - **Filter Objects**:
     * - Subset of the media query language.
     * - Attributes include `filter` (name), `filterType` (data type), `key` (endpoint for value range), and `title`.
     *
     * - **Sort Objects**:
     * - Description of sort fields.
     * - Attributes include `defaultDirection` (asc/desc), `descKey` and `key` (sort parameters), and `title`.
     *
     * > **Note**: Filters and sorts are optional; without them, no filtering controls are rendered.
     *
     * @param data The data for the request.
     * @param data.sectionId the Id of the library to query
     * @param data.type Plex content type to search for
     * @returns unknown The contents of the library by section and type
     * @throws ApiError
     */
    public searchLibrary(data: SearchLibraryData): CancelablePromise<SearchLibraryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/sections/{sectionId}/search',
            path: {
                sectionId: data.sectionId
            },
            query: {
                type: data.type
            }
        });
    }
    
    /**
     * Get Items Metadata
     * This endpoint will return the metadata of a library item specified with the ratingKey.
     *
     * @param data The data for the request.
     * @param data.ratingKey the id of the library item to return the children of.
     * @returns unknown The metadata of the library item.
     * @throws ApiError
     */
    public getMetadata(data: GetMetadataData): CancelablePromise<GetMetadataResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/metadata/{ratingKey}',
            path: {
                ratingKey: data.ratingKey
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Items Children
     * This endpoint will return the children of of a library item specified with the ratingKey.
     *
     * @param data The data for the request.
     * @param data.ratingKey the id of the library item to return the children of.
     * @returns unknown The children of the library item.
     * @throws ApiError
     */
    public getMetadataChildren(data: GetMetadataChildrenData): CancelablePromise<GetMetadataChildrenResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/metadata/{ratingKey}/children',
            path: {
                ratingKey: data.ratingKey
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get On Deck
     * This endpoint will return the on deck content.
     *
     * @returns unknown The on Deck content
     * @throws ApiError
     */
    public getOnDeck(): CancelablePromise<GetOnDeckResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/library/onDeck',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class LogService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Logging a single line message.
     * This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     *
     * @param data The data for the request.
     * @param data.level An integer log level to write to the PMS log with.
     * 0: Error
     * 1: Warning
     * 2: Info
     * 3: Debug
     * 4: Verbose
     *
     * @param data.message The text of the message to write to the log.
     * @param data.source a string indicating the source of the message.
     * @returns unknown Log Message Posted successfully
     * @throws ApiError
     */
    public logLine(data: LogLineData): CancelablePromise<LogLineResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/log',
            query: {
                level: data.level,
                message: data.message,
                source: data.source
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Logging a multi-line message
     * This endpoint allows for the batch addition of log entries to the main Plex Media Server log.
     * It accepts a text/plain request body, where each line represents a distinct log entry.
     * Each log entry consists of URL-encoded key-value pairs, specifying log attributes such as 'level', 'message', and 'source'.
     *
     * Log entries are separated by a newline character (`\n`).
     * Each entry's parameters should be URL-encoded to ensure accurate parsing and handling of special characters.
     * This method is efficient for logging multiple entries in a single API call, reducing the overhead of multiple individual requests.
     *
     * The 'level' parameter specifies the log entry's severity or importance, with the following integer values:
     * - `0`: Error - Critical issues that require immediate attention.
     * - `1`: Warning - Important events that are not critical but may indicate potential issues.
     * - `2`: Info - General informational messages about system operation.
     * - `3`: Debug - Detailed information useful for debugging purposes.
     * - `4`: Verbose - Highly detailed diagnostic information for in-depth analysis.
     *
     * The 'message' parameter contains the log text, and 'source' identifies the log message's origin (e.g., an application name or module).
     *
     * Example of a single log entry format:
     * `level=4&message=Sample%20log%20entry&source=applicationName`
     *
     * Ensure each parameter is properly URL-encoded to avoid interpretation issues.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Multi-Line Log Message Posted successfully
     * @throws ApiError
     */
    public logMultiLine(data: LogMultiLineData): CancelablePromise<LogMultiLineResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/log',
            body: data.requestBody,
            mediaType: 'text/plain',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Enabling Papertrail
     * This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     *
     * @returns unknown Papertrail enabled successfully
     * @throws ApiError
     */
    public enablePaperTrail(): CancelablePromise<EnablePaperTrailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/log/networked',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
                403: 'the user was not signed in'
            }
        });
    }
    
}

export class PlexService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get a Pin
     * Retrieve a Pin from Plex.tv for authentication flows
     * @param data The data for the request.
     * @param data.xPlexClientIdentifier The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     * @param data.strong Determines the kind of code returned by the API call
     * Strong codes are used for Pin authentication flows
     * Non-Strong codes are used for `Plex.tv/link`
     *
     * @returns unknown The Pin
     * @throws ApiError
     */
    public getPin(data: GetPinData): CancelablePromise<GetPinResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/pins',
            headers: {
                'X-Plex-Client-Identifier': data.xPlexClientIdentifier
            },
            query: {
                strong: data.strong
            },
            errors: {
                400: 'X-Plex-Client-Identifier is missing'
            }
        });
    }
    
    /**
     * Get Access Token
     * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
     * @param data The data for the request.
     * @param data.pinId The PinID to retrieve an access token for
     * @param data.xPlexClientIdentifier The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     * @returns unknown Access Token
     * @throws ApiError
     */
    public getToken(data: GetTokenData): CancelablePromise<GetTokenResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/pins/{pinID}',
            path: {
                pinID: data.pinId
            },
            headers: {
                'X-Plex-Client-Identifier': data.xPlexClientIdentifier
            },
            errors: {
                400: 'X-Plex-Client-Identifier is missing'
            }
        });
    }
    
}

export class PlaylistsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create a Playlist
     * Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass:
     * - `uri` - The content URI for what we're playing (e.g. `server://1234/com.plexapp.plugins.library/library/metadata/1`).
     * - `playQueueID` - To create a playlist from an existing play queue.
     *
     * @param data The data for the request.
     * @param data.title name of the playlist
     * @param data.type type of playlist to create
     * @param data.smart whether the playlist is smart or not
     * @param data.uri the content URI for the playlist
     * @param data.playQueueId the play queue to copy to a playlist
     * @returns unknown returns all playlists
     * @throws ApiError
     */
    public createPlaylist(data: CreatePlaylistData): CancelablePromise<CreatePlaylistResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/playlists',
            query: {
                title: data.title,
                type: data.type,
                smart: data.smart,
                uri: data.uri,
                playQueueID: data.playQueueId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get All Playlists
     * Get All Playlists given the specified filters.
     * @param data The data for the request.
     * @param data.playlistType limit to a type of playlist.
     * @param data.smart type of playlists to return (default is all).
     * @returns unknown returns all playlists
     * @throws ApiError
     */
    public getPlaylists(data: GetPlaylistsData = {}): CancelablePromise<GetPlaylistsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/playlists',
            query: {
                playlistType: data.playlistType,
                smart: data.smart
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Retrieve Playlist
     * Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item:
     * Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
     *
     * @param data The data for the request.
     * @param data.playlistId the ID of the playlist
     * @returns unknown The playlist
     * @throws ApiError
     */
    public getPlaylist(data: GetPlaylistData): CancelablePromise<GetPlaylistResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/playlists/{playlistID}',
            path: {
                playlistID: data.playlistId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Deletes a Playlist
     * This endpoint will delete a playlist
     *
     * @param data The data for the request.
     * @param data.playlistId the ID of the playlist
     * @returns unknown The playlist is deleted
     * @throws ApiError
     */
    public deletePlaylist(data: DeletePlaylistData): CancelablePromise<DeletePlaylistResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/playlists/{playlistID}',
            path: {
                playlistID: data.playlistId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Update a Playlist
     * From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
     *
     * @param data The data for the request.
     * @param data.playlistId the ID of the playlist
     * @param data.title name of the playlist
     * @param data.summary summary description of the playlist
     * @returns unknown The playlist is deleted
     * @throws ApiError
     */
    public updatePlaylist(data: UpdatePlaylistData): CancelablePromise<UpdatePlaylistResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/playlists/{playlistID}',
            path: {
                playlistID: data.playlistId
            },
            query: {
                title: data.title,
                summary: data.summary
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Retrieve Playlist Contents
     * Gets the contents of a playlist. Should be paged by clients via standard mechanisms.
     * By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter.
     * For example, you could use this to display a list of recently added albums vis a smart playlist.
     * Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
     *
     * @param data The data for the request.
     * @param data.playlistId the ID of the playlist
     * @param data.type the metadata type of the item to return
     * @returns unknown The playlist contents
     * @throws ApiError
     */
    public getPlaylistContents(data: GetPlaylistContentsData): CancelablePromise<GetPlaylistContentsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/playlists/{playlistID}/items',
            path: {
                playlistID: data.playlistId
            },
            query: {
                type: data.type
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Delete Playlist Contents
     * Clears a playlist, only works with dumb playlists. Returns the playlist.
     *
     * @param data The data for the request.
     * @param data.playlistId the ID of the playlist
     * @returns unknown The playlist contents are cleared
     * @throws ApiError
     */
    public clearPlaylistContents(data: ClearPlaylistContentsData): CancelablePromise<ClearPlaylistContentsResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/playlists/{playlistID}/items',
            path: {
                playlistID: data.playlistId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Adding to a Playlist
     * Adds a generator to a playlist, same parameters as the POST to create. With a dumb playlist, this adds the specified items to the playlist.
     * With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
     *
     * @param data The data for the request.
     * @param data.playlistId the ID of the playlist
     * @param data.uri the content URI for the playlist
     * @param data.playQueueId the play queue to add to a playlist
     * @returns unknown Playlist Updated
     * @throws ApiError
     */
    public addPlaylistContents(data: AddPlaylistContentsData): CancelablePromise<AddPlaylistContentsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/playlists/{playlistID}/items',
            path: {
                playlistID: data.playlistId
            },
            query: {
                uri: data.uri,
                playQueueID: data.playQueueId
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Upload Playlist
     * Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
     *
     * @param data The data for the request.
     * @param data.path absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.
     * If the `path` argument is a directory, that path will be scanned for playlist files to be processed.
     * Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.
     * The GUID of each playlist is based on the filename.
     * If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.
     * The GUID of each playlist is based on the filename.
     *
     * @param data.force Force overwriting of duplicate playlists.
     * By default, a playlist file uploaded with the same path will overwrite the existing playlist.
     * The `force` argument is used to disable overwriting.
     * If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
     *
     * @returns unknown The playlist is uploaded
     * @throws ApiError
     */
    public uploadPlaylist(data: UploadPlaylistData): CancelablePromise<UploadPlaylistResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/playlists/upload',
            query: {
                path: data.path,
                force: data.force
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class AuthenticationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get a Transient Token.
     * This endpoint provides the caller with a temporary token with the same access level as the caller's token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     *
     * @param data The data for the request.
     * @param data.type `delegation` - This is the only supported `type` parameter.
     * @param data.scope `all` - This is the only supported `scope` parameter.
     * @returns unknown A Transient Token
     * @throws ApiError
     */
    public getTransientToken(data: GetTransientTokenData): CancelablePromise<GetTransientTokenResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/security/token',
            query: {
                type: data.type,
                scope: data.scope
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Source Connection Information
     * If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token.
     * Note: requires Plex Media Server >= 1.15.4.
     *
     * @param data The data for the request.
     * @param data.source The source identifier with an included prefix.
     * @returns unknown Source Connection Information
     * @throws ApiError
     */
    public getSourceConnectionInformation(data: GetSourceConnectionInformationData): CancelablePromise<GetSourceConnectionInformationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/security/resources',
            query: {
                source: data.source
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class StatisticsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Media Statistics
     * This will return the media statistics for the server
     * @param data The data for the request.
     * @param data.timespan The timespan to retrieve statistics for
     * the exact meaning of this parameter is not known
     *
     * @returns unknown Media Statistics
     * @throws ApiError
     */
    public getStatistics(data: GetStatisticsData = {}): CancelablePromise<GetStatisticsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/statistics/media',
            query: {
                Timespan: data.timespan
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class SessionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Active Sessions
     * This will retrieve the "Now Playing" Information of the PMS.
     * @returns unknown List of Active Plex Sessions
     * @throws ApiError
     */
    public getSessions(): CancelablePromise<GetSessionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/status/sessions',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Session History
     * This will Retrieve a listing of all history views.
     * @returns unknown List of Plex Sessions
     * @throws ApiError
     */
    public getSessionHistory(): CancelablePromise<GetSessionHistoryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/status/sessions/history/all',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Get Transcode Sessions
     * Get Transcode Sessions
     * @returns unknown The Transcode Sessions
     * @throws ApiError
     */
    public getTranscodeSessions(): CancelablePromise<GetTranscodeSessionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/transcode/sessions',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Stop a Transcode Session
     * Stop a Transcode Session
     * @param data The data for the request.
     * @param data.sessionKey the Key of the transcode session to stop
     * @returns void The Transcode Session ended
     * @throws ApiError
     */
    public stopTranscodeSession(data: StopTranscodeSessionData): CancelablePromise<StopTranscodeSessionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/transcode/sessions/{sessionKey}',
            path: {
                sessionKey: data.sessionKey
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
}

export class UpdaterService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Querying status of updates
     * Querying status of updates
     * @returns unknown The Server Updates
     * @throws ApiError
     */
    public getUpdateStatus(): CancelablePromise<GetUpdateStatusResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/updater/status',
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Checking for updates
     * Checking for updates
     * @param data The data for the request.
     * @param data.download Indicate that you want to start download any updates found.
     * @returns unknown The update check is started, if download is set to 1 and the system is able to update automatically, the update download will start.
     * @throws ApiError
     */
    public checkForUpdates(data: CheckForUpdatesData = {}): CancelablePromise<CheckForUpdatesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/updater/check',
            query: {
                download: data.download
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.'
            }
        });
    }
    
    /**
     * Apply Updates
     * Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
     *
     * @param data The data for the request.
     * @param data.tonight Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     * @param data.skip Indicate that the latest version should be marked as skipped. The <Release> entry for this version will have the `state` set to `skipped`.
     * @returns unknown If the update process started correctly
     * @throws ApiError
     */
    public applyUpdates(data: ApplyUpdatesData = {}): CancelablePromise<ApplyUpdatesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/updater/apply',
            query: {
                tonight: data.tonight,
                skip: data.skip
            },
            errors: {
                400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
                401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
                500: 'If the update process failed to start'
            }
        });
    }
    
}