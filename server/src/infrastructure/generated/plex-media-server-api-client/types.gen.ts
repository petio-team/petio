// This file is auto-generated by @hey-api/openapi-ts

export type GetServerCapabilitiesResponse = {
    MediaContainer?: {
        size?: number;
        allowCameraUpload?: boolean;
        allowChannelAccess?: boolean;
        allowMediaDeletion?: boolean;
        allowSharing?: boolean;
        allowSync?: boolean;
        allowTuners?: boolean;
        backgroundProcessing?: boolean;
        certificate?: boolean;
        companionProxy?: boolean;
        countryCode?: string;
        diagnostics?: string;
        eventStream?: boolean;
        friendlyName?: string;
        hubSearch?: boolean;
        itemClusters?: boolean;
        livetv?: number;
        machineIdentifier?: string;
        mediaProviders?: boolean;
        multiuser?: boolean;
        musicAnalysis?: number;
        myPlex?: boolean;
        myPlexMappingState?: string;
        myPlexSigninState?: string;
        myPlexSubscription?: boolean;
        myPlexUsername?: string;
        offlineTranscode?: number;
        ownerFeatures?: string;
        photoAutoTag?: boolean;
        platform?: string;
        platformVersion?: string;
        pluginHost?: boolean;
        pushNotifications?: boolean;
        readOnlyLibraries?: boolean;
        streamingBrainABRVersion?: number;
        streamingBrainVersion?: number;
        sync?: boolean;
        transcoderActiveVideoSessions?: number;
        transcoderAudio?: boolean;
        transcoderLyrics?: boolean;
        transcoderPhoto?: boolean;
        transcoderSubtitles?: boolean;
        transcoderVideo?: boolean;
        transcoderVideoBitrates?: string;
        transcoderVideoQualities?: string;
        transcoderVideoResolutions?: string;
        updatedAt?: number;
        updater?: boolean;
        version?: string;
        voiceSearch?: boolean;
        Directory?: Array<{
            count?: number;
            key?: string;
            title?: string;
        }>;
    };
};

export type GetServerPreferencesResponse = {
    MediaContainer?: {
        size?: number;
        Setting?: Array<{
            id?: string;
            label?: string;
            summary?: string;
            type?: string;
            default?: boolean;
            value?: boolean;
            hidden?: boolean;
            advanced?: boolean;
            group?: string;
            enumValues?: string;
        }>;
    };
};

export type GetAvailableClientsResponse = {
    MediaContainer?: {
        size?: number;
        Server?: Array<{
            name?: string;
            host?: string;
            address?: string;
            port?: number;
            machineIdentifier?: string;
            version?: string;
            protocol?: string;
            product?: string;
            deviceClass?: string;
            protocolVersion?: number;
            protocolCapabilities?: string;
        }>;
    };
};

export type GetDevicesResponse = {
    MediaContainer?: {
        size?: number;
        identifier?: string;
        Device?: Array<{
            id?: number;
            name?: string;
            platform?: string;
            clientIdentifier?: string;
            createdAt?: number;
        }>;
    };
};

export type GetServerIdentityResponse = {
    MediaContainer?: {
        size?: number;
        claimed?: boolean;
        machineIdentifier?: string;
        version?: string;
    };
};

export type GetMyPlexAccountResponse = {
    MyPlex?: {
        authToken?: string;
        username?: string;
        mappingState?: string;
        mappingError?: string;
        signInState?: string;
        publicAddress?: string;
        publicPort?: number;
        privateAddress?: string;
        privatePort?: number;
        subscriptionFeatures?: string;
        subscriptionActive?: boolean;
        subscriptionState?: string;
    };
};

export type GetResizedPhotoData = {
    /**
     * The width for the resized photo
     */
    blur: number;
    /**
     * The height for the resized photo
     */
    height: number;
    /**
     * images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against.
     */
    minSize: 0 | 1;
    /**
     * The opacity for the resized photo
     */
    opacity: number;
    /**
     * allow images to be resized beyond native dimensions.
     */
    upscale: 0 | 1;
    /**
     * path to image within Plex
     */
    url: string;
    /**
     * The width for the resized photo
     */
    width: number;
};

export type GetResizedPhotoResponse = unknown;

export type GetServerListResponse = {
    MediaContainer?: {
        size?: number;
        Server?: Array<{
            name?: string;
            host?: string;
            address?: string;
            port?: number;
            machineIdentifier?: string;
            version?: string;
        }>;
    };
};

export type MarkPlayedData = {
    /**
     * The media key to mark as played
     */
    key: number;
};

export type MarkPlayedResponse = unknown;

export type MarkUnplayedData = {
    /**
     * The media key to mark as Unplayed
     */
    key: number;
};

export type MarkUnplayedResponse = unknown;

export type UpdatePlayProgressData = {
    /**
     * the media key
     */
    key: string;
    /**
     * The playback state of the media item.
     */
    state: string;
    /**
     * The time, in milliseconds, used to set the media playback progress.
     */
    time: number;
};

export type UpdatePlayProgressResponse = unknown;

export type GetTimelineData = {
    /**
     * The context of the media item
     */
    context: string;
    /**
     * The duration of the media item
     */
    duration: number;
    /**
     * Whether the media item has MDE
     */
    hasMde: number;
    /**
     * The key of the media item to get the timeline for
     */
    key: string;
    /**
     * The playback time of the media item
     */
    playBackTime: number;
    /**
     * The play queue item ID of the media item
     */
    playQueueItemId: number;
    /**
     * The rating key of the media item
     */
    ratingKey: number;
    /**
     * The row of the media item
     */
    row: number;
    /**
     * The state of the media item
     */
    state: 'playing' | 'paused' | 'stopped';
    /**
     * The time of the media item
     */
    time: number;
};

export type GetTimelineResponse = unknown;

export type StartUniversalTranscodeData = {
    /**
     * Whether to add a debug overlay or not
     */
    addDebugOverlay?: number;
    /**
     * The audio boost
     */
    audioBoost?: number;
    /**
     * Whether to auto adjust quality or not
     */
    autoAdjustQuality?: number;
    /**
     * Whether to use direct play or not
     */
    directPlay?: number;
    /**
     * Whether to use direct stream or not
     */
    directStream?: number;
    /**
     * Whether to use fast seek or not
     */
    fastSeek?: number;
    /**
     * Whether the media item has MDE
     */
    hasMde: number;
    /**
     * The location of the transcode session
     */
    location?: string;
    /**
     * The size of the media buffer
     */
    mediaBufferSize?: number;
    /**
     * The index of the media item to transcode
     */
    mediaIndex: number;
    /**
     * The index of the part to transcode
     */
    partIndex: number;
    /**
     * The path to the media item to transcode
     */
    path: string;
    /**
     * The protocol to use for the transcode session
     */
    protocol: string;
    /**
     * The session ID
     */
    session?: string;
    /**
     * The subtitles
     */
    subtites?: string;
    /**
     * The size of the subtitles
     */
    subtitleSize?: number;
};

export type StartUniversalTranscodeResponse = unknown;

export type GetServerActivitiesResponse = {
    MediaContainer?: {
        size?: number;
        Activity?: Array<{
            uuid?: string;
            type?: string;
            cancellable?: boolean;
            userID?: number;
            title?: string;
            subtitle?: string;
            progress?: number;
            Context?: {
                librarySectionID?: string;
            };
        }>;
    };
};

export type CancelServerActivitiesData = {
    /**
     * The UUID of the activity to cancel.
     */
    activityUuid: string;
};

export type CancelServerActivitiesResponse = unknown;

export type GetButlerTasksResponse = {
    ButlerTasks?: {
        ButlerTask?: Array<{
            name?: string;
            interval?: number;
            scheduleRandomized?: boolean;
            enabled?: boolean;
            title?: string;
            description?: string;
        }>;
    };
};

export type StartAllTasksResponse = unknown;

export type StopAllTasksResponse = unknown;

export type StartTaskData = {
    /**
     * the name of the task to be started.
     */
    taskName: 'BackupDatabase' | 'BuildGracenoteCollections' | 'CheckForUpdates' | 'CleanOldBundles' | 'CleanOldCacheFiles' | 'DeepMediaAnalysis' | 'GenerateAutoTags' | 'GenerateChapterThumbs' | 'GenerateMediaIndexFiles' | 'OptimizeDatabase' | 'RefreshLibraries' | 'RefreshLocalMedia' | 'RefreshPeriodicMetadata' | 'UpgradeMediaAnalysis';
};

export type StartTaskResponse = unknown;

export type StopTaskData = {
    /**
     * The name of the task to be started.
     */
    taskName: 'BackupDatabase' | 'BuildGracenoteCollections' | 'CheckForUpdates' | 'CleanOldBundles' | 'CleanOldCacheFiles' | 'DeepMediaAnalysis' | 'GenerateAutoTags' | 'GenerateChapterThumbs' | 'GenerateMediaIndexFiles' | 'OptimizeDatabase' | 'RefreshLibraries' | 'RefreshLocalMedia' | 'RefreshPeriodicMetadata' | 'UpgradeMediaAnalysis';
};

export type StopTaskResponse = unknown;

export type GetGlobalHubsData = {
    /**
     * The number of items to return with each hub.
     */
    count?: number;
    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    onlyTransient?: 0 | 1;
};

export type GetGlobalHubsResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        identifier?: string;
        Hub?: Array<{
            hubKey?: string;
            key?: string;
            title?: string;
            type?: string;
            hubIdentifier?: string;
            context?: string;
            size?: number;
            more?: boolean;
            style?: string;
            promoted?: boolean;
            Metadata?: Array<{
                ratingKey?: string;
                key?: string;
                guid?: string;
                type?: string;
                title?: string;
                titleSort?: string;
                summary?: string;
                smart?: boolean;
                playlistType?: string;
                composite?: string;
                icon?: string;
                viewCount?: number;
                lastViewedAt?: number;
                duration?: number;
                leafCount?: number;
                addedAt?: number;
                updatedAt?: number;
            }>;
        }>;
    };
};

export type GetLibraryHubsData = {
    /**
     * The number of items to return with each hub.
     */
    count?: number;
    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    onlyTransient?: 0 | 1;
    /**
     * the Id of the library to query
     */
    sectionId: number;
};

export type GetLibraryHubsResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        identifier?: string;
        librarySectionID?: number;
        librarySectionTitle?: string;
        librarySectionUUID?: string;
        Hub?: Array<{
            key?: string;
            title?: string;
            type?: string;
            hubIdentifier?: string;
            context?: string;
            size?: number;
            more?: boolean;
            style?: string;
            hubKey?: string;
            Metadata?: Array<{
                ratingKey?: string;
                key?: string;
                guid?: string;
                studio?: string;
                type?: string;
                title?: string;
                librarySectionTitle?: string;
                librarySectionID?: number;
                librarySectionKey?: string;
                contentRating?: string;
                summary?: string;
                rating?: number;
                audienceRating?: number;
                viewCount?: number;
                lastViewedAt?: number;
                year?: number;
                tagline?: string;
                thumb?: string;
                art?: string;
                duration?: number;
                originallyAvailableAt?: string;
                addedAt?: number;
                updatedAt?: number;
                audienceRatingImage?: string;
                primaryExtraKey?: string;
                ratingImage?: string;
                Media?: Array<{
                    id?: number;
                    duration?: number;
                    bitrate?: number;
                    width?: number;
                    height?: number;
                    aspectRatio?: number;
                    audioChannels?: number;
                    audioCodec?: string;
                    videoCodec?: string;
                    videoResolution?: string;
                    container?: string;
                    videoFrameRate?: string;
                    optimizedForStreaming?: number;
                    audioProfile?: string;
                    has64bitOffsets?: boolean;
                    videoProfile?: string;
                    Part?: Array<{
                        id?: number;
                        key?: string;
                        duration?: number;
                        file?: string;
                        size?: number;
                        audioProfile?: string;
                        container?: string;
                        has64bitOffsets?: boolean;
                        optimizedForStreaming?: boolean;
                        videoProfile?: string;
                    }>;
                }>;
                Genre?: Array<{
                    tag?: string;
                }>;
                Country?: Array<{
                    tag?: string;
                }>;
                Director?: Array<{
                    tag?: string;
                }>;
                Role?: Array<{
                    tag?: string;
                }>;
                Writer?: Array<{
                    tag?: string;
                }>;
                skipCount?: number;
                chapterSource?: string;
            }>;
            promoted?: boolean;
            random?: boolean;
        }>;
    };
};

export type PerformSearchData = {
    /**
     * The number of items to return per hub
     */
    limit?: number;
    /**
     * The query term
     */
    query: string;
    /**
     * This gives context to the search, and can result in re-ordering of search result hubs
     */
    sectionId?: number;
};

export type PerformSearchResponse = unknown;

export type PerformVoiceSearchData = {
    /**
     * The number of items to return per hub
     */
    limit?: number;
    /**
     * The query term
     */
    query: string;
    /**
     * This gives context to the search, and can result in re-ordering of search result hubs
     */
    sectionId?: number;
};

export type PerformVoiceSearchResponse = unknown;

export type GetSearchResultsData = {
    /**
     * The search query string to use
     */
    query: string;
};

export type GetSearchResultsResponse = {
    MediaContainer?: {
        size?: number;
        identifier?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        Metadata?: Array<{
            allowSync?: boolean;
            librarySectionID?: number;
            librarySectionTitle?: string;
            librarySectionUUID?: string;
            personal?: boolean;
            sourceTitle?: string;
            ratingKey?: number;
            key?: string;
            guid?: string;
            studio?: string;
            type?: string;
            title?: string;
            contentRating?: string;
            summary?: string;
            rating?: number;
            audienceRating?: number;
            year?: number;
            tagline?: string;
            thumb?: string;
            art?: string;
            duration?: number;
            originallyAvailableAt?: string;
            addedAt?: number;
            updatedAt?: number;
            audienceRatingImage?: string;
            chapterSource?: string;
            primaryExtraKey?: string;
            ratingImage?: string;
            Media?: Array<{
                id?: number;
                duration?: number;
                bitrate?: number;
                width?: number;
                height?: number;
                aspectRatio?: number;
                audioChannels?: number;
                audioCodec?: string;
                videoCodec?: string;
                videoResolution?: number;
                container?: string;
                videoFrameRate?: string;
                audioProfile?: string;
                videoProfile?: string;
                Part?: Array<{
                    id?: number;
                    key?: string;
                    duration?: number;
                    file?: string;
                    size?: number;
                    audioProfile?: string;
                    container?: string;
                    videoProfile?: string;
                }>;
            }>;
            Genre?: Array<{
                tag?: string;
            }>;
            Director?: Array<{
                tag?: string;
            }>;
            Writer?: Array<{
                tag?: string;
            }>;
            Country?: Array<{
                tag?: string;
            }>;
            Role?: Array<{
                tag?: string;
            }>;
        }>;
        Provider?: Array<{
            key?: string;
            title?: string;
            type?: string;
        }>;
    };
};

export type GetFileHashData = {
    /**
     * Item type
     */
    type?: number;
    /**
     * This is the path to the local file, must be prefixed by `file://`
     */
    url: string;
};

export type GetFileHashResponse = unknown;

export type GetRecentlyAddedResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        identifier?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        mixedParents?: boolean;
        Metadata?: Array<{
            allowSync?: boolean;
            librarySectionID?: number;
            librarySectionTitle?: string;
            librarySectionUUID?: string;
            ratingKey?: number;
            key?: string;
            guid?: string;
            studio?: string;
            type?: string;
            title?: string;
            contentRating?: string;
            summary?: string;
            rating?: number;
            audienceRating?: number;
            year?: number;
            tagline?: string;
            thumb?: string;
            art?: string;
            duration?: number;
            originallyAvailableAt?: string;
            addedAt?: number;
            updatedAt?: number;
            audienceRatingImage?: string;
            chapterSource?: string;
            primaryExtraKey?: string;
            ratingImage?: string;
            Media?: Array<{
                id?: number;
                duration?: number;
                bitrate?: number;
                width?: number;
                height?: number;
                aspectRatio?: number;
                audioChannels?: number;
                audioCodec?: string;
                videoCodec?: string;
                videoResolution?: number;
                container?: string;
                videoFrameRate?: string;
                optimizedForStreaming?: number;
                has64bitOffsets?: boolean;
                videoProfile?: string;
                Part?: Array<{
                    id?: number;
                    key?: string;
                    duration?: number;
                    file?: string;
                    size?: number;
                    container?: string;
                    has64bitOffsets?: boolean;
                    hasThumbnail?: number;
                    optimizedForStreaming?: boolean;
                    videoProfile?: string;
                }>;
            }>;
            Genre?: Array<{
                tag?: string;
            }>;
            Director?: Array<{
                tag?: string;
            }>;
            Writer?: Array<{
                tag?: string;
            }>;
            Country?: Array<{
                tag?: string;
            }>;
            Role?: Array<{
                tag?: string;
            }>;
        }>;
    };
};

export type GetLibrariesResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        title1?: string;
        Directory?: Array<{
            allowSync?: boolean;
            art?: string;
            composite?: string;
            filters?: boolean;
            refreshing?: boolean;
            thumb?: string;
            key?: string;
            type?: string;
            title?: string;
            agent?: string;
            scanner?: string;
            language?: string;
            uuid?: string;
            updatedAt?: number;
            createdAt?: number;
            scannedAt?: number;
            content?: boolean;
            directory?: boolean;
            contentChangedAt?: number;
            hidden?: number;
            Location?: Array<{
                id?: number;
                path?: string;
            }>;
        }>;
    };
};

export type GetLibraryData = {
    /**
     * Whether or not to include details for a section (types, filters, and sorts).
     * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
     *
     */
    includeDetails?: 0 | 1;
    /**
     * the Id of the library to query
     */
    sectionId: number;
};

export type GetLibraryResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        art?: string;
        content?: string;
        identifier?: string;
        librarySectionID?: number;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        thumb?: string;
        title1?: string;
        viewGroup?: string;
        viewMode?: number;
        Directory?: Array<{
            key?: string;
            title?: string;
            secondary?: boolean;
            prompt?: string;
            search?: boolean;
        }>;
        Type?: Array<{
            key?: string;
            type?: string;
            title?: string;
            active?: boolean;
            Filter?: Array<{
                filter?: string;
                filterType?: string;
                key?: string;
                title?: string;
                type?: string;
            }>;
            Sort?: Array<{
                default?: string;
                defaultDirection?: string;
                descKey?: string;
                firstCharacterKey?: string;
                key?: string;
                title?: string;
            }>;
            Field?: Array<{
                key?: string;
                title?: string;
                type?: string;
                subType?: string;
            }>;
        }>;
        FieldType?: Array<{
            type?: string;
            Operator?: Array<{
                key?: string;
                title?: string;
            }>;
        }>;
    };
};

export type DeleteLibraryData = {
    /**
     * the Id of the library to query
     */
    sectionId: number;
};

export type DeleteLibraryResponse = unknown;

export type GetLibraryItemsData = {
    /**
     * the Id of the library to query
     */
    sectionId: number;
    /**
     * A key representing a specific tag within the section.
     */
    tag: 'all' | 'unwatched' | 'newest' | 'recentlyAdded' | 'recentlyViewed' | 'onDeck' | 'collection' | 'edition' | 'genre' | 'year' | 'decade' | 'director' | 'actor' | 'country' | 'contentRating' | 'rating' | 'resolution' | 'firstCharacter' | 'folder';
};

export type GetLibraryItemsResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        art?: string;
        identifier?: string;
        librarySectionID?: number;
        librarySectionTitle?: string;
        librarySectionUUID?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        thumb?: string;
        title1?: string;
        title2?: string;
        viewGroup?: string;
        viewMode?: number;
        mixedParents?: boolean;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            guid?: string;
            studio?: string;
            type?: string;
            title?: string;
            contentRating?: string;
            summary?: string;
            rating?: number;
            audienceRating?: number;
            year?: number;
            tagline?: string;
            thumb?: string;
            art?: string;
            duration?: number;
            originallyAvailableAt?: string;
            addedAt?: number;
            updatedAt?: number;
            audienceRatingImage?: string;
            chapterSource?: string;
            primaryExtraKey?: string;
            ratingImage?: string;
            grandparentRatingKey?: string;
            grandparentGuid?: string;
            grandparentKey?: string;
            grandparentTitle?: string;
            grandparentThumb?: string;
            grandparentArt?: string;
            grandparentTheme?: string;
            Media?: Array<{
                id?: number;
                duration?: number;
                bitrate?: number;
                width?: number;
                height?: number;
                aspectRatio?: number;
                audioChannels?: number;
                audioCodec?: string;
                videoCodec?: string;
                videoResolution?: string;
                container?: string;
                videoFrameRate?: string;
                videoProfile?: string;
                Part?: Array<{
                    id?: number;
                    key?: string;
                    duration?: number;
                    file?: string;
                    size?: number;
                    container?: string;
                    videoProfile?: string;
                }>;
            }>;
            Genre?: Array<{
                tag?: string;
            }>;
            Country?: Array<{
                tag?: string;
            }>;
            Director?: Array<{
                tag?: string;
            }>;
            Writer?: Array<{
                tag?: string;
            }>;
            Role?: Array<{
                tag?: string;
            }>;
            titleSort?: string;
            viewCount?: number;
            lastViewedAt?: number;
            originalTitle?: string;
            viewOffset?: number;
            skipCount?: number;
            index?: number;
            theme?: string;
            leafCount?: number;
            viewedLeafCount?: number;
            childCount?: number;
            hasPremiumExtras?: string;
            hasPremiumPrimaryExtra?: string;
            parentRatingKey?: string;
            parentGuid?: string;
            parentStudio?: string;
            parentKey?: string;
            parentTitle?: string;
            parentIndex?: number;
            parentYear?: number;
            parentThumb?: string;
            parentTheme?: string;
        }>;
    };
};

export type RefreshLibraryData = {
    /**
     * the Id of the library to refresh
     */
    sectionId: number;
};

export type RefreshLibraryResponse = unknown;

export type SearchLibraryData = {
    /**
     * the Id of the library to query
     */
    sectionId: number;
    /**
     * Plex content type to search for
     */
    type: 1 | 2 | 3 | 4;
};

export type SearchLibraryResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        art?: string;
        identifier?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        nocache?: boolean;
        thumb?: string;
        title1?: string;
        title2?: string;
        viewGroup?: string;
        viewMode?: number;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            parentRatingKey?: string;
            guid?: string;
            parentGuid?: string;
            parentStudio?: string;
            type?: string;
            title?: string;
            parentKey?: string;
            parentTitle?: string;
            summary?: string;
            index?: number;
            parentIndex?: number;
            parentYear?: number;
            thumb?: string;
            art?: string;
            parentThumb?: string;
            parentTheme?: string;
            addedAt?: number;
            updatedAt?: number;
        }>;
    };
};

export type GetMetadataData = {
    /**
     * the id of the library item to return the children of.
     */
    ratingKey: number;
};

export type GetMetadataResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        identifier?: string;
        librarySectionID?: number;
        librarySectionTitle?: string;
        librarySectionUUID?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            guid?: string;
            studio?: string;
            type?: string;
            title?: string;
            librarySectionTitle?: string;
            librarySectionID?: number;
            librarySectionKey?: string;
            contentRating?: string;
            summary?: string;
            rating?: number;
            audienceRating?: number;
            year?: number;
            tagline?: string;
            thumb?: string;
            art?: string;
            duration?: number;
            originallyAvailableAt?: string;
            addedAt?: number;
            updatedAt?: number;
            audienceRatingImage?: string;
            hasPremiumPrimaryExtra?: string;
            ratingImage?: string;
            Media?: Array<{
                id?: number;
                duration?: number;
                bitrate?: number;
                width?: number;
                height?: number;
                aspectRatio?: number;
                audioChannels?: number;
                audioCodec?: string;
                videoCodec?: string;
                videoResolution?: string;
                container?: string;
                videoFrameRate?: string;
                optimizedForStreaming?: number;
                audioProfile?: string;
                has64bitOffsets?: boolean;
                videoProfile?: string;
                Part?: Array<{
                    id?: number;
                    key?: string;
                    duration?: number;
                    file?: string;
                    size?: number;
                    audioProfile?: string;
                    container?: string;
                    has64bitOffsets?: boolean;
                    optimizedForStreaming?: boolean;
                    videoProfile?: string;
                    Stream?: Array<{
                        id?: number;
                        streamType?: number;
                        default?: boolean;
                        codec?: string;
                        index?: number;
                        bitrate?: number;
                        bitDepth?: number;
                        chromaLocation?: string;
                        chromaSubsampling?: string;
                        codedHeight?: number;
                        codedWidth?: number;
                        colorPrimaries?: string;
                        colorRange?: string;
                        colorSpace?: string;
                        colorTrc?: string;
                        frameRate?: number;
                        hasScalingMatrix?: boolean;
                        height?: number;
                        level?: number;
                        profile?: string;
                        refFrames?: number;
                        scanType?: string;
                        streamIdentifier?: string;
                        width?: number;
                        displayTitle?: string;
                        extendedDisplayTitle?: string;
                        selected?: boolean;
                        channels?: number;
                        language?: string;
                        languageTag?: string;
                        languageCode?: string;
                        samplingRate?: number;
                    }>;
                }>;
            }>;
            Genre?: Array<{
                id?: number;
                filter?: string;
                tag?: string;
            }>;
            Country?: Array<{
                id?: number;
                filter?: string;
                tag?: string;
            }>;
            Guid?: Array<{
                id?: string;
            }>;
            Rating?: Array<{
                image?: string;
                value?: number;
                type?: string;
            }>;
            Director?: Array<{
                id?: number;
                filter?: string;
                tag?: string;
                tagKey?: string;
                thumb?: string;
            }>;
            Writer?: Array<{
                id?: number;
                filter?: string;
                tag?: string;
                tagKey?: string;
                thumb?: string;
            }>;
            Role?: Array<{
                id?: number;
                filter?: string;
                tag?: string;
                tagKey?: string;
                role?: string;
                thumb?: string;
            }>;
            Producer?: Array<{
                id?: number;
                filter?: string;
                tag?: string;
                tagKey?: string;
                thumb?: string;
            }>;
        }>;
    };
};

export type GetMetadataChildrenData = {
    /**
     * the id of the library item to return the children of.
     */
    ratingKey: number;
};

export type GetMetadataChildrenResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        art?: string;
        identifier?: string;
        key?: string;
        librarySectionID?: number;
        librarySectionTitle?: string;
        librarySectionUUID?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        nocache?: boolean;
        parentIndex?: number;
        parentTitle?: string;
        parentYear?: number;
        summary?: string;
        theme?: string;
        thumb?: string;
        title1?: string;
        title2?: string;
        viewGroup?: string;
        viewMode?: number;
        Directory?: Array<{
            leafCount?: number;
            thumb?: string;
            viewedLeafCount?: number;
            key?: string;
            title?: string;
        }>;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            parentRatingKey?: string;
            guid?: string;
            parentGuid?: string;
            parentStudio?: string;
            type?: string;
            title?: string;
            parentKey?: string;
            parentTitle?: string;
            summary?: string;
            index?: number;
            parentIndex?: number;
            viewCount?: number;
            lastViewedAt?: number;
            parentYear?: number;
            thumb?: string;
            art?: string;
            parentThumb?: string;
            parentTheme?: string;
            leafCount?: number;
            viewedLeafCount?: number;
            addedAt?: number;
            updatedAt?: number;
            userRating?: number;
            skipCount?: number;
            lastRatedAt?: number;
        }>;
    };
};

export type GetOnDeckResponse = {
    MediaContainer?: {
        size?: number;
        allowSync?: boolean;
        identifier?: string;
        mediaTagPrefix?: string;
        mediaTagVersion?: number;
        mixedParents?: boolean;
        Metadata?: Array<{
            allowSync?: boolean;
            librarySectionID?: number;
            librarySectionTitle?: string;
            librarySectionUUID?: string;
            ratingKey?: number;
            key?: string;
            parentRatingKey?: number;
            grandparentRatingKey?: number;
            guid?: string;
            parentGuid?: string;
            grandparentGuid?: string;
            type?: string;
            title?: string;
            grandparentKey?: string;
            parentKey?: string;
            librarySectionKey?: string;
            grandparentTitle?: string;
            parentTitle?: string;
            contentRating?: string;
            summary?: string;
            index?: number;
            parentIndex?: number;
            lastViewedAt?: number;
            year?: number;
            thumb?: string;
            art?: string;
            parentThumb?: string;
            grandparentThumb?: string;
            grandparentArt?: string;
            grandparentTheme?: string;
            duration?: number;
            originallyAvailableAt?: string;
            addedAt?: number;
            updatedAt?: number;
            Media?: Array<{
                id?: number;
                duration?: number;
                bitrate?: number;
                width?: number;
                height?: number;
                aspectRatio?: number;
                audioChannels?: number;
                audioCodec?: string;
                videoCodec?: string;
                videoResolution?: string;
                container?: string;
                videoFrameRate?: string;
                audioProfile?: string;
                videoProfile?: string;
                Part?: Array<{
                    id?: number;
                    key?: string;
                    duration?: number;
                    file?: string;
                    size?: number;
                    audioProfile?: string;
                    container?: string;
                    videoProfile?: string;
                    Stream?: Array<{
                        id?: number;
                        streamType?: number;
                        default?: boolean;
                        codec?: string;
                        index?: number;
                        bitrate?: number;
                        language?: string;
                        languageTag?: string;
                        languageCode?: string;
                        bitDepth?: number;
                        chromaLocation?: string;
                        chromaSubsampling?: string;
                        codedHeight?: number;
                        codedWidth?: number;
                        colorRange?: string;
                        frameRate?: number;
                        height?: number;
                        level?: number;
                        profile?: string;
                        refFrames?: number;
                        width?: number;
                        displayTitle?: string;
                        extendedDisplayTitle?: string;
                    }>;
                }>;
            }>;
            Guid?: Array<{
                id?: string;
            }>;
        }>;
    };
};

export type LogLineData = {
    /**
     * An integer log level to write to the PMS log with.
     * 0: Error
     * 1: Warning
     * 2: Info
     * 3: Debug
     * 4: Verbose
     *
     */
    level: 0 | 1 | 2 | 3 | 4;
    /**
     * The text of the message to write to the log.
     */
    message: string;
    /**
     * a string indicating the source of the message.
     */
    source: string;
};

export type LogLineResponse = unknown;

export type LogMultiLineData = {
    requestBody: string;
};

export type LogMultiLineResponse = unknown;

export type EnablePaperTrailResponse = unknown;

export type GetPinData = {
    /**
     * Determines the kind of code returned by the API call
     * Strong codes are used for Pin authentication flows
     * Non-Strong codes are used for `Plex.tv/link`
     *
     */
    strong?: boolean;
    /**
     * The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier: string;
};

export type GetPinResponse = {
    /**
     * PinID for use with authentication
     */
    id?: number;
    code?: string;
    product?: string;
    trusted?: boolean;
    /**
     * a link to a QR code hosted on plex.tv
     * The QR code redirects to the relevant `plex.tv/link` authentication page
     * Which then prompts the user for the 4 Digit Link Pin
     *
     */
    qr?: string;
    clientIdentifier?: string;
    location?: {
        code?: string;
        european_union_member?: boolean;
        continent_code?: string;
        country?: string;
        city?: string;
        time_zone?: string;
        postal_code?: number;
        in_privacy_restricted_country?: boolean;
        subdivisions?: string;
        coordinates?: string;
    };
    expiresIn?: number;
    createdAt?: string;
    expiresAt?: string;
    authToken?: string;
    newRegistration?: string;
};

export type GetTokenData = {
    /**
     * The PinID to retrieve an access token for
     */
    pinId: string;
    /**
     * The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     *
     */
    xPlexClientIdentifier: string;
};

export type GetTokenResponse = unknown;

export type CreatePlaylistData = {
    /**
     * the play queue to copy to a playlist
     */
    playQueueId?: number;
    /**
     * whether the playlist is smart or not
     */
    smart: 0 | 1;
    /**
     * name of the playlist
     */
    title: string;
    /**
     * type of playlist to create
     */
    type: 'audio' | 'video' | 'photo';
    /**
     * the content URI for the playlist
     */
    uri: string;
};

export type CreatePlaylistResponse = {
    MediaContainer?: {
        size?: number;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            guid?: string;
            type?: string;
            title?: string;
            summary?: string;
            smart?: boolean;
            playlistType?: string;
            icon?: string;
            viewCount?: number;
            lastViewedAt?: number;
            leafCount?: number;
            addedAt?: number;
            updatedAt?: number;
            composite?: string;
            duration?: number;
        }>;
    };
};

export type GetPlaylistsData = {
    /**
     * limit to a type of playlist.
     */
    playlistType?: 'audio' | 'video' | 'photo';
    /**
     * type of playlists to return (default is all).
     */
    smart?: 0 | 1;
};

export type GetPlaylistsResponse = {
    MediaContainer?: {
        size?: number;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            guid?: string;
            type?: string;
            title?: string;
            summary?: string;
            smart?: boolean;
            playlistType?: string;
            composite?: string;
            icon?: string;
            viewCount?: number;
            lastViewedAt?: number;
            duration?: number;
            leafCount?: number;
            addedAt?: number;
            updatedAt?: number;
        }>;
    };
};

export type GetPlaylistData = {
    /**
     * the ID of the playlist
     */
    playlistId: number;
};

export type GetPlaylistResponse = {
    MediaContainer?: {
        size?: number;
        Metadata?: Array<{
            content?: string;
            ratingKey?: string;
            key?: string;
            guid?: string;
            type?: string;
            title?: string;
            summary?: string;
            smart?: boolean;
            playlistType?: string;
            composite?: string;
            icon?: string;
            duration?: number;
            leafCount?: number;
            addedAt?: number;
            updatedAt?: number;
        }>;
    };
};

export type DeletePlaylistData = {
    /**
     * the ID of the playlist
     */
    playlistId: number;
};

export type DeletePlaylistResponse = unknown;

export type UpdatePlaylistData = {
    /**
     * the ID of the playlist
     */
    playlistId: number;
    /**
     * summary description of the playlist
     */
    summary?: string;
    /**
     * name of the playlist
     */
    title?: string;
};

export type UpdatePlaylistResponse = unknown;

export type GetPlaylistContentsData = {
    /**
     * the ID of the playlist
     */
    playlistId: number;
    /**
     * the metadata type of the item to return
     */
    type: number;
};

export type GetPlaylistContentsResponse = {
    MediaContainer?: {
        size?: number;
        composite?: string;
        duration?: number;
        leafCount?: number;
        playlistType?: string;
        ratingKey?: string;
        smart?: boolean;
        title?: string;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            guid?: string;
            studio?: string;
            type?: string;
            title?: string;
            titleSort?: string;
            librarySectionTitle?: string;
            librarySectionID?: number;
            librarySectionKey?: string;
            contentRating?: string;
            summary?: string;
            rating?: number;
            audienceRating?: number;
            year?: number;
            tagline?: string;
            thumb?: string;
            art?: string;
            duration?: number;
            originallyAvailableAt?: string;
            addedAt?: number;
            updatedAt?: number;
            audienceRatingImage?: string;
            hasPremiumExtras?: string;
            hasPremiumPrimaryExtra?: string;
            ratingImage?: string;
            Media?: Array<{
                id?: number;
                duration?: number;
                bitrate?: number;
                width?: number;
                height?: number;
                aspectRatio?: number;
                audioChannels?: number;
                audioCodec?: string;
                videoCodec?: string;
                videoResolution?: string;
                container?: string;
                videoFrameRate?: string;
                optimizedForStreaming?: number;
                audioProfile?: string;
                has64bitOffsets?: boolean;
                videoProfile?: string;
                Part?: Array<{
                    id?: number;
                    key?: string;
                    duration?: number;
                    file?: string;
                    size?: number;
                    audioProfile?: string;
                    container?: string;
                    has64bitOffsets?: boolean;
                    optimizedForStreaming?: boolean;
                    videoProfile?: string;
                }>;
            }>;
            Genre?: Array<{
                tag?: string;
            }>;
            Country?: Array<{
                tag?: string;
            }>;
            Director?: Array<{
                tag?: string;
            }>;
            Writer?: Array<{
                tag?: string;
            }>;
            Role?: Array<{
                tag?: string;
            }>;
        }>;
    };
};

export type ClearPlaylistContentsData = {
    /**
     * the ID of the playlist
     */
    playlistId: number;
};

export type ClearPlaylistContentsResponse = unknown;

export type AddPlaylistContentsData = {
    /**
     * the ID of the playlist
     */
    playlistId: number;
    /**
     * the play queue to add to a playlist
     */
    playQueueId?: number;
    /**
     * the content URI for the playlist
     */
    uri: string;
};

export type AddPlaylistContentsResponse = {
    MediaContainer?: {
        size?: number;
        leafCountAdded?: number;
        leafCountRequested?: number;
        Metadata?: Array<{
            ratingKey?: string;
            key?: string;
            guid?: string;
            type?: string;
            title?: string;
            summary?: string;
            smart?: boolean;
            playlistType?: string;
            composite?: string;
            duration?: number;
            leafCount?: number;
            addedAt?: number;
            updatedAt?: number;
        }>;
    };
};

export type UploadPlaylistData = {
    /**
     * Force overwriting of duplicate playlists.
     * By default, a playlist file uploaded with the same path will overwrite the existing playlist.
     * The `force` argument is used to disable overwriting.
     * If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
     *
     */
    force: 0 | 1;
    /**
     * absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.
     * If the `path` argument is a directory, that path will be scanned for playlist files to be processed.
     * Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.
     * The GUID of each playlist is based on the filename.
     * If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.
     * The GUID of each playlist is based on the filename.
     *
     */
    path: string;
};

export type UploadPlaylistResponse = unknown;

export type GetTransientTokenData = {
    /**
     * `all` - This is the only supported `scope` parameter.
     */
    scope: 'all';
    /**
     * `delegation` - This is the only supported `type` parameter.
     */
    type: 'delegation';
};

export type GetTransientTokenResponse = unknown;

export type GetSourceConnectionInformationData = {
    /**
     * The source identifier with an included prefix.
     */
    source: string;
};

export type GetSourceConnectionInformationResponse = unknown;

export type GetStatisticsData = {
    /**
     * The timespan to retrieve statistics for
     * the exact meaning of this parameter is not known
     *
     */
    timespan?: number;
};

export type GetStatisticsResponse = {
    MediaContainer?: {
        size?: number;
        Device?: Array<{
            id?: number;
            name?: string;
            platform?: string;
            clientIdentifier?: string;
            createdAt?: number;
        }>;
        Account?: Array<{
            id?: number;
            key?: string;
            name?: string;
            defaultAudioLanguage?: string;
            autoSelectAudio?: boolean;
            defaultSubtitleLanguage?: string;
            subtitleMode?: number;
            thumb?: string;
        }>;
        StatisticsMedia?: Array<{
            accountID?: number;
            deviceID?: number;
            timespan?: number;
            at?: number;
            metadataType?: number;
            count?: number;
            duration?: number;
        }>;
    };
};

export type GetSessionsResponse = {
    MediaContainer?: {
        size?: number;
        Metadata?: Array<{
            addedAt?: number;
            art?: string;
            duration?: number;
            grandparentArt?: string;
            grandparentGuid?: string;
            grandparentKey?: string;
            grandparentRatingKey?: string;
            grandparentThumb?: string;
            grandparentTitle?: string;
            guid?: string;
            index?: number;
            key?: string;
            librarySectionID?: string;
            librarySectionKey?: string;
            librarySectionTitle?: string;
            musicAnalysisVersion?: string;
            parentGuid?: string;
            parentIndex?: number;
            parentKey?: string;
            parentRatingKey?: string;
            parentStudio?: string;
            parentThumb?: string;
            parentTitle?: string;
            parentYear?: number;
            ratingCount?: number;
            ratingKey?: string;
            sessionKey?: string;
            thumb?: string;
            title?: string;
            titleSort?: string;
            type?: string;
            updatedAt?: number;
            viewOffset?: number;
            Media?: Array<{
                audioChannels?: number;
                audioCodec?: string;
                bitrate?: number;
                container?: string;
                duration?: number;
                id?: string;
                selected?: boolean;
                Part?: Array<{
                    container?: string;
                    duration?: number;
                    file?: string;
                    hasThumbnail?: string;
                    id?: string;
                    key?: string;
                    size?: number;
                    decision?: string;
                    selected?: boolean;
                    Stream?: Array<{
                        albumGain?: string;
                        albumPeak?: string;
                        albumRange?: string;
                        audioChannelLayout?: string;
                        bitDepth?: number;
                        bitrate?: number;
                        channels?: number;
                        codec?: string;
                        displayTitle?: string;
                        extendedDisplayTitle?: string;
                        gain?: string;
                        id?: string;
                        index?: number;
                        loudness?: string;
                        lra?: string;
                        peak?: string;
                        samplingRate?: number;
                        selected?: boolean;
                        streamType?: number;
                        location?: string;
                    }>;
                }>;
            }>;
            User?: {
                id?: string;
                thumb?: string;
                title?: string;
            };
            Player?: {
                address?: string;
                machineIdentifier?: string;
                model?: string;
                platform?: string;
                platformVersion?: string;
                product?: string;
                profile?: string;
                remotePublicAddress?: string;
                state?: string;
                title?: string;
                version?: string;
                local?: boolean;
                relayed?: boolean;
                secure?: boolean;
                userID?: number;
            };
            Session?: {
                id?: string;
                bandwidth?: number;
                location?: string;
            };
        }>;
    };
};

export type GetSessionHistoryResponse = {
    MediaContainer?: {
        size?: number;
        Metadata?: Array<{
            historyKey?: string;
            key?: string;
            ratingKey?: string;
            librarySectionID?: string;
            parentKey?: string;
            grandparentKey?: string;
            title?: string;
            grandparentTitle?: string;
            type?: string;
            thumb?: string;
            parentThumb?: string;
            grandparentThumb?: string;
            grandparentArt?: string;
            index?: number;
            parentIndex?: number;
            originallyAvailableAt?: string;
            viewedAt?: number;
            accountID?: number;
            deviceID?: number;
        }>;
    };
};

export type GetTranscodeSessionsResponse = {
    MediaContainer?: {
        size?: number;
        TranscodeSession?: Array<{
            key?: string;
            throttled?: boolean;
            complete?: boolean;
            progress?: number;
            size?: number;
            speed?: number;
            error?: boolean;
            duration?: number;
            remaining?: number;
            context?: string;
            sourceVideoCodec?: string;
            sourceAudioCodec?: string;
            videoDecision?: string;
            audioDecision?: string;
            subtitleDecision?: string;
            protocol?: string;
            container?: string;
            videoCodec?: string;
            audioCodec?: string;
            audioChannels?: number;
            transcodeHwRequested?: boolean;
            timeStamp?: number;
            maxOffsetAvailable?: number;
            minOffsetAvailable?: number;
        }>;
    };
};

export type StopTranscodeSessionData = {
    /**
     * the Key of the transcode session to stop
     */
    sessionKey: string;
};

export type StopTranscodeSessionResponse = void;

export type GetUpdateStatusResponse = {
    MediaContainer?: {
        size?: number;
        canInstall?: boolean;
        checkedAt?: number;
        downloadURL?: string;
        status?: number;
        Release?: Array<{
            key?: string;
            version?: string;
            added?: string;
            fixed?: string;
            downloadURL?: string;
            state?: string;
        }>;
    };
};

export type CheckForUpdatesData = {
    /**
     * Indicate that you want to start download any updates found.
     */
    download?: 0 | 1;
};

export type CheckForUpdatesResponse = unknown;

export type ApplyUpdatesData = {
    /**
     * Indicate that the latest version should be marked as skipped. The <Release> entry for this version will have the `state` set to `skipped`.
     */
    skip?: 0 | 1;
    /**
     * Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     */
    tonight?: 0 | 1;
};

export type ApplyUpdatesResponse = unknown;

export type $OpenApiTs = {
    '/': {
        get: {
            res: {
                /**
                 * The Server Capabilities
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowCameraUpload?: boolean;
                        allowChannelAccess?: boolean;
                        allowMediaDeletion?: boolean;
                        allowSharing?: boolean;
                        allowSync?: boolean;
                        allowTuners?: boolean;
                        backgroundProcessing?: boolean;
                        certificate?: boolean;
                        companionProxy?: boolean;
                        countryCode?: string;
                        diagnostics?: string;
                        eventStream?: boolean;
                        friendlyName?: string;
                        hubSearch?: boolean;
                        itemClusters?: boolean;
                        livetv?: number;
                        machineIdentifier?: string;
                        mediaProviders?: boolean;
                        multiuser?: boolean;
                        musicAnalysis?: number;
                        myPlex?: boolean;
                        myPlexMappingState?: string;
                        myPlexSigninState?: string;
                        myPlexSubscription?: boolean;
                        myPlexUsername?: string;
                        offlineTranscode?: number;
                        ownerFeatures?: string;
                        photoAutoTag?: boolean;
                        platform?: string;
                        platformVersion?: string;
                        pluginHost?: boolean;
                        pushNotifications?: boolean;
                        readOnlyLibraries?: boolean;
                        streamingBrainABRVersion?: number;
                        streamingBrainVersion?: number;
                        sync?: boolean;
                        transcoderActiveVideoSessions?: number;
                        transcoderAudio?: boolean;
                        transcoderLyrics?: boolean;
                        transcoderPhoto?: boolean;
                        transcoderSubtitles?: boolean;
                        transcoderVideo?: boolean;
                        transcoderVideoBitrates?: string;
                        transcoderVideoQualities?: string;
                        transcoderVideoResolutions?: string;
                        updatedAt?: number;
                        updater?: boolean;
                        version?: string;
                        voiceSearch?: boolean;
                        Directory?: Array<{
                            count?: number;
                            key?: string;
                            title?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/:/prefs': {
        get: {
            res: {
                /**
                 * Server Preferences
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Setting?: Array<{
                            id?: string;
                            label?: string;
                            summary?: string;
                            type?: string;
                            default?: boolean;
                            value?: boolean;
                            hidden?: boolean;
                            advanced?: boolean;
                            group?: string;
                            enumValues?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/clients': {
        get: {
            res: {
                /**
                 * Available Clients
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Server?: Array<{
                            name?: string;
                            host?: string;
                            address?: string;
                            port?: number;
                            machineIdentifier?: string;
                            version?: string;
                            protocol?: string;
                            product?: string;
                            deviceClass?: string;
                            protocolVersion?: number;
                            protocolCapabilities?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/devices': {
        get: {
            res: {
                /**
                 * Devices
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        identifier?: string;
                        Device?: Array<{
                            id?: number;
                            name?: string;
                            platform?: string;
                            clientIdentifier?: string;
                            createdAt?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/identity': {
        get: {
            res: {
                /**
                 * The Server Identity information
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        claimed?: boolean;
                        machineIdentifier?: string;
                        version?: string;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/myplex/account': {
        get: {
            res: {
                /**
                 * MyPlex Account
                 */
                200: {
                    MyPlex?: {
                        authToken?: string;
                        username?: string;
                        mappingState?: string;
                        mappingError?: string;
                        signInState?: string;
                        publicAddress?: string;
                        publicPort?: number;
                        privateAddress?: string;
                        privatePort?: number;
                        subscriptionFeatures?: string;
                        subscriptionActive?: boolean;
                        subscriptionState?: string;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/photo/:/transcode': {
        get: {
            req: {
                /**
                 * The width for the resized photo
                 */
                blur: number;
                /**
                 * The height for the resized photo
                 */
                height: number;
                /**
                 * images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against.
                 */
                minSize: 0 | 1;
                /**
                 * The opacity for the resized photo
                 */
                opacity: number;
                /**
                 * allow images to be resized beyond native dimensions.
                 */
                upscale: 0 | 1;
                /**
                 * path to image within Plex
                 */
                url: string;
                /**
                 * The width for the resized photo
                 */
                width: number;
            };
            res: {
                /**
                 * Resized Image
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/servers': {
        get: {
            res: {
                /**
                 * List of Servers
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Server?: Array<{
                            name?: string;
                            host?: string;
                            address?: string;
                            port?: number;
                            machineIdentifier?: string;
                            version?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/:/scrobble': {
        get: {
            req: {
                /**
                 * The media key to mark as played
                 */
                key: number;
            };
            res: {
                /**
                 * Media is marked Played
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/:/unscrobble': {
        get: {
            req: {
                /**
                 * The media key to mark as Unplayed
                 */
                key: number;
            };
            res: {
                /**
                 * Media is marked Unplayed
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/:/progress': {
        post: {
            req: {
                /**
                 * the media key
                 */
                key: string;
                /**
                 * The playback state of the media item.
                 */
                state: string;
                /**
                 * The time, in milliseconds, used to set the media playback progress.
                 */
                time: number;
            };
            res: {
                /**
                 * Success - The request was successful.
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/:/timeline': {
        get: {
            req: {
                /**
                 * The context of the media item
                 */
                context: string;
                /**
                 * The duration of the media item
                 */
                duration: number;
                /**
                 * Whether the media item has MDE
                 */
                hasMde: number;
                /**
                 * The key of the media item to get the timeline for
                 */
                key: string;
                /**
                 * The playback time of the media item
                 */
                playBackTime: number;
                /**
                 * The play queue item ID of the media item
                 */
                playQueueItemId: number;
                /**
                 * The rating key of the media item
                 */
                ratingKey: number;
                /**
                 * The row of the media item
                 */
                row: number;
                /**
                 * The state of the media item
                 */
                state: 'playing' | 'paused' | 'stopped';
                /**
                 * The time of the media item
                 */
                time: number;
            };
            res: {
                /**
                 * The timeline for the media item
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/video/:/transcode/universal/start.mpd': {
        get: {
            req: {
                /**
                 * Whether to add a debug overlay or not
                 */
                addDebugOverlay?: number;
                /**
                 * The audio boost
                 */
                audioBoost?: number;
                /**
                 * Whether to auto adjust quality or not
                 */
                autoAdjustQuality?: number;
                /**
                 * Whether to use direct play or not
                 */
                directPlay?: number;
                /**
                 * Whether to use direct stream or not
                 */
                directStream?: number;
                /**
                 * Whether to use fast seek or not
                 */
                fastSeek?: number;
                /**
                 * Whether the media item has MDE
                 */
                hasMde: number;
                /**
                 * The location of the transcode session
                 */
                location?: string;
                /**
                 * The size of the media buffer
                 */
                mediaBufferSize?: number;
                /**
                 * The index of the media item to transcode
                 */
                mediaIndex: number;
                /**
                 * The index of the part to transcode
                 */
                partIndex: number;
                /**
                 * The path to the media item to transcode
                 */
                path: string;
                /**
                 * The protocol to use for the transcode session
                 */
                protocol: string;
                /**
                 * The session ID
                 */
                session?: string;
                /**
                 * The subtitles
                 */
                subtites?: string;
                /**
                 * The size of the subtitles
                 */
                subtitleSize?: number;
            };
            res: {
                /**
                 * The transcode session has started
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/activities': {
        get: {
            res: {
                /**
                 * The Server Activities
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Activity?: Array<{
                            uuid?: string;
                            type?: string;
                            cancellable?: boolean;
                            userID?: number;
                            title?: string;
                            subtitle?: string;
                            progress?: number;
                            Context?: {
                                librarySectionID?: string;
                            };
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/activities/{activityUUID}': {
        delete: {
            req: {
                /**
                 * The UUID of the activity to cancel.
                 */
                activityUuid: string;
            };
            res: {
                /**
                 * The Server Activity was canceled
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/butler': {
        get: {
            res: {
                /**
                 * All butler tasks
                 */
                200: {
                    ButlerTasks?: {
                        ButlerTask?: Array<{
                            name?: string;
                            interval?: number;
                            scheduleRandomized?: boolean;
                            enabled?: boolean;
                            title?: string;
                            description?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        post: {
            res: {
                /**
                 * All tasks were started
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        delete: {
            res: {
                /**
                 * All tasks were stopped
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/butler/{taskName}': {
        post: {
            req: {
                /**
                 * the name of the task to be started.
                 */
                taskName: 'BackupDatabase' | 'BuildGracenoteCollections' | 'CheckForUpdates' | 'CleanOldBundles' | 'CleanOldCacheFiles' | 'DeepMediaAnalysis' | 'GenerateAutoTags' | 'GenerateChapterThumbs' | 'GenerateMediaIndexFiles' | 'OptimizeDatabase' | 'RefreshLibraries' | 'RefreshLocalMedia' | 'RefreshPeriodicMetadata' | 'UpgradeMediaAnalysis';
            };
            res: {
                /**
                 * The task was started successfully
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        delete: {
            req: {
                /**
                 * The name of the task to be started.
                 */
                taskName: 'BackupDatabase' | 'BuildGracenoteCollections' | 'CheckForUpdates' | 'CleanOldBundles' | 'CleanOldCacheFiles' | 'DeepMediaAnalysis' | 'GenerateAutoTags' | 'GenerateChapterThumbs' | 'GenerateMediaIndexFiles' | 'OptimizeDatabase' | 'RefreshLibraries' | 'RefreshLocalMedia' | 'RefreshPeriodicMetadata' | 'UpgradeMediaAnalysis';
            };
            res: {
                /**
                 * The task was stopped
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
                /**
                 * The task was not running
                 */
                404: unknown;
            };
        };
    };
    '/hubs': {
        get: {
            req: {
                /**
                 * The number of items to return with each hub.
                 */
                count?: number;
                /**
                 * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
                 */
                onlyTransient?: 0 | 1;
            };
            res: {
                /**
                 * returns global hubs
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        identifier?: string;
                        Hub?: Array<{
                            hubKey?: string;
                            key?: string;
                            title?: string;
                            type?: string;
                            hubIdentifier?: string;
                            context?: string;
                            size?: number;
                            more?: boolean;
                            style?: string;
                            promoted?: boolean;
                            Metadata?: Array<{
                                ratingKey?: string;
                                key?: string;
                                guid?: string;
                                type?: string;
                                title?: string;
                                titleSort?: string;
                                summary?: string;
                                smart?: boolean;
                                playlistType?: string;
                                composite?: string;
                                icon?: string;
                                viewCount?: number;
                                lastViewedAt?: number;
                                duration?: number;
                                leafCount?: number;
                                addedAt?: number;
                                updatedAt?: number;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/hubs/sections/{sectionId}': {
        get: {
            req: {
                /**
                 * The number of items to return with each hub.
                 */
                count?: number;
                /**
                 * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
                 */
                onlyTransient?: 0 | 1;
                /**
                 * the Id of the library to query
                 */
                sectionId: number;
            };
            res: {
                /**
                 * The hubs specific to the library
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        identifier?: string;
                        librarySectionID?: number;
                        librarySectionTitle?: string;
                        librarySectionUUID?: string;
                        Hub?: Array<{
                            key?: string;
                            title?: string;
                            type?: string;
                            hubIdentifier?: string;
                            context?: string;
                            size?: number;
                            more?: boolean;
                            style?: string;
                            hubKey?: string;
                            Metadata?: Array<{
                                ratingKey?: string;
                                key?: string;
                                guid?: string;
                                studio?: string;
                                type?: string;
                                title?: string;
                                librarySectionTitle?: string;
                                librarySectionID?: number;
                                librarySectionKey?: string;
                                contentRating?: string;
                                summary?: string;
                                rating?: number;
                                audienceRating?: number;
                                viewCount?: number;
                                lastViewedAt?: number;
                                year?: number;
                                tagline?: string;
                                thumb?: string;
                                art?: string;
                                duration?: number;
                                originallyAvailableAt?: string;
                                addedAt?: number;
                                updatedAt?: number;
                                audienceRatingImage?: string;
                                primaryExtraKey?: string;
                                ratingImage?: string;
                                Media?: Array<{
                                    id?: number;
                                    duration?: number;
                                    bitrate?: number;
                                    width?: number;
                                    height?: number;
                                    aspectRatio?: number;
                                    audioChannels?: number;
                                    audioCodec?: string;
                                    videoCodec?: string;
                                    videoResolution?: string;
                                    container?: string;
                                    videoFrameRate?: string;
                                    optimizedForStreaming?: number;
                                    audioProfile?: string;
                                    has64bitOffsets?: boolean;
                                    videoProfile?: string;
                                    Part?: Array<{
                                        id?: number;
                                        key?: string;
                                        duration?: number;
                                        file?: string;
                                        size?: number;
                                        audioProfile?: string;
                                        container?: string;
                                        has64bitOffsets?: boolean;
                                        optimizedForStreaming?: boolean;
                                        videoProfile?: string;
                                    }>;
                                }>;
                                Genre?: Array<{
                                    tag?: string;
                                }>;
                                Country?: Array<{
                                    tag?: string;
                                }>;
                                Director?: Array<{
                                    tag?: string;
                                }>;
                                Role?: Array<{
                                    tag?: string;
                                }>;
                                Writer?: Array<{
                                    tag?: string;
                                }>;
                                skipCount?: number;
                                chapterSource?: string;
                            }>;
                            promoted?: boolean;
                            random?: boolean;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/hubs/search': {
        get: {
            req: {
                /**
                 * The number of items to return per hub
                 */
                limit?: number;
                /**
                 * The query term
                 */
                query: string;
                /**
                 * This gives context to the search, and can result in re-ordering of search result hubs
                 */
                sectionId?: number;
            };
            res: {
                /**
                 * The search results
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/hubs/search/voice': {
        get: {
            req: {
                /**
                 * The number of items to return per hub
                 */
                limit?: number;
                /**
                 * The query term
                 */
                query: string;
                /**
                 * This gives context to the search, and can result in re-ordering of search result hubs
                 */
                sectionId?: number;
            };
            res: {
                /**
                 * The search results
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/search': {
        get: {
            req: {
                /**
                 * The search query string to use
                 */
                query: string;
            };
            res: {
                /**
                 * Search Results
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        identifier?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        Metadata?: Array<{
                            allowSync?: boolean;
                            librarySectionID?: number;
                            librarySectionTitle?: string;
                            librarySectionUUID?: string;
                            personal?: boolean;
                            sourceTitle?: string;
                            ratingKey?: number;
                            key?: string;
                            guid?: string;
                            studio?: string;
                            type?: string;
                            title?: string;
                            contentRating?: string;
                            summary?: string;
                            rating?: number;
                            audienceRating?: number;
                            year?: number;
                            tagline?: string;
                            thumb?: string;
                            art?: string;
                            duration?: number;
                            originallyAvailableAt?: string;
                            addedAt?: number;
                            updatedAt?: number;
                            audienceRatingImage?: string;
                            chapterSource?: string;
                            primaryExtraKey?: string;
                            ratingImage?: string;
                            Media?: Array<{
                                id?: number;
                                duration?: number;
                                bitrate?: number;
                                width?: number;
                                height?: number;
                                aspectRatio?: number;
                                audioChannels?: number;
                                audioCodec?: string;
                                videoCodec?: string;
                                videoResolution?: number;
                                container?: string;
                                videoFrameRate?: string;
                                audioProfile?: string;
                                videoProfile?: string;
                                Part?: Array<{
                                    id?: number;
                                    key?: string;
                                    duration?: number;
                                    file?: string;
                                    size?: number;
                                    audioProfile?: string;
                                    container?: string;
                                    videoProfile?: string;
                                }>;
                            }>;
                            Genre?: Array<{
                                tag?: string;
                            }>;
                            Director?: Array<{
                                tag?: string;
                            }>;
                            Writer?: Array<{
                                tag?: string;
                            }>;
                            Country?: Array<{
                                tag?: string;
                            }>;
                            Role?: Array<{
                                tag?: string;
                            }>;
                        }>;
                        Provider?: Array<{
                            key?: string;
                            title?: string;
                            type?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/hashes': {
        get: {
            req: {
                /**
                 * Item type
                 */
                type?: number;
                /**
                 * This is the path to the local file, must be prefixed by `file://`
                 */
                url: string;
            };
            res: {
                /**
                 * The hash of the file
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/recentlyAdded': {
        get: {
            res: {
                /**
                 * The recently added content
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        identifier?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        mixedParents?: boolean;
                        Metadata?: Array<{
                            allowSync?: boolean;
                            librarySectionID?: number;
                            librarySectionTitle?: string;
                            librarySectionUUID?: string;
                            ratingKey?: number;
                            key?: string;
                            guid?: string;
                            studio?: string;
                            type?: string;
                            title?: string;
                            contentRating?: string;
                            summary?: string;
                            rating?: number;
                            audienceRating?: number;
                            year?: number;
                            tagline?: string;
                            thumb?: string;
                            art?: string;
                            duration?: number;
                            originallyAvailableAt?: string;
                            addedAt?: number;
                            updatedAt?: number;
                            audienceRatingImage?: string;
                            chapterSource?: string;
                            primaryExtraKey?: string;
                            ratingImage?: string;
                            Media?: Array<{
                                id?: number;
                                duration?: number;
                                bitrate?: number;
                                width?: number;
                                height?: number;
                                aspectRatio?: number;
                                audioChannels?: number;
                                audioCodec?: string;
                                videoCodec?: string;
                                videoResolution?: number;
                                container?: string;
                                videoFrameRate?: string;
                                optimizedForStreaming?: number;
                                has64bitOffsets?: boolean;
                                videoProfile?: string;
                                Part?: Array<{
                                    id?: number;
                                    key?: string;
                                    duration?: number;
                                    file?: string;
                                    size?: number;
                                    container?: string;
                                    has64bitOffsets?: boolean;
                                    hasThumbnail?: number;
                                    optimizedForStreaming?: boolean;
                                    videoProfile?: string;
                                }>;
                            }>;
                            Genre?: Array<{
                                tag?: string;
                            }>;
                            Director?: Array<{
                                tag?: string;
                            }>;
                            Writer?: Array<{
                                tag?: string;
                            }>;
                            Country?: Array<{
                                tag?: string;
                            }>;
                            Role?: Array<{
                                tag?: string;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/sections': {
        get: {
            res: {
                /**
                 * The libraries available on the Server
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        title1?: string;
                        Directory?: Array<{
                            allowSync?: boolean;
                            art?: string;
                            composite?: string;
                            filters?: boolean;
                            refreshing?: boolean;
                            thumb?: string;
                            key?: string;
                            type?: string;
                            title?: string;
                            agent?: string;
                            scanner?: string;
                            language?: string;
                            uuid?: string;
                            updatedAt?: number;
                            createdAt?: number;
                            scannedAt?: number;
                            content?: boolean;
                            directory?: boolean;
                            contentChangedAt?: number;
                            hidden?: number;
                            Location?: Array<{
                                id?: number;
                                path?: string;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/sections/{sectionId}': {
        get: {
            req: {
                /**
                 * Whether or not to include details for a section (types, filters, and sorts).
                 * Only exists for backwards compatibility, media providers other than the server libraries have it on always.
                 *
                 */
                includeDetails?: 0 | 1;
                /**
                 * the Id of the library to query
                 */
                sectionId: number;
            };
            res: {
                /**
                 * The details of the library
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        art?: string;
                        content?: string;
                        identifier?: string;
                        librarySectionID?: number;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        thumb?: string;
                        title1?: string;
                        viewGroup?: string;
                        viewMode?: number;
                        Directory?: Array<{
                            key?: string;
                            title?: string;
                            secondary?: boolean;
                            prompt?: string;
                            search?: boolean;
                        }>;
                        Type?: Array<{
                            key?: string;
                            type?: string;
                            title?: string;
                            active?: boolean;
                            Filter?: Array<{
                                filter?: string;
                                filterType?: string;
                                key?: string;
                                title?: string;
                                type?: string;
                            }>;
                            Sort?: Array<{
                                default?: string;
                                defaultDirection?: string;
                                descKey?: string;
                                firstCharacterKey?: string;
                                key?: string;
                                title?: string;
                            }>;
                            Field?: Array<{
                                key?: string;
                                title?: string;
                                type?: string;
                                subType?: string;
                            }>;
                        }>;
                        FieldType?: Array<{
                            type?: string;
                            Operator?: Array<{
                                key?: string;
                                title?: string;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        delete: {
            req: {
                /**
                 * the Id of the library to query
                 */
                sectionId: number;
            };
            res: {
                /**
                 * The library is deleted
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/sections/{sectionId}/{tag}': {
        get: {
            req: {
                /**
                 * the Id of the library to query
                 */
                sectionId: number;
                /**
                 * A key representing a specific tag within the section.
                 */
                tag: 'all' | 'unwatched' | 'newest' | 'recentlyAdded' | 'recentlyViewed' | 'onDeck' | 'collection' | 'edition' | 'genre' | 'year' | 'decade' | 'director' | 'actor' | 'country' | 'contentRating' | 'rating' | 'resolution' | 'firstCharacter' | 'folder';
            };
            res: {
                /**
                 * The contents of the library by section and tag
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        art?: string;
                        identifier?: string;
                        librarySectionID?: number;
                        librarySectionTitle?: string;
                        librarySectionUUID?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        thumb?: string;
                        title1?: string;
                        title2?: string;
                        viewGroup?: string;
                        viewMode?: number;
                        mixedParents?: boolean;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            studio?: string;
                            type?: string;
                            title?: string;
                            contentRating?: string;
                            summary?: string;
                            rating?: number;
                            audienceRating?: number;
                            year?: number;
                            tagline?: string;
                            thumb?: string;
                            art?: string;
                            duration?: number;
                            originallyAvailableAt?: string;
                            addedAt?: number;
                            updatedAt?: number;
                            audienceRatingImage?: string;
                            chapterSource?: string;
                            primaryExtraKey?: string;
                            ratingImage?: string;
                            grandparentRatingKey?: string;
                            grandparentGuid?: string;
                            grandparentKey?: string;
                            grandparentTitle?: string;
                            grandparentThumb?: string;
                            grandparentArt?: string;
                            grandparentTheme?: string;
                            Media?: Array<{
                                id?: number;
                                duration?: number;
                                bitrate?: number;
                                width?: number;
                                height?: number;
                                aspectRatio?: number;
                                audioChannels?: number;
                                audioCodec?: string;
                                videoCodec?: string;
                                videoResolution?: string;
                                container?: string;
                                videoFrameRate?: string;
                                videoProfile?: string;
                                Part?: Array<{
                                    id?: number;
                                    key?: string;
                                    duration?: number;
                                    file?: string;
                                    size?: number;
                                    container?: string;
                                    videoProfile?: string;
                                }>;
                            }>;
                            Genre?: Array<{
                                tag?: string;
                            }>;
                            Country?: Array<{
                                tag?: string;
                            }>;
                            Director?: Array<{
                                tag?: string;
                            }>;
                            Writer?: Array<{
                                tag?: string;
                            }>;
                            Role?: Array<{
                                tag?: string;
                            }>;
                            titleSort?: string;
                            viewCount?: number;
                            lastViewedAt?: number;
                            originalTitle?: string;
                            viewOffset?: number;
                            skipCount?: number;
                            index?: number;
                            theme?: string;
                            leafCount?: number;
                            viewedLeafCount?: number;
                            childCount?: number;
                            hasPremiumExtras?: string;
                            hasPremiumPrimaryExtra?: string;
                            parentRatingKey?: string;
                            parentGuid?: string;
                            parentStudio?: string;
                            parentKey?: string;
                            parentTitle?: string;
                            parentIndex?: number;
                            parentYear?: number;
                            parentThumb?: string;
                            parentTheme?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/sections/{sectionId}/refresh': {
        get: {
            req: {
                /**
                 * the Id of the library to refresh
                 */
                sectionId: number;
            };
            res: {
                /**
                 * The library is refreshing
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/sections/{sectionId}/search': {
        get: {
            req: {
                /**
                 * the Id of the library to query
                 */
                sectionId: number;
                /**
                 * Plex content type to search for
                 */
                type: 1 | 2 | 3 | 4;
            };
            res: {
                /**
                 * The contents of the library by section and type
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        art?: string;
                        identifier?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        nocache?: boolean;
                        thumb?: string;
                        title1?: string;
                        title2?: string;
                        viewGroup?: string;
                        viewMode?: number;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            parentRatingKey?: string;
                            guid?: string;
                            parentGuid?: string;
                            parentStudio?: string;
                            type?: string;
                            title?: string;
                            parentKey?: string;
                            parentTitle?: string;
                            summary?: string;
                            index?: number;
                            parentIndex?: number;
                            parentYear?: number;
                            thumb?: string;
                            art?: string;
                            parentThumb?: string;
                            parentTheme?: string;
                            addedAt?: number;
                            updatedAt?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/metadata/{ratingKey}': {
        get: {
            req: {
                /**
                 * the id of the library item to return the children of.
                 */
                ratingKey: number;
            };
            res: {
                /**
                 * The metadata of the library item.
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        identifier?: string;
                        librarySectionID?: number;
                        librarySectionTitle?: string;
                        librarySectionUUID?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            studio?: string;
                            type?: string;
                            title?: string;
                            librarySectionTitle?: string;
                            librarySectionID?: number;
                            librarySectionKey?: string;
                            contentRating?: string;
                            summary?: string;
                            rating?: number;
                            audienceRating?: number;
                            year?: number;
                            tagline?: string;
                            thumb?: string;
                            art?: string;
                            duration?: number;
                            originallyAvailableAt?: string;
                            addedAt?: number;
                            updatedAt?: number;
                            audienceRatingImage?: string;
                            hasPremiumPrimaryExtra?: string;
                            ratingImage?: string;
                            Media?: Array<{
                                id?: number;
                                duration?: number;
                                bitrate?: number;
                                width?: number;
                                height?: number;
                                aspectRatio?: number;
                                audioChannels?: number;
                                audioCodec?: string;
                                videoCodec?: string;
                                videoResolution?: string;
                                container?: string;
                                videoFrameRate?: string;
                                optimizedForStreaming?: number;
                                audioProfile?: string;
                                has64bitOffsets?: boolean;
                                videoProfile?: string;
                                Part?: Array<{
                                    id?: number;
                                    key?: string;
                                    duration?: number;
                                    file?: string;
                                    size?: number;
                                    audioProfile?: string;
                                    container?: string;
                                    has64bitOffsets?: boolean;
                                    optimizedForStreaming?: boolean;
                                    videoProfile?: string;
                                    Stream?: Array<{
                                        id?: number;
                                        streamType?: number;
                                        default?: boolean;
                                        codec?: string;
                                        index?: number;
                                        bitrate?: number;
                                        bitDepth?: number;
                                        chromaLocation?: string;
                                        chromaSubsampling?: string;
                                        codedHeight?: number;
                                        codedWidth?: number;
                                        colorPrimaries?: string;
                                        colorRange?: string;
                                        colorSpace?: string;
                                        colorTrc?: string;
                                        frameRate?: number;
                                        hasScalingMatrix?: boolean;
                                        height?: number;
                                        level?: number;
                                        profile?: string;
                                        refFrames?: number;
                                        scanType?: string;
                                        streamIdentifier?: string;
                                        width?: number;
                                        displayTitle?: string;
                                        extendedDisplayTitle?: string;
                                        selected?: boolean;
                                        channels?: number;
                                        language?: string;
                                        languageTag?: string;
                                        languageCode?: string;
                                        samplingRate?: number;
                                    }>;
                                }>;
                            }>;
                            Genre?: Array<{
                                id?: number;
                                filter?: string;
                                tag?: string;
                            }>;
                            Country?: Array<{
                                id?: number;
                                filter?: string;
                                tag?: string;
                            }>;
                            Guid?: Array<{
                                id?: string;
                            }>;
                            Rating?: Array<{
                                image?: string;
                                value?: number;
                                type?: string;
                            }>;
                            Director?: Array<{
                                id?: number;
                                filter?: string;
                                tag?: string;
                                tagKey?: string;
                                thumb?: string;
                            }>;
                            Writer?: Array<{
                                id?: number;
                                filter?: string;
                                tag?: string;
                                tagKey?: string;
                                thumb?: string;
                            }>;
                            Role?: Array<{
                                id?: number;
                                filter?: string;
                                tag?: string;
                                tagKey?: string;
                                role?: string;
                                thumb?: string;
                            }>;
                            Producer?: Array<{
                                id?: number;
                                filter?: string;
                                tag?: string;
                                tagKey?: string;
                                thumb?: string;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/metadata/{ratingKey}/children': {
        get: {
            req: {
                /**
                 * the id of the library item to return the children of.
                 */
                ratingKey: number;
            };
            res: {
                /**
                 * The children of the library item.
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        art?: string;
                        identifier?: string;
                        key?: string;
                        librarySectionID?: number;
                        librarySectionTitle?: string;
                        librarySectionUUID?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        nocache?: boolean;
                        parentIndex?: number;
                        parentTitle?: string;
                        parentYear?: number;
                        summary?: string;
                        theme?: string;
                        thumb?: string;
                        title1?: string;
                        title2?: string;
                        viewGroup?: string;
                        viewMode?: number;
                        Directory?: Array<{
                            leafCount?: number;
                            thumb?: string;
                            viewedLeafCount?: number;
                            key?: string;
                            title?: string;
                        }>;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            parentRatingKey?: string;
                            guid?: string;
                            parentGuid?: string;
                            parentStudio?: string;
                            type?: string;
                            title?: string;
                            parentKey?: string;
                            parentTitle?: string;
                            summary?: string;
                            index?: number;
                            parentIndex?: number;
                            viewCount?: number;
                            lastViewedAt?: number;
                            parentYear?: number;
                            thumb?: string;
                            art?: string;
                            parentThumb?: string;
                            parentTheme?: string;
                            leafCount?: number;
                            viewedLeafCount?: number;
                            addedAt?: number;
                            updatedAt?: number;
                            userRating?: number;
                            skipCount?: number;
                            lastRatedAt?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/library/onDeck': {
        get: {
            res: {
                /**
                 * The on Deck content
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        allowSync?: boolean;
                        identifier?: string;
                        mediaTagPrefix?: string;
                        mediaTagVersion?: number;
                        mixedParents?: boolean;
                        Metadata?: Array<{
                            allowSync?: boolean;
                            librarySectionID?: number;
                            librarySectionTitle?: string;
                            librarySectionUUID?: string;
                            ratingKey?: number;
                            key?: string;
                            parentRatingKey?: number;
                            grandparentRatingKey?: number;
                            guid?: string;
                            parentGuid?: string;
                            grandparentGuid?: string;
                            type?: string;
                            title?: string;
                            grandparentKey?: string;
                            parentKey?: string;
                            librarySectionKey?: string;
                            grandparentTitle?: string;
                            parentTitle?: string;
                            contentRating?: string;
                            summary?: string;
                            index?: number;
                            parentIndex?: number;
                            lastViewedAt?: number;
                            year?: number;
                            thumb?: string;
                            art?: string;
                            parentThumb?: string;
                            grandparentThumb?: string;
                            grandparentArt?: string;
                            grandparentTheme?: string;
                            duration?: number;
                            originallyAvailableAt?: string;
                            addedAt?: number;
                            updatedAt?: number;
                            Media?: Array<{
                                id?: number;
                                duration?: number;
                                bitrate?: number;
                                width?: number;
                                height?: number;
                                aspectRatio?: number;
                                audioChannels?: number;
                                audioCodec?: string;
                                videoCodec?: string;
                                videoResolution?: string;
                                container?: string;
                                videoFrameRate?: string;
                                audioProfile?: string;
                                videoProfile?: string;
                                Part?: Array<{
                                    id?: number;
                                    key?: string;
                                    duration?: number;
                                    file?: string;
                                    size?: number;
                                    audioProfile?: string;
                                    container?: string;
                                    videoProfile?: string;
                                    Stream?: Array<{
                                        id?: number;
                                        streamType?: number;
                                        default?: boolean;
                                        codec?: string;
                                        index?: number;
                                        bitrate?: number;
                                        language?: string;
                                        languageTag?: string;
                                        languageCode?: string;
                                        bitDepth?: number;
                                        chromaLocation?: string;
                                        chromaSubsampling?: string;
                                        codedHeight?: number;
                                        codedWidth?: number;
                                        colorRange?: string;
                                        frameRate?: number;
                                        height?: number;
                                        level?: number;
                                        profile?: string;
                                        refFrames?: number;
                                        width?: number;
                                        displayTitle?: string;
                                        extendedDisplayTitle?: string;
                                    }>;
                                }>;
                            }>;
                            Guid?: Array<{
                                id?: string;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/log': {
        get: {
            req: {
                /**
                 * An integer log level to write to the PMS log with.
                 * 0: Error
                 * 1: Warning
                 * 2: Info
                 * 3: Debug
                 * 4: Verbose
                 *
                 */
                level: 0 | 1 | 2 | 3 | 4;
                /**
                 * The text of the message to write to the log.
                 */
                message: string;
                /**
                 * a string indicating the source of the message.
                 */
                source: string;
            };
            res: {
                /**
                 * Log Message Posted successfully
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        post: {
            req: {
                requestBody: string;
            };
            res: {
                /**
                 * Multi-Line Log Message Posted successfully
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/log/networked': {
        get: {
            res: {
                /**
                 * Papertrail enabled successfully
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
                /**
                 * the user was not signed in
                 */
                403: unknown;
            };
        };
    };
    '/pins': {
        post: {
            req: {
                /**
                 * Determines the kind of code returned by the API call
                 * Strong codes are used for Pin authentication flows
                 * Non-Strong codes are used for `Plex.tv/link`
                 *
                 */
                strong?: boolean;
                /**
                 * The unique identifier for the client application
                 * This is used to track the client application and its usage
                 * (UUID, serial number, or other number unique per device)
                 *
                 */
                xPlexClientIdentifier: string;
            };
            res: {
                /**
                 * The Pin
                 */
                200: {
                    /**
                     * PinID for use with authentication
                     */
                    id?: number;
                    code?: string;
                    product?: string;
                    trusted?: boolean;
                    /**
                     * a link to a QR code hosted on plex.tv
                     * The QR code redirects to the relevant `plex.tv/link` authentication page
                     * Which then prompts the user for the 4 Digit Link Pin
                     *
                     */
                    qr?: string;
                    clientIdentifier?: string;
                    location?: {
                        code?: string;
                        european_union_member?: boolean;
                        continent_code?: string;
                        country?: string;
                        city?: string;
                        time_zone?: string;
                        postal_code?: number;
                        in_privacy_restricted_country?: boolean;
                        subdivisions?: string;
                        coordinates?: string;
                    };
                    expiresIn?: number;
                    createdAt?: string;
                    expiresAt?: string;
                    authToken?: string;
                    newRegistration?: string;
                };
                /**
                 * X-Plex-Client-Identifier is missing
                 */
                400: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/pins/{pinID}': {
        get: {
            req: {
                /**
                 * The PinID to retrieve an access token for
                 */
                pinId: string;
                /**
                 * The unique identifier for the client application
                 * This is used to track the client application and its usage
                 * (UUID, serial number, or other number unique per device)
                 *
                 */
                xPlexClientIdentifier: string;
            };
            res: {
                /**
                 * Access Token
                 */
                200: unknown;
                /**
                 * X-Plex-Client-Identifier is missing
                 */
                400: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/playlists': {
        post: {
            req: {
                /**
                 * the play queue to copy to a playlist
                 */
                playQueueId?: number;
                /**
                 * whether the playlist is smart or not
                 */
                smart: 0 | 1;
                /**
                 * name of the playlist
                 */
                title: string;
                /**
                 * type of playlist to create
                 */
                type: 'audio' | 'video' | 'photo';
                /**
                 * the content URI for the playlist
                 */
                uri: string;
            };
            res: {
                /**
                 * returns all playlists
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            type?: string;
                            title?: string;
                            summary?: string;
                            smart?: boolean;
                            playlistType?: string;
                            icon?: string;
                            viewCount?: number;
                            lastViewedAt?: number;
                            leafCount?: number;
                            addedAt?: number;
                            updatedAt?: number;
                            composite?: string;
                            duration?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        get: {
            req: {
                /**
                 * limit to a type of playlist.
                 */
                playlistType?: 'audio' | 'video' | 'photo';
                /**
                 * type of playlists to return (default is all).
                 */
                smart?: 0 | 1;
            };
            res: {
                /**
                 * returns all playlists
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            type?: string;
                            title?: string;
                            summary?: string;
                            smart?: boolean;
                            playlistType?: string;
                            composite?: string;
                            icon?: string;
                            viewCount?: number;
                            lastViewedAt?: number;
                            duration?: number;
                            leafCount?: number;
                            addedAt?: number;
                            updatedAt?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/playlists/{playlistID}': {
        get: {
            req: {
                /**
                 * the ID of the playlist
                 */
                playlistId: number;
            };
            res: {
                /**
                 * The playlist
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Metadata?: Array<{
                            content?: string;
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            type?: string;
                            title?: string;
                            summary?: string;
                            smart?: boolean;
                            playlistType?: string;
                            composite?: string;
                            icon?: string;
                            duration?: number;
                            leafCount?: number;
                            addedAt?: number;
                            updatedAt?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        delete: {
            req: {
                /**
                 * the ID of the playlist
                 */
                playlistId: number;
            };
            res: {
                /**
                 * The playlist is deleted
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        put: {
            req: {
                /**
                 * the ID of the playlist
                 */
                playlistId: number;
                /**
                 * summary description of the playlist
                 */
                summary?: string;
                /**
                 * name of the playlist
                 */
                title?: string;
            };
            res: {
                /**
                 * The playlist is deleted
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/playlists/{playlistID}/items': {
        get: {
            req: {
                /**
                 * the ID of the playlist
                 */
                playlistId: number;
                /**
                 * the metadata type of the item to return
                 */
                type: number;
            };
            res: {
                /**
                 * The playlist contents
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        composite?: string;
                        duration?: number;
                        leafCount?: number;
                        playlistType?: string;
                        ratingKey?: string;
                        smart?: boolean;
                        title?: string;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            studio?: string;
                            type?: string;
                            title?: string;
                            titleSort?: string;
                            librarySectionTitle?: string;
                            librarySectionID?: number;
                            librarySectionKey?: string;
                            contentRating?: string;
                            summary?: string;
                            rating?: number;
                            audienceRating?: number;
                            year?: number;
                            tagline?: string;
                            thumb?: string;
                            art?: string;
                            duration?: number;
                            originallyAvailableAt?: string;
                            addedAt?: number;
                            updatedAt?: number;
                            audienceRatingImage?: string;
                            hasPremiumExtras?: string;
                            hasPremiumPrimaryExtra?: string;
                            ratingImage?: string;
                            Media?: Array<{
                                id?: number;
                                duration?: number;
                                bitrate?: number;
                                width?: number;
                                height?: number;
                                aspectRatio?: number;
                                audioChannels?: number;
                                audioCodec?: string;
                                videoCodec?: string;
                                videoResolution?: string;
                                container?: string;
                                videoFrameRate?: string;
                                optimizedForStreaming?: number;
                                audioProfile?: string;
                                has64bitOffsets?: boolean;
                                videoProfile?: string;
                                Part?: Array<{
                                    id?: number;
                                    key?: string;
                                    duration?: number;
                                    file?: string;
                                    size?: number;
                                    audioProfile?: string;
                                    container?: string;
                                    has64bitOffsets?: boolean;
                                    optimizedForStreaming?: boolean;
                                    videoProfile?: string;
                                }>;
                            }>;
                            Genre?: Array<{
                                tag?: string;
                            }>;
                            Country?: Array<{
                                tag?: string;
                            }>;
                            Director?: Array<{
                                tag?: string;
                            }>;
                            Writer?: Array<{
                                tag?: string;
                            }>;
                            Role?: Array<{
                                tag?: string;
                            }>;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        delete: {
            req: {
                /**
                 * the ID of the playlist
                 */
                playlistId: number;
            };
            res: {
                /**
                 * The playlist contents are cleared
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
        put: {
            req: {
                /**
                 * the ID of the playlist
                 */
                playlistId: number;
                /**
                 * the play queue to add to a playlist
                 */
                playQueueId?: number;
                /**
                 * the content URI for the playlist
                 */
                uri: string;
            };
            res: {
                /**
                 * Playlist Updated
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        leafCountAdded?: number;
                        leafCountRequested?: number;
                        Metadata?: Array<{
                            ratingKey?: string;
                            key?: string;
                            guid?: string;
                            type?: string;
                            title?: string;
                            summary?: string;
                            smart?: boolean;
                            playlistType?: string;
                            composite?: string;
                            duration?: number;
                            leafCount?: number;
                            addedAt?: number;
                            updatedAt?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/playlists/upload': {
        post: {
            req: {
                /**
                 * Force overwriting of duplicate playlists.
                 * By default, a playlist file uploaded with the same path will overwrite the existing playlist.
                 * The `force` argument is used to disable overwriting.
                 * If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.
                 *
                 */
                force: 0 | 1;
                /**
                 * absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.
                 * If the `path` argument is a directory, that path will be scanned for playlist files to be processed.
                 * Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.
                 * The GUID of each playlist is based on the filename.
                 * If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.
                 * The GUID of each playlist is based on the filename.
                 *
                 */
                path: string;
            };
            res: {
                /**
                 * The playlist is uploaded
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/security/token': {
        get: {
            req: {
                /**
                 * `all` - This is the only supported `scope` parameter.
                 */
                scope: 'all';
                /**
                 * `delegation` - This is the only supported `type` parameter.
                 */
                type: 'delegation';
            };
            res: {
                /**
                 * A Transient Token
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/security/resources': {
        get: {
            req: {
                /**
                 * The source identifier with an included prefix.
                 */
                source: string;
            };
            res: {
                /**
                 * Source Connection Information
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/statistics/media': {
        get: {
            req: {
                /**
                 * The timespan to retrieve statistics for
                 * the exact meaning of this parameter is not known
                 *
                 */
                timespan?: number;
            };
            res: {
                /**
                 * Media Statistics
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Device?: Array<{
                            id?: number;
                            name?: string;
                            platform?: string;
                            clientIdentifier?: string;
                            createdAt?: number;
                        }>;
                        Account?: Array<{
                            id?: number;
                            key?: string;
                            name?: string;
                            defaultAudioLanguage?: string;
                            autoSelectAudio?: boolean;
                            defaultSubtitleLanguage?: string;
                            subtitleMode?: number;
                            thumb?: string;
                        }>;
                        StatisticsMedia?: Array<{
                            accountID?: number;
                            deviceID?: number;
                            timespan?: number;
                            at?: number;
                            metadataType?: number;
                            count?: number;
                            duration?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/status/sessions': {
        get: {
            res: {
                /**
                 * List of Active Plex Sessions
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Metadata?: Array<{
                            addedAt?: number;
                            art?: string;
                            duration?: number;
                            grandparentArt?: string;
                            grandparentGuid?: string;
                            grandparentKey?: string;
                            grandparentRatingKey?: string;
                            grandparentThumb?: string;
                            grandparentTitle?: string;
                            guid?: string;
                            index?: number;
                            key?: string;
                            librarySectionID?: string;
                            librarySectionKey?: string;
                            librarySectionTitle?: string;
                            musicAnalysisVersion?: string;
                            parentGuid?: string;
                            parentIndex?: number;
                            parentKey?: string;
                            parentRatingKey?: string;
                            parentStudio?: string;
                            parentThumb?: string;
                            parentTitle?: string;
                            parentYear?: number;
                            ratingCount?: number;
                            ratingKey?: string;
                            sessionKey?: string;
                            thumb?: string;
                            title?: string;
                            titleSort?: string;
                            type?: string;
                            updatedAt?: number;
                            viewOffset?: number;
                            Media?: Array<{
                                audioChannels?: number;
                                audioCodec?: string;
                                bitrate?: number;
                                container?: string;
                                duration?: number;
                                id?: string;
                                selected?: boolean;
                                Part?: Array<{
                                    container?: string;
                                    duration?: number;
                                    file?: string;
                                    hasThumbnail?: string;
                                    id?: string;
                                    key?: string;
                                    size?: number;
                                    decision?: string;
                                    selected?: boolean;
                                    Stream?: Array<{
                                        albumGain?: string;
                                        albumPeak?: string;
                                        albumRange?: string;
                                        audioChannelLayout?: string;
                                        bitDepth?: number;
                                        bitrate?: number;
                                        channels?: number;
                                        codec?: string;
                                        displayTitle?: string;
                                        extendedDisplayTitle?: string;
                                        gain?: string;
                                        id?: string;
                                        index?: number;
                                        loudness?: string;
                                        lra?: string;
                                        peak?: string;
                                        samplingRate?: number;
                                        selected?: boolean;
                                        streamType?: number;
                                        location?: string;
                                    }>;
                                }>;
                            }>;
                            User?: {
                                id?: string;
                                thumb?: string;
                                title?: string;
                            };
                            Player?: {
                                address?: string;
                                machineIdentifier?: string;
                                model?: string;
                                platform?: string;
                                platformVersion?: string;
                                product?: string;
                                profile?: string;
                                remotePublicAddress?: string;
                                state?: string;
                                title?: string;
                                version?: string;
                                local?: boolean;
                                relayed?: boolean;
                                secure?: boolean;
                                userID?: number;
                            };
                            Session?: {
                                id?: string;
                                bandwidth?: number;
                                location?: string;
                            };
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/status/sessions/history/all': {
        get: {
            res: {
                /**
                 * List of Plex Sessions
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        Metadata?: Array<{
                            historyKey?: string;
                            key?: string;
                            ratingKey?: string;
                            librarySectionID?: string;
                            parentKey?: string;
                            grandparentKey?: string;
                            title?: string;
                            grandparentTitle?: string;
                            type?: string;
                            thumb?: string;
                            parentThumb?: string;
                            grandparentThumb?: string;
                            grandparentArt?: string;
                            index?: number;
                            parentIndex?: number;
                            originallyAvailableAt?: string;
                            viewedAt?: number;
                            accountID?: number;
                            deviceID?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/transcode/sessions': {
        get: {
            res: {
                /**
                 * The Transcode Sessions
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        TranscodeSession?: Array<{
                            key?: string;
                            throttled?: boolean;
                            complete?: boolean;
                            progress?: number;
                            size?: number;
                            speed?: number;
                            error?: boolean;
                            duration?: number;
                            remaining?: number;
                            context?: string;
                            sourceVideoCodec?: string;
                            sourceAudioCodec?: string;
                            videoDecision?: string;
                            audioDecision?: string;
                            subtitleDecision?: string;
                            protocol?: string;
                            container?: string;
                            videoCodec?: string;
                            audioCodec?: string;
                            audioChannels?: number;
                            transcodeHwRequested?: boolean;
                            timeStamp?: number;
                            maxOffsetAvailable?: number;
                            minOffsetAvailable?: number;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/transcode/sessions/{sessionKey}': {
        delete: {
            req: {
                /**
                 * the Key of the transcode session to stop
                 */
                sessionKey: string;
            };
            res: {
                /**
                 * The Transcode Session ended
                 */
                204: void;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/updater/status': {
        get: {
            res: {
                /**
                 * The Server Updates
                 */
                200: {
                    MediaContainer?: {
                        size?: number;
                        canInstall?: boolean;
                        checkedAt?: number;
                        downloadURL?: string;
                        status?: number;
                        Release?: Array<{
                            key?: string;
                            version?: string;
                            added?: string;
                            fixed?: string;
                            downloadURL?: string;
                            state?: string;
                        }>;
                    };
                };
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/updater/check': {
        put: {
            req: {
                /**
                 * Indicate that you want to start download any updates found.
                 */
                download?: 0 | 1;
            };
            res: {
                /**
                 * The update check is started, if download is set to 1 and the system is able to update automatically, the update download will start.
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
            };
        };
    };
    '/updater/apply': {
        put: {
            req: {
                /**
                 * Indicate that the latest version should be marked as skipped. The <Release> entry for this version will have the `state` set to `skipped`.
                 */
                skip?: 0 | 1;
                /**
                 * Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
                 */
                tonight?: 0 | 1;
            };
            res: {
                /**
                 * If the update process started correctly
                 */
                200: unknown;
                /**
                 * Bad Request - A parameter was not specified, or was specified incorrectly.
                 */
                400: unknown;
                /**
                 * Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
                 */
                401: {
                    errors?: Array<{
                        code?: number;
                        message?: string;
                        status?: number;
                    }>;
                };
                /**
                 * If the update process failed to start
                 */
                500: unknown;
            };
        };
    };
};