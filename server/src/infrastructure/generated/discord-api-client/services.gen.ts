// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetMyOauth2ApplicationResponse, ListMyConnectionsResponse, CreateDmData, CreateDmResponse, ListMyGuildsData, ListMyGuildsResponse, GetMyApplicationResponse, UpdateMyApplicationData, UpdateMyApplicationResponse, GetBotGatewayResponse, GetPublicKeysResponse, GetMyOauth2AuthorizationResponse, ListVoiceRegionsResponse, GetMyUserResponse, UpdateMyUserData, UpdateMyUserResponse, CreateStageInstanceData, CreateStageInstanceResponse, ListStickerPacksResponse, GetGatewayResponse, CreateGuildData, CreateGuildResponse, ListMyPrivateArchivedThreadsData, ListMyPrivateArchivedThreadsResponse, ListGuildApplicationCommandPermissionsData, ListGuildApplicationCommandPermissionsResponse, GetGuildApplicationCommandPermissionsData, GetGuildApplicationCommandPermissionsResponse, SetGuildApplicationCommandPermissionsData, SetGuildApplicationCommandPermissionsResponse, AddMyMessageReactionData, AddMyMessageReactionResponse, DeleteMyMessageReactionData, DeleteMyMessageReactionResponse, ListPrivateArchivedThreadsData, ListPrivateArchivedThreadsResponse, ListPublicArchivedThreadsData, ListPublicArchivedThreadsResponse, GetApplicationUserRoleConnectionData, GetApplicationUserRoleConnectionResponse, UpdateApplicationUserRoleConnectionData, UpdateApplicationUserRoleConnectionResponse, GetMyGuildMemberData, GetMyGuildMemberResponse, GetApplicationRoleConnectionsMetadataData, GetApplicationRoleConnectionsMetadataResponse, UpdateApplicationRoleConnectionsMetadataData, UpdateApplicationRoleConnectionsMetadataResponse, ConsumeEntitlementData, ConsumeEntitlementResponse, GetGuildApplicationCommandData, GetGuildApplicationCommandResponse, DeleteGuildApplicationCommandData, DeleteGuildApplicationCommandResponse, UpdateGuildApplicationCommandData, UpdateGuildApplicationCommandResponse, ListGuildApplicationCommandsData, ListGuildApplicationCommandsResponse, BulkSetGuildApplicationCommandsData, BulkSetGuildApplicationCommandsResponse, CreateGuildApplicationCommandData, CreateGuildApplicationCommandResponse, JoinThreadData, JoinThreadResponse, LeaveThreadData, LeaveThreadResponse, BulkDeleteMessagesData, BulkDeleteMessagesResponse, DeleteUserMessageReactionData, DeleteUserMessageReactionResponse, ListMessageReactionsByEmojiData, ListMessageReactionsByEmojiResponse, DeleteAllMessageReactionsByEmojiData, DeleteAllMessageReactionsByEmojiResponse, DeleteAllMessageReactionsData, DeleteAllMessageReactionsResponse, CrosspostMessageData, CrosspostMessageResponse, CreateThreadFromMessageData, CreateThreadFromMessageResponse, GetOriginalWebhookMessageData, GetOriginalWebhookMessageResponse, DeleteOriginalWebhookMessageData, DeleteOriginalWebhookMessageResponse, UpdateOriginalWebhookMessageData, UpdateOriginalWebhookMessageResponse, ListGuildScheduledEventUsersData, ListGuildScheduledEventUsersResponse, GetAutoModerationRuleData, GetAutoModerationRuleResponse, DeleteAutoModerationRuleData, DeleteAutoModerationRuleResponse, UpdateAutoModerationRuleData, UpdateAutoModerationRuleResponse, ListAutoModerationRulesData, ListAutoModerationRulesResponse, CreateAutoModerationRuleData, CreateAutoModerationRuleResponse, UpdateSelfVoiceStateData, UpdateSelfVoiceStateResponse, SearchGuildMembersData, SearchGuildMembersResponse, GetActiveGuildThreadsData, GetActiveGuildThreadsResponse, UpdateMyGuildMemberData, UpdateMyGuildMemberResponse, AddGuildMemberRoleData, AddGuildMemberRoleResponse, DeleteGuildMemberRoleData, DeleteGuildMemberRoleResponse, LeaveGuildData, LeaveGuildResponse, GetEntitlementData, GetEntitlementResponse, DeleteEntitlementData, DeleteEntitlementResponse, GetEntitlementsData, GetEntitlementsResponse, CreateEntitlementData, CreateEntitlementResponse, GetApplicationCommandData, GetApplicationCommandResponse, DeleteApplicationCommandData, DeleteApplicationCommandResponse, UpdateApplicationCommandData, UpdateApplicationCommandResponse, ListApplicationCommandsData, ListApplicationCommandsResponse, BulkSetApplicationCommandsData, BulkSetApplicationCommandsResponse, CreateApplicationCommandData, CreateApplicationCommandResponse, CreateInteractionResponseData, CreateInteractionResponseResponse, GetThreadMemberData, GetThreadMemberResponse, AddThreadMemberData, AddThreadMemberResponse, DeleteThreadMemberData, DeleteThreadMemberResponse, ListThreadMembersData, ListThreadMembersResponse, SetChannelPermissionOverwriteData, SetChannelPermissionOverwriteResponse, DeleteChannelPermissionOverwriteData, DeleteChannelPermissionOverwriteResponse, AddGroupDmUserData, AddGroupDmUserResponse, DeleteGroupDmUserData, DeleteGroupDmUserResponse, FollowChannelData, FollowChannelResponse, GetMessageData, GetMessageResponse, DeleteMessageData, DeleteMessageResponse, UpdateMessageData, UpdateMessageResponse, ListMessagesData, ListMessagesResponse, CreateMessageData, CreateMessageResponse, ListChannelWebhooksData, ListChannelWebhooksResponse, CreateWebhookData, CreateWebhookResponse, ListChannelInvitesData, ListChannelInvitesResponse, CreateChannelInviteData, CreateChannelInviteResponse, CreateThreadData, CreateThreadResponse, TriggerTypingIndicatorData, TriggerTypingIndicatorResponse, PinMessageData, PinMessageResponse, UnpinMessageData, UnpinMessageResponse, ListPinnedMessagesData, ListPinnedMessagesResponse, GetWebhookMessageData, GetWebhookMessageResponse, DeleteWebhookMessageData, DeleteWebhookMessageResponse, UpdateWebhookMessageData, UpdateWebhookMessageResponse, ExecuteGithubCompatibleWebhookData, ExecuteGithubCompatibleWebhookResponse, ExecuteSlackCompatibleWebhookData, ExecuteSlackCompatibleWebhookResponse, GetGuildTemplateData, GetGuildTemplateResponse, CreateGuildFromTemplateData, CreateGuildFromTemplateResponse, GetGuildNewMemberWelcomeData, GetGuildNewMemberWelcomeResponse, GetGuildScheduledEventData, GetGuildScheduledEventResponse, DeleteGuildScheduledEventData, DeleteGuildScheduledEventResponse, UpdateGuildScheduledEventData, UpdateGuildScheduledEventResponse, ListGuildScheduledEventsData, ListGuildScheduledEventsResponse, CreateGuildScheduledEventData, CreateGuildScheduledEventResponse, GetGuildWelcomeScreenData, GetGuildWelcomeScreenResponse, UpdateGuildWelcomeScreenData, UpdateGuildWelcomeScreenResponse, UpdateVoiceStateData, UpdateVoiceStateResponse, DeleteGuildIntegrationData, DeleteGuildIntegrationResponse, ListGuildIntegrationsData, ListGuildIntegrationsResponse, GetGuildWidgetData, GetGuildWidgetResponse, GetGuildsOnboardingData, GetGuildsOnboardingResponse, PutGuildsOnboardingData, PutGuildsOnboardingResponse, GetGuildVanityUrlData, GetGuildVanityUrlResponse, ListGuildAuditLogEntriesData, ListGuildAuditLogEntriesResponse, GetGuildWidgetPngData, GetGuildWidgetPngResponse, SyncGuildTemplateData, SyncGuildTemplateResponse, DeleteGuildTemplateData, DeleteGuildTemplateResponse, UpdateGuildTemplateData, UpdateGuildTemplateResponse, ListGuildTemplatesData, ListGuildTemplatesResponse, CreateGuildTemplateData, CreateGuildTemplateResponse, GetGuildStickerData, GetGuildStickerResponse, DeleteGuildStickerData, DeleteGuildStickerResponse, UpdateGuildStickerData, UpdateGuildStickerResponse, BulkBanUsersFromGuildData, BulkBanUsersFromGuildResponse, ListGuildStickersData, ListGuildStickersResponse, CreateGuildStickerData, CreateGuildStickerResponse, GetGuildWebhooksData, GetGuildWebhooksResponse, ListGuildChannelsData, ListGuildChannelsResponse, CreateGuildChannelData, CreateGuildChannelResponse, BulkUpdateGuildChannelsData, BulkUpdateGuildChannelsResponse, GetGuildMemberData, GetGuildMemberResponse, AddGuildMemberData, AddGuildMemberResponse, DeleteGuildMemberData, DeleteGuildMemberResponse, UpdateGuildMemberData, UpdateGuildMemberResponse, ListGuildMembersData, ListGuildMembersResponse, GetGuildPreviewData, GetGuildPreviewResponse, ListGuildInvitesData, ListGuildInvitesResponse, ListGuildVoiceRegionsData, ListGuildVoiceRegionsResponse, GetGuildEmojiData, GetGuildEmojiResponse, DeleteGuildEmojiData, DeleteGuildEmojiResponse, UpdateGuildEmojiData, UpdateGuildEmojiResponse, ListGuildEmojisData, ListGuildEmojisResponse, CreateGuildEmojiData, CreateGuildEmojiResponse, GetGuildWidgetSettingsData, GetGuildWidgetSettingsResponse, UpdateGuildWidgetSettingsData, UpdateGuildWidgetSettingsResponse, DeleteGuildRoleData, DeleteGuildRoleResponse, UpdateGuildRoleData, UpdateGuildRoleResponse, ListGuildRolesData, ListGuildRolesResponse, CreateGuildRoleData, CreateGuildRoleResponse, BulkUpdateGuildRolesData, BulkUpdateGuildRolesResponse, PreviewPruneGuildData, PreviewPruneGuildResponse, PruneGuildData, PruneGuildResponse, GetGuildBanData, GetGuildBanResponse, BanUserFromGuildData, BanUserFromGuildResponse, UnbanUserFromGuildData, UnbanUserFromGuildResponse, ListGuildBansData, ListGuildBansResponse, SetGuildMfaLevelData, SetGuildMfaLevelResponse, GetStageInstanceData, GetStageInstanceResponse, DeleteStageInstanceData, DeleteStageInstanceResponse, UpdateStageInstanceData, UpdateStageInstanceResponse, GetApplicationData, GetApplicationResponse, UpdateApplicationData, UpdateApplicationResponse, GetWebhookByTokenData, GetWebhookByTokenResponse, ExecuteWebhookData, ExecuteWebhookResponse, DeleteWebhookByTokenData, DeleteWebhookByTokenResponse, UpdateWebhookByTokenData, UpdateWebhookByTokenResponse, GetStickerData, GetStickerResponse, GetWebhookData, GetWebhookResponse, DeleteWebhookData, DeleteWebhookResponse, UpdateWebhookData, UpdateWebhookResponse, GetChannelData, GetChannelResponse, DeleteChannelData, DeleteChannelResponse, UpdateChannelData, UpdateChannelResponse, InviteResolveData, InviteResolveResponse, InviteRevokeData, InviteRevokeResponse, GetGuildData, GetGuildResponse, DeleteGuildData, DeleteGuildResponse, UpdateGuildData, UpdateGuildResponse, GetUserData, GetUserResponse } from './types.gen';

export class DefaultService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns PrivateApplicationResponse 200 response for get_my_oauth2_application
     * @throws ApiError
     */
    public getMyOauth2Application(): CancelablePromise<GetMyOauth2ApplicationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/oauth2/applications/@me'
        });
    }
    
    /**
     * @returns ConnectedAccountResponse 200 response for list_my_connections
     * @throws ApiError
     */
    public listMyConnections(): CancelablePromise<ListMyConnectionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/@me/connections'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown 200 response for create_dm
     * @throws ApiError
     */
    public createDm(data: CreateDmData): CancelablePromise<CreateDmResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/users/@me/channels',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.before
     * @param data.after
     * @param data.limit
     * @param data.withCounts
     * @returns MyGuildResponse 200 response for list_my_guilds
     * @throws ApiError
     */
    public listMyGuilds(data: ListMyGuildsData = {}): CancelablePromise<ListMyGuildsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/@me/guilds',
            query: {
                before: data.before,
                after: data.after,
                limit: data.limit,
                with_counts: data.withCounts
            }
        });
    }
    
    /**
     * @returns PrivateApplicationResponse 200 response for get_my_application
     * @throws ApiError
     */
    public getMyApplication(): CancelablePromise<GetMyApplicationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/@me'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PrivateApplicationResponse 200 response for update_my_application
     * @throws ApiError
     */
    public updateMyApplication(data: UpdateMyApplicationData): CancelablePromise<UpdateMyApplicationResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/applications/@me',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns GatewayBotResponse 200 response for get_bot_gateway
     * @throws ApiError
     */
    public getBotGateway(): CancelablePromise<GetBotGatewayResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/gateway/bot'
        });
    }
    
    /**
     * @returns OAuth2GetKeys 200 response for get_public_keys
     * @throws ApiError
     */
    public getPublicKeys(): CancelablePromise<GetPublicKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/oauth2/keys'
        });
    }
    
    /**
     * @returns OAuth2GetAuthorizationResponse 200 response for get_my_oauth2_authorization
     * @throws ApiError
     */
    public getMyOauth2Authorization(): CancelablePromise<GetMyOauth2AuthorizationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/oauth2/@me'
        });
    }
    
    /**
     * @returns VoiceRegionResponse 200 response for list_voice_regions
     * @throws ApiError
     */
    public listVoiceRegions(): CancelablePromise<ListVoiceRegionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/voice/regions'
        });
    }
    
    /**
     * @returns UserPIIResponse 200 response for get_my_user
     * @throws ApiError
     */
    public getMyUser(): CancelablePromise<GetMyUserResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/@me'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPIIResponse 200 response for update_my_user
     * @throws ApiError
     */
    public updateMyUser(data: UpdateMyUserData): CancelablePromise<UpdateMyUserResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/users/@me',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns StageInstanceResponse 200 response for create_stage_instance
     * @throws ApiError
     */
    public createStageInstance(data: CreateStageInstanceData): CancelablePromise<CreateStageInstanceResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/stage-instances',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns StickerPackCollectionResponse 200 response for list_sticker_packs
     * @throws ApiError
     */
    public listStickerPacks(): CancelablePromise<ListStickerPacksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/sticker-packs'
        });
    }
    
    /**
     * @returns GatewayResponse 200 response for get_gateway
     * @throws ApiError
     */
    public getGateway(): CancelablePromise<GetGatewayResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/gateway'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GuildResponse 201 response for create_guild
     * @throws ApiError
     */
    public createGuild(data: CreateGuildData): CancelablePromise<CreateGuildResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.before
     * @param data.limit
     * @returns ThreadsResponse 200 response for list_my_private_archived_threads
     * @throws ApiError
     */
    public listMyPrivateArchivedThreads(data: ListMyPrivateArchivedThreadsData): CancelablePromise<ListMyPrivateArchivedThreadsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/users/@me/threads/archived/private',
            path: {
                channel_id: data.channelId
            },
            query: {
                before: data.before,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.guildId
     * @returns CommandPermissionsResponse 200 response for list_guild_application_command_permissions
     * @throws ApiError
     */
    public listGuildApplicationCommandPermissions(data: ListGuildApplicationCommandPermissionsData): CancelablePromise<ListGuildApplicationCommandPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/guilds/{guild_id}/commands/permissions',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.guildId
     * @param data.commandId
     * @returns CommandPermissionsResponse 200 response for get_guild_application_command_permissions
     * @throws ApiError
     */
    public getGuildApplicationCommandPermissions(data: GetGuildApplicationCommandPermissionsData): CancelablePromise<GetGuildApplicationCommandPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId,
                command_id: data.commandId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @param data.guildId
     * @param data.commandId
     * @returns CommandPermissionsResponse 200 response for set_guild_application_command_permissions
     * @throws ApiError
     */
    public setGuildApplicationCommandPermissions(data: SetGuildApplicationCommandPermissionsData): CancelablePromise<SetGuildApplicationCommandPermissionsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId,
                command_id: data.commandId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @param data.emojiName
     * @returns void 204 response for add_my_message_reaction
     * @throws ApiError
     */
    public addMyMessageReaction(data: AddMyMessageReactionData): CancelablePromise<AddMyMessageReactionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId,
                emoji_name: data.emojiName
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @param data.emojiName
     * @returns void 204 response for delete_my_message_reaction
     * @throws ApiError
     */
    public deleteMyMessageReaction(data: DeleteMyMessageReactionData): CancelablePromise<DeleteMyMessageReactionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId,
                emoji_name: data.emojiName
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.before
     * @param data.limit
     * @returns ThreadsResponse 200 response for list_private_archived_threads
     * @throws ApiError
     */
    public listPrivateArchivedThreads(data: ListPrivateArchivedThreadsData): CancelablePromise<ListPrivateArchivedThreadsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/threads/archived/private',
            path: {
                channel_id: data.channelId
            },
            query: {
                before: data.before,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.before
     * @param data.limit
     * @returns ThreadsResponse 200 response for list_public_archived_threads
     * @throws ApiError
     */
    public listPublicArchivedThreads(data: ListPublicArchivedThreadsData): CancelablePromise<ListPublicArchivedThreadsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/threads/archived/public',
            path: {
                channel_id: data.channelId
            },
            query: {
                before: data.before,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @returns ApplicationUserRoleConnectionResponse 200 response for get_application_user_role_connection
     * @throws ApiError
     */
    public getApplicationUserRoleConnection(data: GetApplicationUserRoleConnectionData): CancelablePromise<GetApplicationUserRoleConnectionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/@me/applications/{application_id}/role-connection',
            path: {
                application_id: data.applicationId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @returns ApplicationUserRoleConnectionResponse 200 response for update_application_user_role_connection
     * @throws ApiError
     */
    public updateApplicationUserRoleConnection(data: UpdateApplicationUserRoleConnectionData): CancelablePromise<UpdateApplicationUserRoleConnectionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/users/@me/applications/{application_id}/role-connection',
            path: {
                application_id: data.applicationId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns PrivateGuildMemberResponse 200 response for get_my_guild_member
     * @throws ApiError
     */
    public getMyGuildMember(data: GetMyGuildMemberData): CancelablePromise<GetMyGuildMemberResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/@me/guilds/{guild_id}/member',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @returns ApplicationRoleConnectionsMetadataItemResponse 200 response for get_application_role_connections_metadata
     * @throws ApiError
     */
    public getApplicationRoleConnectionsMetadata(data: GetApplicationRoleConnectionsMetadataData): CancelablePromise<GetApplicationRoleConnectionsMetadataResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/role-connections/metadata',
            path: {
                application_id: data.applicationId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @returns ApplicationRoleConnectionsMetadataItemResponse 200 response for update_application_role_connections_metadata
     * @throws ApiError
     */
    public updateApplicationRoleConnectionsMetadata(data: UpdateApplicationRoleConnectionsMetadataData): CancelablePromise<UpdateApplicationRoleConnectionsMetadataResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/applications/{application_id}/role-connections/metadata',
            path: {
                application_id: data.applicationId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.entitlementId
     * @returns void 204 response for consume_entitlement
     * @throws ApiError
     */
    public consumeEntitlement(data: ConsumeEntitlementData): CancelablePromise<ConsumeEntitlementResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/applications/{application_id}/entitlements/{entitlement_id}/consume',
            path: {
                application_id: data.applicationId,
                entitlement_id: data.entitlementId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.guildId
     * @param data.commandId
     * @returns ApplicationCommandResponse 200 response for get_guild_application_command
     * @throws ApiError
     */
    public getGuildApplicationCommand(data: GetGuildApplicationCommandData): CancelablePromise<GetGuildApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId,
                command_id: data.commandId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.guildId
     * @param data.commandId
     * @returns void 204 response for delete_guild_application_command
     * @throws ApiError
     */
    public deleteGuildApplicationCommand(data: DeleteGuildApplicationCommandData): CancelablePromise<DeleteGuildApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId,
                command_id: data.commandId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @param data.guildId
     * @param data.commandId
     * @returns ApplicationCommandResponse 200 response for update_guild_application_command
     * @throws ApiError
     */
    public updateGuildApplicationCommand(data: UpdateGuildApplicationCommandData): CancelablePromise<UpdateGuildApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId,
                command_id: data.commandId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.guildId
     * @param data.withLocalizations
     * @returns ApplicationCommandResponse 200 response for list_guild_application_commands
     * @throws ApiError
     */
    public listGuildApplicationCommands(data: ListGuildApplicationCommandsData): CancelablePromise<ListGuildApplicationCommandsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/guilds/{guild_id}/commands',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId
            },
            query: {
                with_localizations: data.withLocalizations
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @param data.guildId
     * @returns ApplicationCommandResponse 200 response for bulk_set_guild_application_commands
     * @throws ApiError
     */
    public bulkSetGuildApplicationCommands(data: BulkSetGuildApplicationCommandsData): CancelablePromise<BulkSetGuildApplicationCommandsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/applications/{application_id}/guilds/{guild_id}/commands',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @param data.guildId
     * @returns ApplicationCommandResponse 200 response for create_guild_application_command
     * @throws ApiError
     */
    public createGuildApplicationCommand(data: CreateGuildApplicationCommandData): CancelablePromise<CreateGuildApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/applications/{application_id}/guilds/{guild_id}/commands',
            path: {
                application_id: data.applicationId,
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns void 204 response for join_thread
     * @throws ApiError
     */
    public joinThread(data: JoinThreadData): CancelablePromise<JoinThreadResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/channels/{channel_id}/thread-members/@me',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns void 204 response for leave_thread
     * @throws ApiError
     */
    public leaveThread(data: LeaveThreadData): CancelablePromise<LeaveThreadResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/thread-members/@me',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns void 204 response for bulk_delete_messages
     * @throws ApiError
     */
    public bulkDeleteMessages(data: BulkDeleteMessagesData): CancelablePromise<BulkDeleteMessagesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/messages/bulk-delete',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @param data.emojiName
     * @param data.userId
     * @returns void 204 response for delete_user_message_reaction
     * @throws ApiError
     */
    public deleteUserMessageReaction(data: DeleteUserMessageReactionData): CancelablePromise<DeleteUserMessageReactionResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/{user_id}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId,
                emoji_name: data.emojiName,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @param data.emojiName
     * @param data.after
     * @param data.limit
     * @returns UserResponse 200 response for list_message_reactions_by_emoji
     * @throws ApiError
     */
    public listMessageReactionsByEmoji(data: ListMessageReactionsByEmojiData): CancelablePromise<ListMessageReactionsByEmojiResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId,
                emoji_name: data.emojiName
            },
            query: {
                after: data.after,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @param data.emojiName
     * @returns void 204 response for delete_all_message_reactions_by_emoji
     * @throws ApiError
     */
    public deleteAllMessageReactionsByEmoji(data: DeleteAllMessageReactionsByEmojiData): CancelablePromise<DeleteAllMessageReactionsByEmojiResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId,
                emoji_name: data.emojiName
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @returns void 204 response for delete_all_message_reactions
     * @throws ApiError
     */
    public deleteAllMessageReactions(data: DeleteAllMessageReactionsData): CancelablePromise<DeleteAllMessageReactionsResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/messages/{message_id}/reactions',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @returns MessageResponse 200 response for crosspost_message
     * @throws ApiError
     */
    public crosspostMessage(data: CrosspostMessageData): CancelablePromise<CrosspostMessageResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/messages/{message_id}/crosspost',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @param data.messageId
     * @returns ThreadResponse 201 response for create_thread_from_message
     * @throws ApiError
     */
    public createThreadFromMessage(data: CreateThreadFromMessageData): CancelablePromise<CreateThreadFromMessageResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/messages/{message_id}/threads',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.threadId
     * @returns MessageResponse 200 response for get_original_webhook_message
     * @throws ApiError
     */
    public getOriginalWebhookMessage(data: GetOriginalWebhookMessageData): CancelablePromise<GetOriginalWebhookMessageResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/webhooks/{webhook_id}/{webhook_token}/messages/@original',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            query: {
                thread_id: data.threadId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.threadId
     * @returns void 204 response for delete_original_webhook_message
     * @throws ApiError
     */
    public deleteOriginalWebhookMessage(data: DeleteOriginalWebhookMessageData): CancelablePromise<DeleteOriginalWebhookMessageResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/webhooks/{webhook_id}/{webhook_token}/messages/@original',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            query: {
                thread_id: data.threadId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.threadId
     * @returns MessageResponse 200 response for update_original_webhook_message
     * @throws ApiError
     */
    public updateOriginalWebhookMessage(data: UpdateOriginalWebhookMessageData): CancelablePromise<UpdateOriginalWebhookMessageResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/webhooks/{webhook_id}/{webhook_token}/messages/@original',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            query: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.guildScheduledEventId
     * @param data.withMember
     * @param data.limit
     * @param data.before
     * @param data.after
     * @returns ScheduledEventUserResponse 200 response for list_guild_scheduled_event_users
     * @throws ApiError
     */
    public listGuildScheduledEventUsers(data: ListGuildScheduledEventUsersData): CancelablePromise<ListGuildScheduledEventUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users',
            path: {
                guild_id: data.guildId,
                guild_scheduled_event_id: data.guildScheduledEventId
            },
            query: {
                with_member: data.withMember,
                limit: data.limit,
                before: data.before,
                after: data.after
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.ruleId
     * @returns unknown 200 response for get_auto_moderation_rule
     * @throws ApiError
     */
    public getAutoModerationRule(data: GetAutoModerationRuleData): CancelablePromise<GetAutoModerationRuleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/auto-moderation/rules/{rule_id}',
            path: {
                guild_id: data.guildId,
                rule_id: data.ruleId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.ruleId
     * @returns void 204 response for delete_auto_moderation_rule
     * @throws ApiError
     */
    public deleteAutoModerationRule(data: DeleteAutoModerationRuleData): CancelablePromise<DeleteAutoModerationRuleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/auto-moderation/rules/{rule_id}',
            path: {
                guild_id: data.guildId,
                rule_id: data.ruleId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.ruleId
     * @returns unknown 200 response for update_auto_moderation_rule
     * @throws ApiError
     */
    public updateAutoModerationRule(data: UpdateAutoModerationRuleData): CancelablePromise<UpdateAutoModerationRuleResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/auto-moderation/rules/{rule_id}',
            path: {
                guild_id: data.guildId,
                rule_id: data.ruleId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns unknown 200 response for list_auto_moderation_rules
     * @throws ApiError
     */
    public listAutoModerationRules(data: ListAutoModerationRulesData): CancelablePromise<ListAutoModerationRulesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/auto-moderation/rules',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns unknown 200 response for create_auto_moderation_rule
     * @throws ApiError
     */
    public createAutoModerationRule(data: CreateAutoModerationRuleData): CancelablePromise<CreateAutoModerationRuleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/auto-moderation/rules',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns void 204 response for update_self_voice_state
     * @throws ApiError
     */
    public updateSelfVoiceState(data: UpdateSelfVoiceStateData): CancelablePromise<UpdateSelfVoiceStateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/voice-states/@me',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.limit
     * @param data.query
     * @param data.guildId
     * @returns GuildMemberResponse 200 response for search_guild_members
     * @throws ApiError
     */
    public searchGuildMembers(data: SearchGuildMembersData): CancelablePromise<SearchGuildMembersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/members/search',
            path: {
                guild_id: data.guildId
            },
            query: {
                limit: data.limit,
                query: data.query
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns ThreadsResponse 200 response for get_active_guild_threads
     * @throws ApiError
     */
    public getActiveGuildThreads(data: GetActiveGuildThreadsData): CancelablePromise<GetActiveGuildThreadsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/threads/active',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns PrivateGuildMemberResponse 200 response for update_my_guild_member
     * @throws ApiError
     */
    public updateMyGuildMember(data: UpdateMyGuildMemberData): CancelablePromise<UpdateMyGuildMemberResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/members/@me',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @param data.roleId
     * @returns void 204 response for add_guild_member_role
     * @throws ApiError
     */
    public addGuildMemberRole(data: AddGuildMemberRoleData): CancelablePromise<AddGuildMemberRoleResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/guilds/{guild_id}/members/{user_id}/roles/{role_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId,
                role_id: data.roleId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @param data.roleId
     * @returns void 204 response for delete_guild_member_role
     * @throws ApiError
     */
    public deleteGuildMemberRole(data: DeleteGuildMemberRoleData): CancelablePromise<DeleteGuildMemberRoleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/members/{user_id}/roles/{role_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId,
                role_id: data.roleId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns void 204 response for leave_guild
     * @throws ApiError
     */
    public leaveGuild(data: LeaveGuildData): CancelablePromise<LeaveGuildResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/users/@me/guilds/{guild_id}',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.entitlementId
     * @returns EntitlementResponse 200 response for get_entitlement
     * @throws ApiError
     */
    public getEntitlement(data: GetEntitlementData): CancelablePromise<GetEntitlementResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/entitlements/{entitlement_id}',
            path: {
                application_id: data.applicationId,
                entitlement_id: data.entitlementId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.entitlementId
     * @returns void 204 response for delete_entitlement
     * @throws ApiError
     */
    public deleteEntitlement(data: DeleteEntitlementData): CancelablePromise<DeleteEntitlementResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/applications/{application_id}/entitlements/{entitlement_id}',
            path: {
                application_id: data.applicationId,
                entitlement_id: data.entitlementId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skuIds
     * @param data.applicationId
     * @param data.userId
     * @param data.guildId
     * @param data.before
     * @param data.after
     * @param data.limit
     * @param data.excludeEnded
     * @param data.onlyActive
     * @returns unknown 200 response for get_entitlements
     * @throws ApiError
     */
    public getEntitlements(data: GetEntitlementsData): CancelablePromise<GetEntitlementsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/entitlements',
            path: {
                application_id: data.applicationId
            },
            query: {
                user_id: data.userId,
                sku_ids: data.skuIds,
                guild_id: data.guildId,
                before: data.before,
                after: data.after,
                limit: data.limit,
                exclude_ended: data.excludeEnded,
                only_active: data.onlyActive
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @returns EntitlementResponse 200 response for create_entitlement
     * @throws ApiError
     */
    public createEntitlement(data: CreateEntitlementData): CancelablePromise<CreateEntitlementResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/applications/{application_id}/entitlements',
            path: {
                application_id: data.applicationId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.commandId
     * @returns ApplicationCommandResponse 200 response for get_application_command
     * @throws ApiError
     */
    public getApplicationCommand(data: GetApplicationCommandData): CancelablePromise<GetApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/commands/{command_id}',
            path: {
                application_id: data.applicationId,
                command_id: data.commandId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.commandId
     * @returns void 204 response for delete_application_command
     * @throws ApiError
     */
    public deleteApplicationCommand(data: DeleteApplicationCommandData): CancelablePromise<DeleteApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/applications/{application_id}/commands/{command_id}',
            path: {
                application_id: data.applicationId,
                command_id: data.commandId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @param data.commandId
     * @returns ApplicationCommandResponse 200 response for update_application_command
     * @throws ApiError
     */
    public updateApplicationCommand(data: UpdateApplicationCommandData): CancelablePromise<UpdateApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/applications/{application_id}/commands/{command_id}',
            path: {
                application_id: data.applicationId,
                command_id: data.commandId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @param data.withLocalizations
     * @returns ApplicationCommandResponse 200 response for list_application_commands
     * @throws ApiError
     */
    public listApplicationCommands(data: ListApplicationCommandsData): CancelablePromise<ListApplicationCommandsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}/commands',
            path: {
                application_id: data.applicationId
            },
            query: {
                with_localizations: data.withLocalizations
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @returns ApplicationCommandResponse 200 response for bulk_set_application_commands
     * @throws ApiError
     */
    public bulkSetApplicationCommands(data: BulkSetApplicationCommandsData): CancelablePromise<BulkSetApplicationCommandsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/applications/{application_id}/commands',
            path: {
                application_id: data.applicationId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @returns ApplicationCommandResponse 200 response for create_application_command
     * @throws ApiError
     */
    public createApplicationCommand(data: CreateApplicationCommandData): CancelablePromise<CreateApplicationCommandResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/applications/{application_id}/commands',
            path: {
                application_id: data.applicationId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.interactionId
     * @param data.interactionToken
     * @returns void 204 response for create_interaction_response
     * @throws ApiError
     */
    public createInteractionResponse(data: CreateInteractionResponseData): CancelablePromise<CreateInteractionResponseResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/interactions/{interaction_id}/{interaction_token}/callback',
            path: {
                interaction_id: data.interactionId,
                interaction_token: data.interactionToken
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.userId
     * @param data.withMember
     * @returns ThreadMemberResponse 200 response for get_thread_member
     * @throws ApiError
     */
    public getThreadMember(data: GetThreadMemberData): CancelablePromise<GetThreadMemberResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/thread-members/{user_id}',
            path: {
                channel_id: data.channelId,
                user_id: data.userId
            },
            query: {
                with_member: data.withMember
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.userId
     * @returns void 204 response for add_thread_member
     * @throws ApiError
     */
    public addThreadMember(data: AddThreadMemberData): CancelablePromise<AddThreadMemberResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/channels/{channel_id}/thread-members/{user_id}',
            path: {
                channel_id: data.channelId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.userId
     * @returns void 204 response for delete_thread_member
     * @throws ApiError
     */
    public deleteThreadMember(data: DeleteThreadMemberData): CancelablePromise<DeleteThreadMemberResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/thread-members/{user_id}',
            path: {
                channel_id: data.channelId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.withMember
     * @param data.limit
     * @param data.after
     * @returns ThreadMemberResponse 200 response for list_thread_members
     * @throws ApiError
     */
    public listThreadMembers(data: ListThreadMembersData): CancelablePromise<ListThreadMembersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/thread-members',
            path: {
                channel_id: data.channelId
            },
            query: {
                with_member: data.withMember,
                limit: data.limit,
                after: data.after
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @param data.overwriteId
     * @returns void 204 response for set_channel_permission_overwrite
     * @throws ApiError
     */
    public setChannelPermissionOverwrite(data: SetChannelPermissionOverwriteData): CancelablePromise<SetChannelPermissionOverwriteResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/channels/{channel_id}/permissions/{overwrite_id}',
            path: {
                channel_id: data.channelId,
                overwrite_id: data.overwriteId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.overwriteId
     * @returns void 204 response for delete_channel_permission_overwrite
     * @throws ApiError
     */
    public deleteChannelPermissionOverwrite(data: DeleteChannelPermissionOverwriteData): CancelablePromise<DeleteChannelPermissionOverwriteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/permissions/{overwrite_id}',
            path: {
                channel_id: data.channelId,
                overwrite_id: data.overwriteId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @param data.userId
     * @returns unknown 201 response for add_group_dm_user
     * @returns void 204 response for add_group_dm_user
     * @throws ApiError
     */
    public addGroupDmUser(data: AddGroupDmUserData): CancelablePromise<AddGroupDmUserResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/channels/{channel_id}/recipients/{user_id}',
            path: {
                channel_id: data.channelId,
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.userId
     * @returns void 204 response for delete_group_dm_user
     * @throws ApiError
     */
    public deleteGroupDmUser(data: DeleteGroupDmUserData): CancelablePromise<DeleteGroupDmUserResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/recipients/{user_id}',
            path: {
                channel_id: data.channelId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns ChannelFollowerResponse 200 response for follow_channel
     * @throws ApiError
     */
    public followChannel(data: FollowChannelData): CancelablePromise<FollowChannelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/followers',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @returns MessageResponse 200 response for get_message
     * @throws ApiError
     */
    public getMessage(data: GetMessageData): CancelablePromise<GetMessageResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/messages/{message_id}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @returns void 204 response for delete_message
     * @throws ApiError
     */
    public deleteMessage(data: DeleteMessageData): CancelablePromise<DeleteMessageResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/messages/{message_id}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @param data.messageId
     * @returns MessageResponse 200 response for update_message
     * @throws ApiError
     */
    public updateMessage(data: UpdateMessageData): CancelablePromise<UpdateMessageResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/channels/{channel_id}/messages/{message_id}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.around
     * @param data.before
     * @param data.after
     * @param data.limit
     * @returns MessageResponse 200 response for list_messages
     * @throws ApiError
     */
    public listMessages(data: ListMessagesData): CancelablePromise<ListMessagesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/messages',
            path: {
                channel_id: data.channelId
            },
            query: {
                around: data.around,
                before: data.before,
                after: data.after,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns MessageResponse 200 response for create_message
     * @throws ApiError
     */
    public createMessage(data: CreateMessageData): CancelablePromise<CreateMessageResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/messages',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns unknown 200 response for list_channel_webhooks
     * @throws ApiError
     */
    public listChannelWebhooks(data: ListChannelWebhooksData): CancelablePromise<ListChannelWebhooksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/webhooks',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns GuildIncomingWebhookResponse 200 response for create_webhook
     * @throws ApiError
     */
    public createWebhook(data: CreateWebhookData): CancelablePromise<CreateWebhookResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/webhooks',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns unknown 200 response for list_channel_invites
     * @throws ApiError
     */
    public listChannelInvites(data: ListChannelInvitesData): CancelablePromise<ListChannelInvitesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/invites',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns unknown 200 response for create_channel_invite
     * @returns void 204 response for create_channel_invite
     * @throws ApiError
     */
    public createChannelInvite(data: CreateChannelInviteData): CancelablePromise<CreateChannelInviteResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/invites',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns CreatedThreadResponse 201 response for create_thread
     * @throws ApiError
     */
    public createThread(data: CreateThreadData): CancelablePromise<CreateThreadResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/threads',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns TypingIndicatorResponse 200 response for trigger_typing_indicator
     * @returns void 204 response for trigger_typing_indicator
     * @throws ApiError
     */
    public triggerTypingIndicator(data: TriggerTypingIndicatorData): CancelablePromise<TriggerTypingIndicatorResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/channels/{channel_id}/typing',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @returns void 204 response for pin_message
     * @throws ApiError
     */
    public pinMessage(data: PinMessageData): CancelablePromise<PinMessageResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/channels/{channel_id}/pins/{message_id}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @param data.messageId
     * @returns void 204 response for unpin_message
     * @throws ApiError
     */
    public unpinMessage(data: UnpinMessageData): CancelablePromise<UnpinMessageResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}/pins/{message_id}',
            path: {
                channel_id: data.channelId,
                message_id: data.messageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns MessageResponse 200 response for list_pinned_messages
     * @throws ApiError
     */
    public listPinnedMessages(data: ListPinnedMessagesData): CancelablePromise<ListPinnedMessagesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}/pins',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.messageId
     * @param data.threadId
     * @returns MessageResponse 200 response for get_webhook_message
     * @throws ApiError
     */
    public getWebhookMessage(data: GetWebhookMessageData): CancelablePromise<GetWebhookMessageResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken,
                message_id: data.messageId
            },
            query: {
                thread_id: data.threadId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.messageId
     * @param data.threadId
     * @returns void 204 response for delete_webhook_message
     * @throws ApiError
     */
    public deleteWebhookMessage(data: DeleteWebhookMessageData): CancelablePromise<DeleteWebhookMessageResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken,
                message_id: data.messageId
            },
            query: {
                thread_id: data.threadId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.messageId
     * @param data.threadId
     * @returns MessageResponse 200 response for update_webhook_message
     * @throws ApiError
     */
    public updateWebhookMessage(data: UpdateWebhookMessageData): CancelablePromise<UpdateWebhookMessageResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken,
                message_id: data.messageId
            },
            query: {
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.wait
     * @param data.threadId
     * @returns void 204 response for execute_github_compatible_webhook
     * @throws ApiError
     */
    public executeGithubCompatibleWebhook(data: ExecuteGithubCompatibleWebhookData): CancelablePromise<ExecuteGithubCompatibleWebhookResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/webhooks/{webhook_id}/{webhook_token}/github',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            query: {
                wait: data.wait,
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.wait
     * @param data.threadId
     * @returns string 200 response for execute_slack_compatible_webhook
     * @throws ApiError
     */
    public executeSlackCompatibleWebhook(data: ExecuteSlackCompatibleWebhookData): CancelablePromise<ExecuteSlackCompatibleWebhookResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/webhooks/{webhook_id}/{webhook_token}/slack',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            query: {
                wait: data.wait,
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.code
     * @returns GuildTemplateResponse 200 response for get_guild_template
     * @throws ApiError
     */
    public getGuildTemplate(data: GetGuildTemplateData): CancelablePromise<GetGuildTemplateResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/templates/{code}',
            path: {
                code: data.code
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.code
     * @returns GuildResponse 201 response for create_guild_from_template
     * @throws ApiError
     */
    public createGuildFromTemplate(data: CreateGuildFromTemplateData): CancelablePromise<CreateGuildFromTemplateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/templates/{code}',
            path: {
                code: data.code
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns GuildHomeSettingsResponse 200 response for get_guild_new_member_welcome
     * @returns void 204 response for get_guild_new_member_welcome
     * @throws ApiError
     */
    public getGuildNewMemberWelcome(data: GetGuildNewMemberWelcomeData): CancelablePromise<GetGuildNewMemberWelcomeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/new-member-welcome',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.guildScheduledEventId
     * @param data.withUserCount
     * @returns unknown 200 response for get_guild_scheduled_event
     * @throws ApiError
     */
    public getGuildScheduledEvent(data: GetGuildScheduledEventData): CancelablePromise<GetGuildScheduledEventResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}',
            path: {
                guild_id: data.guildId,
                guild_scheduled_event_id: data.guildScheduledEventId
            },
            query: {
                with_user_count: data.withUserCount
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.guildScheduledEventId
     * @returns void 204 response for delete_guild_scheduled_event
     * @throws ApiError
     */
    public deleteGuildScheduledEvent(data: DeleteGuildScheduledEventData): CancelablePromise<DeleteGuildScheduledEventResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}',
            path: {
                guild_id: data.guildId,
                guild_scheduled_event_id: data.guildScheduledEventId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.guildScheduledEventId
     * @returns unknown 200 response for update_guild_scheduled_event
     * @throws ApiError
     */
    public updateGuildScheduledEvent(data: UpdateGuildScheduledEventData): CancelablePromise<UpdateGuildScheduledEventResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}',
            path: {
                guild_id: data.guildId,
                guild_scheduled_event_id: data.guildScheduledEventId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.withUserCount
     * @returns unknown 200 response for list_guild_scheduled_events
     * @throws ApiError
     */
    public listGuildScheduledEvents(data: ListGuildScheduledEventsData): CancelablePromise<ListGuildScheduledEventsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/scheduled-events',
            path: {
                guild_id: data.guildId
            },
            query: {
                with_user_count: data.withUserCount
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns unknown 200 response for create_guild_scheduled_event
     * @throws ApiError
     */
    public createGuildScheduledEvent(data: CreateGuildScheduledEventData): CancelablePromise<CreateGuildScheduledEventResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/scheduled-events',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns GuildWelcomeScreenResponse 200 response for get_guild_welcome_screen
     * @throws ApiError
     */
    public getGuildWelcomeScreen(data: GetGuildWelcomeScreenData): CancelablePromise<GetGuildWelcomeScreenResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/welcome-screen',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildWelcomeScreenResponse 200 response for update_guild_welcome_screen
     * @throws ApiError
     */
    public updateGuildWelcomeScreen(data: UpdateGuildWelcomeScreenData): CancelablePromise<UpdateGuildWelcomeScreenResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/welcome-screen',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.userId
     * @returns void 204 response for update_voice_state
     * @throws ApiError
     */
    public updateVoiceState(data: UpdateVoiceStateData): CancelablePromise<UpdateVoiceStateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/voice-states/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.integrationId
     * @returns void 204 response for delete_guild_integration
     * @throws ApiError
     */
    public deleteGuildIntegration(data: DeleteGuildIntegrationData): CancelablePromise<DeleteGuildIntegrationResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/integrations/{integration_id}',
            path: {
                guild_id: data.guildId,
                integration_id: data.integrationId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns unknown 200 response for list_guild_integrations
     * @throws ApiError
     */
    public listGuildIntegrations(data: ListGuildIntegrationsData): CancelablePromise<ListGuildIntegrationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/integrations',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns WidgetResponse 200 response for get_guild_widget
     * @throws ApiError
     */
    public getGuildWidget(data: GetGuildWidgetData): CancelablePromise<GetGuildWidgetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/widget.json',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns UserGuildOnboardingResponse 200 response for get_guilds_onboarding
     * @throws ApiError
     */
    public getGuildsOnboarding(data: GetGuildsOnboardingData): CancelablePromise<GetGuildsOnboardingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/onboarding',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildOnboardingResponse 200 response for put_guilds_onboarding
     * @throws ApiError
     */
    public putGuildsOnboarding(data: PutGuildsOnboardingData): CancelablePromise<PutGuildsOnboardingResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/guilds/{guild_id}/onboarding',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns VanityURLResponse 200 response for get_guild_vanity_url
     * @throws ApiError
     */
    public getGuildVanityUrl(data: GetGuildVanityUrlData): CancelablePromise<GetGuildVanityUrlResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/vanity-url',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @param data.targetId
     * @param data.actionType
     * @param data.before
     * @param data.after
     * @param data.limit
     * @returns GuildAuditLogResponse 200 response for list_guild_audit_log_entries
     * @throws ApiError
     */
    public listGuildAuditLogEntries(data: ListGuildAuditLogEntriesData): CancelablePromise<ListGuildAuditLogEntriesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/audit-logs',
            path: {
                guild_id: data.guildId
            },
            query: {
                user_id: data.userId,
                target_id: data.targetId,
                action_type: data.actionType,
                before: data.before,
                after: data.after,
                limit: data.limit
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.style
     * @returns string 200 response for get_guild_widget_png
     * @throws ApiError
     */
    public getGuildWidgetPng(data: GetGuildWidgetPngData): CancelablePromise<GetGuildWidgetPngResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/widget.png',
            path: {
                guild_id: data.guildId
            },
            query: {
                style: data.style
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.code
     * @returns GuildTemplateResponse 200 response for sync_guild_template
     * @throws ApiError
     */
    public syncGuildTemplate(data: SyncGuildTemplateData): CancelablePromise<SyncGuildTemplateResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/guilds/{guild_id}/templates/{code}',
            path: {
                guild_id: data.guildId,
                code: data.code
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.code
     * @returns GuildTemplateResponse 200 response for delete_guild_template
     * @throws ApiError
     */
    public deleteGuildTemplate(data: DeleteGuildTemplateData): CancelablePromise<DeleteGuildTemplateResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/templates/{code}',
            path: {
                guild_id: data.guildId,
                code: data.code
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.code
     * @returns GuildTemplateResponse 200 response for update_guild_template
     * @throws ApiError
     */
    public updateGuildTemplate(data: UpdateGuildTemplateData): CancelablePromise<UpdateGuildTemplateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/templates/{code}',
            path: {
                guild_id: data.guildId,
                code: data.code
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns GuildTemplateResponse 200 response for list_guild_templates
     * @throws ApiError
     */
    public listGuildTemplates(data: ListGuildTemplatesData): CancelablePromise<ListGuildTemplatesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/templates',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildTemplateResponse 200 response for create_guild_template
     * @throws ApiError
     */
    public createGuildTemplate(data: CreateGuildTemplateData): CancelablePromise<CreateGuildTemplateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/templates',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.stickerId
     * @returns GuildStickerResponse 200 response for get_guild_sticker
     * @throws ApiError
     */
    public getGuildSticker(data: GetGuildStickerData): CancelablePromise<GetGuildStickerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/stickers/{sticker_id}',
            path: {
                guild_id: data.guildId,
                sticker_id: data.stickerId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.stickerId
     * @returns void 204 response for delete_guild_sticker
     * @throws ApiError
     */
    public deleteGuildSticker(data: DeleteGuildStickerData): CancelablePromise<DeleteGuildStickerResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/stickers/{sticker_id}',
            path: {
                guild_id: data.guildId,
                sticker_id: data.stickerId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.stickerId
     * @returns GuildStickerResponse 200 response for update_guild_sticker
     * @throws ApiError
     */
    public updateGuildSticker(data: UpdateGuildStickerData): CancelablePromise<UpdateGuildStickerResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/stickers/{sticker_id}',
            path: {
                guild_id: data.guildId,
                sticker_id: data.stickerId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns BulkBanUsersResponse 200 response for bulk_ban_users_from_guild
     * @throws ApiError
     */
    public bulkBanUsersFromGuild(data: BulkBanUsersFromGuildData): CancelablePromise<BulkBanUsersFromGuildResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/bulk-ban',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns GuildStickerResponse 200 response for list_guild_stickers
     * @throws ApiError
     */
    public listGuildStickers(data: ListGuildStickersData): CancelablePromise<ListGuildStickersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/stickers',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.formData
     * @param data.guildId
     * @returns GuildStickerResponse 201 response for create_guild_sticker
     * @throws ApiError
     */
    public createGuildSticker(data: CreateGuildStickerData): CancelablePromise<CreateGuildStickerResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/stickers',
            path: {
                guild_id: data.guildId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns unknown 200 response for get_guild_webhooks
     * @throws ApiError
     */
    public getGuildWebhooks(data: GetGuildWebhooksData): CancelablePromise<GetGuildWebhooksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/webhooks',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns unknown 200 response for list_guild_channels
     * @throws ApiError
     */
    public listGuildChannels(data: ListGuildChannelsData): CancelablePromise<ListGuildChannelsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/channels',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildChannelResponse 201 response for create_guild_channel
     * @throws ApiError
     */
    public createGuildChannel(data: CreateGuildChannelData): CancelablePromise<CreateGuildChannelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/channels',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns void 204 response for bulk_update_guild_channels
     * @throws ApiError
     */
    public bulkUpdateGuildChannels(data: BulkUpdateGuildChannelsData): CancelablePromise<BulkUpdateGuildChannelsResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/channels',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @returns GuildMemberResponse 200 response for get_guild_member
     * @throws ApiError
     */
    public getGuildMember(data: GetGuildMemberData): CancelablePromise<GetGuildMemberResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/members/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.userId
     * @returns GuildMemberResponse 201 response for add_guild_member
     * @returns void 204 response for add_guild_member
     * @throws ApiError
     */
    public addGuildMember(data: AddGuildMemberData): CancelablePromise<AddGuildMemberResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/guilds/{guild_id}/members/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @returns void 204 response for delete_guild_member
     * @throws ApiError
     */
    public deleteGuildMember(data: DeleteGuildMemberData): CancelablePromise<DeleteGuildMemberResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/members/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.userId
     * @returns GuildMemberResponse 200 response for update_guild_member
     * @returns void 204 response for update_guild_member
     * @throws ApiError
     */
    public updateGuildMember(data: UpdateGuildMemberData): CancelablePromise<UpdateGuildMemberResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/members/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.limit
     * @param data.after
     * @returns GuildMemberResponse 200 response for list_guild_members
     * @throws ApiError
     */
    public listGuildMembers(data: ListGuildMembersData): CancelablePromise<ListGuildMembersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/members',
            path: {
                guild_id: data.guildId
            },
            query: {
                limit: data.limit,
                after: data.after
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns GuildPreviewResponse 200 response for get_guild_preview
     * @throws ApiError
     */
    public getGuildPreview(data: GetGuildPreviewData): CancelablePromise<GetGuildPreviewResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/preview',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns unknown 200 response for list_guild_invites
     * @throws ApiError
     */
    public listGuildInvites(data: ListGuildInvitesData): CancelablePromise<ListGuildInvitesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/invites',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns VoiceRegionResponse 200 response for list_guild_voice_regions
     * @throws ApiError
     */
    public listGuildVoiceRegions(data: ListGuildVoiceRegionsData): CancelablePromise<ListGuildVoiceRegionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/regions',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.emojiId
     * @returns EmojiResponse 200 response for get_guild_emoji
     * @throws ApiError
     */
    public getGuildEmoji(data: GetGuildEmojiData): CancelablePromise<GetGuildEmojiResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/emojis/{emoji_id}',
            path: {
                guild_id: data.guildId,
                emoji_id: data.emojiId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.emojiId
     * @returns void 204 response for delete_guild_emoji
     * @throws ApiError
     */
    public deleteGuildEmoji(data: DeleteGuildEmojiData): CancelablePromise<DeleteGuildEmojiResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/emojis/{emoji_id}',
            path: {
                guild_id: data.guildId,
                emoji_id: data.emojiId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.emojiId
     * @returns EmojiResponse 200 response for update_guild_emoji
     * @throws ApiError
     */
    public updateGuildEmoji(data: UpdateGuildEmojiData): CancelablePromise<UpdateGuildEmojiResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/emojis/{emoji_id}',
            path: {
                guild_id: data.guildId,
                emoji_id: data.emojiId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns EmojiResponse 200 response for list_guild_emojis
     * @throws ApiError
     */
    public listGuildEmojis(data: ListGuildEmojisData): CancelablePromise<ListGuildEmojisResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/emojis',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns EmojiResponse 201 response for create_guild_emoji
     * @throws ApiError
     */
    public createGuildEmoji(data: CreateGuildEmojiData): CancelablePromise<CreateGuildEmojiResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/emojis',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns WidgetSettingsResponse 200 response for get_guild_widget_settings
     * @throws ApiError
     */
    public getGuildWidgetSettings(data: GetGuildWidgetSettingsData): CancelablePromise<GetGuildWidgetSettingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/widget',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns WidgetSettingsResponse 200 response for update_guild_widget_settings
     * @throws ApiError
     */
    public updateGuildWidgetSettings(data: UpdateGuildWidgetSettingsData): CancelablePromise<UpdateGuildWidgetSettingsResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/widget',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.roleId
     * @returns void 204 response for delete_guild_role
     * @throws ApiError
     */
    public deleteGuildRole(data: DeleteGuildRoleData): CancelablePromise<DeleteGuildRoleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/roles/{role_id}',
            path: {
                guild_id: data.guildId,
                role_id: data.roleId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.roleId
     * @returns GuildRoleResponse 200 response for update_guild_role
     * @throws ApiError
     */
    public updateGuildRole(data: UpdateGuildRoleData): CancelablePromise<UpdateGuildRoleResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/roles/{role_id}',
            path: {
                guild_id: data.guildId,
                role_id: data.roleId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns GuildRoleResponse 200 response for list_guild_roles
     * @throws ApiError
     */
    public listGuildRoles(data: ListGuildRolesData): CancelablePromise<ListGuildRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/roles',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildRoleResponse 200 response for create_guild_role
     * @throws ApiError
     */
    public createGuildRole(data: CreateGuildRoleData): CancelablePromise<CreateGuildRoleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/roles',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildRoleResponse 200 response for bulk_update_guild_roles
     * @throws ApiError
     */
    public bulkUpdateGuildRoles(data: BulkUpdateGuildRolesData): CancelablePromise<BulkUpdateGuildRolesResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}/roles',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.days
     * @param data.includeRoles
     * @returns GuildPruneResponse 200 response for preview_prune_guild
     * @throws ApiError
     */
    public previewPruneGuild(data: PreviewPruneGuildData): CancelablePromise<PreviewPruneGuildResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/prune',
            path: {
                guild_id: data.guildId
            },
            query: {
                days: data.days,
                include_roles: data.includeRoles
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildPruneResponse 200 response for prune_guild
     * @throws ApiError
     */
    public pruneGuild(data: PruneGuildData): CancelablePromise<PruneGuildResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/prune',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @returns GuildBanResponse 200 response for get_guild_ban
     * @throws ApiError
     */
    public getGuildBan(data: GetGuildBanData): CancelablePromise<GetGuildBanResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/bans/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @param data.userId
     * @returns void 204 response for ban_user_from_guild
     * @throws ApiError
     */
    public banUserFromGuild(data: BanUserFromGuildData): CancelablePromise<BanUserFromGuildResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/guilds/{guild_id}/bans/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.userId
     * @returns void 204 response for unban_user_from_guild
     * @throws ApiError
     */
    public unbanUserFromGuild(data: UnbanUserFromGuildData): CancelablePromise<UnbanUserFromGuildResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}/bans/{user_id}',
            path: {
                guild_id: data.guildId,
                user_id: data.userId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.limit
     * @param data.before
     * @param data.after
     * @returns GuildBanResponse 200 response for list_guild_bans
     * @throws ApiError
     */
    public listGuildBans(data: ListGuildBansData): CancelablePromise<ListGuildBansResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}/bans',
            path: {
                guild_id: data.guildId
            },
            query: {
                limit: data.limit,
                before: data.before,
                after: data.after
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildMFALevelResponse 200 response for set_guild_mfa_level
     * @throws ApiError
     */
    public setGuildMfaLevel(data: SetGuildMfaLevelData): CancelablePromise<SetGuildMfaLevelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/guilds/{guild_id}/mfa',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns StageInstanceResponse 200 response for get_stage_instance
     * @throws ApiError
     */
    public getStageInstance(data: GetStageInstanceData): CancelablePromise<GetStageInstanceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/stage-instances/{channel_id}',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns void 204 response for delete_stage_instance
     * @throws ApiError
     */
    public deleteStageInstance(data: DeleteStageInstanceData): CancelablePromise<DeleteStageInstanceResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/stage-instances/{channel_id}',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns StageInstanceResponse 200 response for update_stage_instance
     * @throws ApiError
     */
    public updateStageInstance(data: UpdateStageInstanceData): CancelablePromise<UpdateStageInstanceResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/stage-instances/{channel_id}',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.applicationId
     * @returns PrivateApplicationResponse 200 response for get_application
     * @throws ApiError
     */
    public getApplication(data: GetApplicationData): CancelablePromise<GetApplicationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/applications/{application_id}',
            path: {
                application_id: data.applicationId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.applicationId
     * @returns PrivateApplicationResponse 200 response for update_application
     * @throws ApiError
     */
    public updateApplication(data: UpdateApplicationData): CancelablePromise<UpdateApplicationResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/applications/{application_id}',
            path: {
                application_id: data.applicationId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @param data.webhookToken
     * @returns unknown 200 response for get_webhook_by_token
     * @throws ApiError
     */
    public getWebhookByToken(data: GetWebhookByTokenData): CancelablePromise<GetWebhookByTokenResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/webhooks/{webhook_id}/{webhook_token}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @param data.webhookToken
     * @param data.wait
     * @param data.threadId
     * @returns MessageResponse 200 response for execute_webhook
     * @returns void 204 response for execute_webhook
     * @throws ApiError
     */
    public executeWebhook(data: ExecuteWebhookData): CancelablePromise<ExecuteWebhookResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/webhooks/{webhook_id}/{webhook_token}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            query: {
                wait: data.wait,
                thread_id: data.threadId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @param data.webhookToken
     * @returns void 204 response for delete_webhook_by_token
     * @throws ApiError
     */
    public deleteWebhookByToken(data: DeleteWebhookByTokenData): CancelablePromise<DeleteWebhookByTokenResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/webhooks/{webhook_id}/{webhook_token}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @param data.webhookToken
     * @returns unknown 200 response for update_webhook_by_token
     * @throws ApiError
     */
    public updateWebhookByToken(data: UpdateWebhookByTokenData): CancelablePromise<UpdateWebhookByTokenResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/webhooks/{webhook_id}/{webhook_token}',
            path: {
                webhook_id: data.webhookId,
                webhook_token: data.webhookToken
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.stickerId
     * @returns unknown 200 response for get_sticker
     * @throws ApiError
     */
    public getSticker(data: GetStickerData): CancelablePromise<GetStickerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/stickers/{sticker_id}',
            path: {
                sticker_id: data.stickerId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @returns unknown 200 response for get_webhook
     * @throws ApiError
     */
    public getWebhook(data: GetWebhookData): CancelablePromise<GetWebhookResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/webhooks/{webhook_id}',
            path: {
                webhook_id: data.webhookId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.webhookId
     * @returns void 204 response for delete_webhook
     * @throws ApiError
     */
    public deleteWebhook(data: DeleteWebhookData): CancelablePromise<DeleteWebhookResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/webhooks/{webhook_id}',
            path: {
                webhook_id: data.webhookId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.webhookId
     * @returns unknown 200 response for update_webhook
     * @throws ApiError
     */
    public updateWebhook(data: UpdateWebhookData): CancelablePromise<UpdateWebhookResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/webhooks/{webhook_id}',
            path: {
                webhook_id: data.webhookId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns unknown 200 response for get_channel
     * @throws ApiError
     */
    public getChannel(data: GetChannelData): CancelablePromise<GetChannelResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/channels/{channel_id}',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.channelId
     * @returns unknown 200 response for delete_channel
     * @throws ApiError
     */
    public deleteChannel(data: DeleteChannelData): CancelablePromise<DeleteChannelResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/channels/{channel_id}',
            path: {
                channel_id: data.channelId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.channelId
     * @returns unknown 200 response for update_channel
     * @throws ApiError
     */
    public updateChannel(data: UpdateChannelData): CancelablePromise<UpdateChannelResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/channels/{channel_id}',
            path: {
                channel_id: data.channelId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.code
     * @param data.withCounts
     * @param data.guildScheduledEventId
     * @returns unknown 200 response for invite_resolve
     * @throws ApiError
     */
    public inviteResolve(data: InviteResolveData): CancelablePromise<InviteResolveResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invites/{code}',
            path: {
                code: data.code
            },
            query: {
                with_counts: data.withCounts,
                guild_scheduled_event_id: data.guildScheduledEventId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.code
     * @returns unknown 200 response for invite_revoke
     * @throws ApiError
     */
    public inviteRevoke(data: InviteRevokeData): CancelablePromise<InviteRevokeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/invites/{code}',
            path: {
                code: data.code
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @param data.withCounts
     * @returns GuildWithCountsResponse 200 response for get_guild
     * @throws ApiError
     */
    public getGuild(data: GetGuildData): CancelablePromise<GetGuildResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/guilds/{guild_id}',
            path: {
                guild_id: data.guildId
            },
            query: {
                with_counts: data.withCounts
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.guildId
     * @returns void 204 response for delete_guild
     * @throws ApiError
     */
    public deleteGuild(data: DeleteGuildData): CancelablePromise<DeleteGuildResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/guilds/{guild_id}',
            path: {
                guild_id: data.guildId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.guildId
     * @returns GuildResponse 200 response for update_guild
     * @throws ApiError
     */
    public updateGuild(data: UpdateGuildData): CancelablePromise<UpdateGuildResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/guilds/{guild_id}',
            path: {
                guild_id: data.guildId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userId
     * @returns UserResponse 200 response for get_user
     * @throws ApiError
     */
    public getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/{user_id}',
            path: {
                user_id: data.userId
            }
        });
    }
    
}