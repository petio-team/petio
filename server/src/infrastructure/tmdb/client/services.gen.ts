// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  AccountAddFavoriteData,
  AccountAddFavoriteResponse,
  AccountAddToWatchlistData,
  AccountAddToWatchlistResponse,
  AccountDetailsData,
  AccountDetailsResponse,
  AccountFavoriteTvData,
  AccountFavoriteTvResponse,
  AccountGetFavoritesData,
  AccountGetFavoritesResponse,
  AccountListsData,
  AccountListsResponse,
  AccountRatedMoviesData,
  AccountRatedMoviesResponse,
  AccountRatedTvData,
  AccountRatedTvEpisodesData,
  AccountRatedTvEpisodesResponse,
  AccountRatedTvResponse,
  AccountWatchlistMoviesData,
  AccountWatchlistMoviesResponse,
  AccountWatchlistTvData,
  AccountWatchlistTvResponse,
  AlternativeNamesCopyData,
  AlternativeNamesCopyResponse,
  AuthenticationCreateGuestSessionResponse,
  AuthenticationCreateRequestTokenResponse,
  AuthenticationCreateSessionData,
  AuthenticationCreateSessionFromLoginData,
  AuthenticationCreateSessionFromLoginResponse,
  AuthenticationCreateSessionFromV4TokenData,
  AuthenticationCreateSessionFromV4TokenResponse,
  AuthenticationCreateSessionResponse,
  AuthenticationDeleteSessionData,
  AuthenticationDeleteSessionResponse,
  AuthenticationValidateKeyResponse,
  CertificationMovieListResponse,
  CertificationsTvListResponse,
  ChangesMovieListData,
  ChangesMovieListResponse,
  ChangesPeopleListData,
  ChangesPeopleListResponse,
  ChangesTvListData,
  ChangesTvListResponse,
  CollectionDetailsData,
  CollectionDetailsResponse,
  CollectionImagesData,
  CollectionImagesResponse,
  CollectionTranslationsData,
  CollectionTranslationsResponse,
  CompanyAlternativeNamesData,
  CompanyAlternativeNamesResponse,
  CompanyDetailsData,
  CompanyDetailsResponse,
  CompanyImagesData,
  CompanyImagesResponse,
  ConfigurationCountriesData,
  ConfigurationCountriesResponse,
  ConfigurationDetailsResponse,
  ConfigurationJobsResponse,
  ConfigurationLanguagesResponse,
  ConfigurationPrimaryTranslationsResponse,
  ConfigurationTimezonesResponse,
  CreditDetailsData,
  CreditDetailsResponse,
  DetailsCopyData,
  DetailsCopyResponse,
  DiscoverMovieData,
  DiscoverMovieResponse,
  DiscoverTvData,
  DiscoverTvResponse,
  FindByIdData,
  FindByIdResponse,
  GenreMovieListData,
  GenreMovieListResponse,
  GenreTvListData,
  GenreTvListResponse,
  GuestSessionRatedMoviesData,
  GuestSessionRatedMoviesResponse,
  GuestSessionRatedTvData,
  GuestSessionRatedTvEpisodesData,
  GuestSessionRatedTvEpisodesResponse,
  GuestSessionRatedTvResponse,
  KeywordDetailsData,
  KeywordDetailsResponse,
  KeywordMoviesData,
  KeywordMoviesResponse,
  ListAddMovieData,
  ListAddMovieResponse,
  ListCheckItemStatusData,
  ListCheckItemStatusResponse,
  ListClearData,
  ListClearResponse,
  ListCreateData,
  ListCreateResponse,
  ListDeleteData,
  ListDeleteResponse,
  ListDetailsData,
  ListDetailsResponse,
  ListRemoveMovieData,
  ListRemoveMovieResponse,
  ListsCopyData,
  ListsCopyResponse,
  MovieAccountStatesData,
  MovieAccountStatesResponse,
  MovieAddRatingData,
  MovieAddRatingResponse,
  MovieAlternativeTitlesData,
  MovieAlternativeTitlesResponse,
  MovieChangesData,
  MovieChangesResponse,
  MovieCreditsData,
  MovieCreditsResponse,
  MovieDeleteRatingData,
  MovieDeleteRatingResponse,
  MovieDetailsData,
  MovieDetailsResponse,
  MovieExternalIdsData,
  MovieExternalIdsResponse,
  MovieImagesData,
  MovieImagesResponse,
  MovieKeywordsData,
  MovieKeywordsResponse,
  MovieLatestIdResponse,
  MovieListsData,
  MovieListsResponse,
  MovieNowPlayingListData,
  MovieNowPlayingListResponse,
  MoviePopularListData,
  MoviePopularListResponse,
  MovieRecommendationsData,
  MovieRecommendationsResponse,
  MovieReleaseDatesData,
  MovieReleaseDatesResponse,
  MovieReviewsData,
  MovieReviewsResponse,
  MovieSimilarData,
  MovieSimilarResponse,
  MovieTopRatedListData,
  MovieTopRatedListResponse,
  MovieTranslationsData,
  MovieTranslationsResponse,
  MovieUpcomingListData,
  MovieUpcomingListResponse,
  MovieVideosData,
  MovieVideosResponse,
  MovieWatchProvidersData,
  MovieWatchProvidersResponse,
  NetworkDetailsData,
  NetworkDetailsResponse,
  PersonChangesData,
  PersonChangesResponse,
  PersonCombinedCreditsData,
  PersonCombinedCreditsResponse,
  PersonDetailsData,
  PersonDetailsResponse,
  PersonExternalIdsData,
  PersonExternalIdsResponse,
  PersonImagesData,
  PersonImagesResponse,
  PersonLatestIdResponse,
  PersonMovieCreditsData,
  PersonMovieCreditsResponse,
  PersonPopularListData,
  PersonPopularListResponse,
  PersonTaggedImagesData,
  PersonTaggedImagesResponse,
  PersonTvCreditsData,
  PersonTvCreditsResponse,
  ReviewDetailsData,
  ReviewDetailsResponse,
  SearchCollectionData,
  SearchCollectionResponse,
  SearchCompanyData,
  SearchCompanyResponse,
  SearchKeywordData,
  SearchKeywordResponse,
  SearchMovieData,
  SearchMovieResponse,
  SearchMultiData,
  SearchMultiResponse,
  SearchPersonData,
  SearchPersonResponse,
  SearchTvData,
  SearchTvResponse,
  TranslationsData,
  TranslationsResponse,
  TrendingAllData,
  TrendingAllResponse,
  TrendingMoviesData,
  TrendingMoviesResponse,
  TrendingPeopleData,
  TrendingPeopleResponse,
  TrendingTvData,
  TrendingTvResponse,
  TvEpisodeAccountStatesData,
  TvEpisodeAccountStatesResponse,
  TvEpisodeAddRatingData,
  TvEpisodeAddRatingResponse,
  TvEpisodeChangesByIdData,
  TvEpisodeChangesByIdResponse,
  TvEpisodeCreditsData,
  TvEpisodeCreditsResponse,
  TvEpisodeDeleteRatingData,
  TvEpisodeDeleteRatingResponse,
  TvEpisodeDetailsData,
  TvEpisodeDetailsResponse,
  TvEpisodeExternalIdsData,
  TvEpisodeExternalIdsResponse,
  TvEpisodeGroupDetailsData,
  TvEpisodeGroupDetailsResponse,
  TvEpisodeImagesData,
  TvEpisodeImagesResponse,
  TvEpisodeTranslationsData,
  TvEpisodeTranslationsResponse,
  TvEpisodeVideosData,
  TvEpisodeVideosResponse,
  TvSeasonAccountStatesData,
  TvSeasonAccountStatesResponse,
  TvSeasonAggregateCreditsData,
  TvSeasonAggregateCreditsResponse,
  TvSeasonChangesByIdData,
  TvSeasonChangesByIdResponse,
  TvSeasonCreditsData,
  TvSeasonCreditsResponse,
  TvSeasonDetailsData,
  TvSeasonDetailsResponse,
  TvSeasonExternalIdsData,
  TvSeasonExternalIdsResponse,
  TvSeasonImagesData,
  TvSeasonImagesResponse,
  TvSeasonTranslationsData,
  TvSeasonTranslationsResponse,
  TvSeasonVideosData,
  TvSeasonVideosResponse,
  TvSeasonWatchProvidersData,
  TvSeasonWatchProvidersResponse,
  TvSeriesAccountStatesData,
  TvSeriesAccountStatesResponse,
  TvSeriesAddRatingData,
  TvSeriesAddRatingResponse,
  TvSeriesAggregateCreditsData,
  TvSeriesAggregateCreditsResponse,
  TvSeriesAiringTodayListData,
  TvSeriesAiringTodayListResponse,
  TvSeriesAlternativeTitlesData,
  TvSeriesAlternativeTitlesResponse,
  TvSeriesChangesData,
  TvSeriesChangesResponse,
  TvSeriesContentRatingsData,
  TvSeriesContentRatingsResponse,
  TvSeriesCreditsData,
  TvSeriesCreditsResponse,
  TvSeriesDeleteRatingData,
  TvSeriesDeleteRatingResponse,
  TvSeriesDetailsData,
  TvSeriesDetailsResponse,
  TvSeriesEpisodeGroupsData,
  TvSeriesEpisodeGroupsResponse,
  TvSeriesExternalIdsData,
  TvSeriesExternalIdsResponse,
  TvSeriesImagesData,
  TvSeriesImagesResponse,
  TvSeriesKeywordsData,
  TvSeriesKeywordsResponse,
  TvSeriesLatestIdResponse,
  TvSeriesOnTheAirListData,
  TvSeriesOnTheAirListResponse,
  TvSeriesPopularListData,
  TvSeriesPopularListResponse,
  TvSeriesRecommendationsData,
  TvSeriesRecommendationsResponse,
  TvSeriesReviewsData,
  TvSeriesReviewsResponse,
  TvSeriesScreenedTheatricallyData,
  TvSeriesScreenedTheatricallyResponse,
  TvSeriesSimilarData,
  TvSeriesSimilarResponse,
  TvSeriesTopRatedListData,
  TvSeriesTopRatedListResponse,
  TvSeriesTranslationsData,
  TvSeriesTranslationsResponse,
  TvSeriesVideosData,
  TvSeriesVideosResponse,
  TvSeriesWatchProvidersData,
  TvSeriesWatchProvidersResponse,
  WatchProviderTvListData,
  WatchProviderTvListResponse,
  WatchProvidersAvailableRegionsData,
  WatchProvidersAvailableRegionsResponse,
  WatchProvidersMovieListData,
  WatchProvidersMovieListResponse,
} from './types.gen';

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Movie
   * Search for movies by their original, translated and alternative titles.
   * @param data The data for the request.
   * @param data.query
   * @param data.includeAdult
   * @param data.language
   * @param data.primaryReleaseYear
   * @param data.page
   * @param data.region
   * @param data.year
   * @returns unknown 200
   * @throws ApiError
   */
  public searchMovie(
    data: SearchMovieData,
  ): CancelablePromise<SearchMovieResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/movie',
      query: {
        query: data.query,
        include_adult: data.includeAdult,
        language: data.language,
        primary_release_year: data.primaryReleaseYear,
        page: data.page,
        region: data.region,
        year: data.year,
      },
    });
  }

  /**
   * Movie
   * Find movies using over 30 filters and sort options.
   * @param data The data for the request.
   * @param data.certification use in conjunction with `region`
   * @param data.certificationGte use in conjunction with `region`
   * @param data.certificationLte use in conjunction with `region`
   * @param data.certificationCountry use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters
   * @param data.includeAdult
   * @param data.includeVideo
   * @param data.language
   * @param data.page
   * @param data.primaryReleaseYear
   * @param data.primaryReleaseDateGte
   * @param data.primaryReleaseDateLte
   * @param data.region
   * @param data.releaseDateGte
   * @param data.releaseDateLte
   * @param data.sortBy
   * @param data.voteAverageGte
   * @param data.voteAverageLte
   * @param data.voteCountGte
   * @param data.voteCountLte
   * @param data.watchRegion use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
   * @param data.withCast can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withCompanies can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withCrew can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withGenres can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withKeywords can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withOriginCountry
   * @param data.withOriginalLanguage
   * @param data.withPeople can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withReleaseType possible values are: [1, 2, 3, 4, 5, 6] can be a comma (`AND`) or pipe (`OR`) separated query, can be used in conjunction with `region`
   * @param data.withRuntimeGte
   * @param data.withRuntimeLte
   * @param data.withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withWatchProviders use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withoutCompanies
   * @param data.withoutGenres
   * @param data.withoutKeywords
   * @param data.withoutWatchProviders
   * @param data.year
   * @returns unknown 200
   * @throws ApiError
   */
  public discoverMovie(
    data: DiscoverMovieData = {},
  ): CancelablePromise<DiscoverMovieResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/discover/movie',
      query: {
        certification: data.certification,
        'certification.gte': data.certificationGte,
        'certification.lte': data.certificationLte,
        certification_country: data.certificationCountry,
        include_adult: data.includeAdult,
        include_video: data.includeVideo,
        language: data.language,
        page: data.page,
        primary_release_year: data.primaryReleaseYear,
        'primary_release_date.gte': data.primaryReleaseDateGte,
        'primary_release_date.lte': data.primaryReleaseDateLte,
        region: data.region,
        'release_date.gte': data.releaseDateGte,
        'release_date.lte': data.releaseDateLte,
        sort_by: data.sortBy,
        'vote_average.gte': data.voteAverageGte,
        'vote_average.lte': data.voteAverageLte,
        'vote_count.gte': data.voteCountGte,
        'vote_count.lte': data.voteCountLte,
        watch_region: data.watchRegion,
        with_cast: data.withCast,
        with_companies: data.withCompanies,
        with_crew: data.withCrew,
        with_genres: data.withGenres,
        with_keywords: data.withKeywords,
        with_origin_country: data.withOriginCountry,
        with_original_language: data.withOriginalLanguage,
        with_people: data.withPeople,
        with_release_type: data.withReleaseType,
        'with_runtime.gte': data.withRuntimeGte,
        'with_runtime.lte': data.withRuntimeLte,
        with_watch_monetization_types: data.withWatchMonetizationTypes,
        with_watch_providers: data.withWatchProviders,
        without_companies: data.withoutCompanies,
        without_genres: data.withoutGenres,
        without_keywords: data.withoutKeywords,
        without_watch_providers: data.withoutWatchProviders,
        year: data.year,
      },
    });
  }

  /**
   * Details
   * Get the top level details of a movie by ID.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.appendToResponse comma separated list of endpoints within this namespace, 20 items max
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public movieDetails(
    data: MovieDetailsData,
  ): CancelablePromise<MovieDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}',
      path: {
        movie_id: data.movieId,
      },
      query: {
        append_to_response: data.appendToResponse,
        language: data.language,
      },
    });
  }

  /**
   * Details
   * Get the details of a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.appendToResponse comma separated list of endpoints within this namespace, 20 items max
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesDetails(
    data: TvSeriesDetailsData,
  ): CancelablePromise<TvSeriesDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}',
      path: {
        series_id: data.seriesId,
      },
      query: {
        append_to_response: data.appendToResponse,
        language: data.language,
      },
    });
  }

  /**
   * TV
   * Search for TV shows by their original, translated and also known as names.
   * @param data The data for the request.
   * @param data.query
   * @param data.firstAirDateYear Search only the first air date. Valid values are: 1000..9999
   * @param data.includeAdult
   * @param data.language
   * @param data.page
   * @param data.year Search the first air date and all episode air dates. Valid values are: 1000..9999
   * @returns unknown 200
   * @throws ApiError
   */
  public searchTv(data: SearchTvData): CancelablePromise<SearchTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/tv',
      query: {
        query: data.query,
        first_air_date_year: data.firstAirDateYear,
        include_adult: data.includeAdult,
        language: data.language,
        page: data.page,
        year: data.year,
      },
    });
  }

  /**
   * Multi
   * Use multi search when you want to search for movies, TV shows and people in a single request.
   * @param data The data for the request.
   * @param data.query
   * @param data.includeAdult
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public searchMulti(
    data: SearchMultiData,
  ): CancelablePromise<SearchMultiResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/multi',
      query: {
        query: data.query,
        include_adult: data.includeAdult,
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Person
   * Search for people by their name and also known as names.
   * @param data The data for the request.
   * @param data.query
   * @param data.includeAdult
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public searchPerson(
    data: SearchPersonData,
  ): CancelablePromise<SearchPersonResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/person',
      query: {
        query: data.query,
        include_adult: data.includeAdult,
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Details
   * Query the API configuration details.
   * @returns unknown 200
   * @throws ApiError
   */
  public configurationDetails(): CancelablePromise<ConfigurationDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/configuration',
    });
  }

  /**
   * Details
   * Query the details of a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.appendToResponse comma separated list of endpoints within this namespace, 20 items max
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonDetails(
    data: TvSeasonDetailsData,
  ): CancelablePromise<TvSeasonDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        append_to_response: data.appendToResponse,
        language: data.language,
      },
    });
  }

  /**
   * Details
   * Query the details of a TV episode.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.appendToResponse comma separated list of endpoints within this namespace, 20 items max
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeDetails(
    data: TvEpisodeDetailsData,
  ): CancelablePromise<TvEpisodeDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      query: {
        append_to_response: data.appendToResponse,
        language: data.language,
      },
    });
  }

  /**
   * TV
   * Find TV shows using over 30 filters and sort options.
   * @param data The data for the request.
   * @param data.airDateGte
   * @param data.airDateLte
   * @param data.firstAirDateYear
   * @param data.firstAirDateGte
   * @param data.firstAirDateLte
   * @param data.includeAdult
   * @param data.includeNullFirstAirDates
   * @param data.language
   * @param data.page
   * @param data.screenedTheatrically
   * @param data.sortBy
   * @param data.timezone
   * @param data.voteAverageGte
   * @param data.voteAverageLte
   * @param data.voteCountGte
   * @param data.voteCountLte
   * @param data.watchRegion use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
   * @param data.withCompanies can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withGenres can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withKeywords can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withNetworks
   * @param data.withOriginCountry
   * @param data.withOriginalLanguage
   * @param data.withRuntimeGte
   * @param data.withRuntimeLte
   * @param data.withStatus possible values are: [0, 1, 2, 3, 4, 5], can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withWatchProviders use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
   * @param data.withoutCompanies
   * @param data.withoutGenres
   * @param data.withoutKeywords
   * @param data.withoutWatchProviders
   * @param data.withType possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (`AND`) or pipe (`OR`) separated query
   * @returns unknown 200
   * @throws ApiError
   */
  public discoverTv(
    data: DiscoverTvData = {},
  ): CancelablePromise<DiscoverTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/discover/tv',
      query: {
        'air_date.gte': data.airDateGte,
        'air_date.lte': data.airDateLte,
        first_air_date_year: data.firstAirDateYear,
        'first_air_date.gte': data.firstAirDateGte,
        'first_air_date.lte': data.firstAirDateLte,
        include_adult: data.includeAdult,
        include_null_first_air_dates: data.includeNullFirstAirDates,
        language: data.language,
        page: data.page,
        screened_theatrically: data.screenedTheatrically,
        sort_by: data.sortBy,
        timezone: data.timezone,
        'vote_average.gte': data.voteAverageGte,
        'vote_average.lte': data.voteAverageLte,
        'vote_count.gte': data.voteCountGte,
        'vote_count.lte': data.voteCountLte,
        watch_region: data.watchRegion,
        with_companies: data.withCompanies,
        with_genres: data.withGenres,
        with_keywords: data.withKeywords,
        with_networks: data.withNetworks,
        with_origin_country: data.withOriginCountry,
        with_original_language: data.withOriginalLanguage,
        'with_runtime.gte': data.withRuntimeGte,
        'with_runtime.lte': data.withRuntimeLte,
        with_status: data.withStatus,
        with_watch_monetization_types: data.withWatchMonetizationTypes,
        with_watch_providers: data.withWatchProviders,
        without_companies: data.withoutCompanies,
        without_genres: data.withoutGenres,
        without_keywords: data.withoutKeywords,
        without_watch_providers: data.withoutWatchProviders,
        with_type: data.withType,
      },
    });
  }

  /**
   * Images
   * Get the images that belong to a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public movieImages(
    data: MovieImagesData,
  ): CancelablePromise<MovieImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/images',
      path: {
        movie_id: data.movieId,
      },
      query: {
        include_image_language: data.includeImageLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Images
   * Get the images that belong to a TV series.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesImages(
    data: TvSeriesImagesData,
  ): CancelablePromise<TvSeriesImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/images',
      path: {
        series_id: data.seriesId,
      },
      query: {
        include_image_language: data.includeImageLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Images
   * Get the images that belong to a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonImages(
    data: TvSeasonImagesData,
  ): CancelablePromise<TvSeasonImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/images',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        include_image_language: data.includeImageLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Images
   * Get the images that belong to a TV episode.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeImages(
    data: TvEpisodeImagesData,
  ): CancelablePromise<TvEpisodeImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      query: {
        include_image_language: data.includeImageLanguage,
        language: data.language,
      },
    });
  }

  /**
   * All
   * Get the trending movies, TV shows and people.
   * @param data The data for the request.
   * @param data.timeWindow
   * @param data.language `ISO-639-1`-`ISO-3166-1` code
   * @returns unknown 200
   * @throws ApiError
   */
  public trendingAll(
    data: TrendingAllData,
  ): CancelablePromise<TrendingAllResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/trending/all/{time_window}',
      path: {
        time_window: data.timeWindow,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Movies
   * Get the trending movies on TMDB.
   * @param data The data for the request.
   * @param data.timeWindow
   * @param data.language `ISO-639-1`-`ISO-3166-1` code
   * @returns unknown 200
   * @throws ApiError
   */
  public trendingMovies(
    data: TrendingMoviesData,
  ): CancelablePromise<TrendingMoviesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/trending/movie/{time_window}',
      path: {
        time_window: data.timeWindow,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * TV
   * Get the trending TV shows on TMDB.
   * @param data The data for the request.
   * @param data.timeWindow
   * @param data.language `ISO-639-1`-`ISO-3166-1` code
   * @returns unknown 200
   * @throws ApiError
   */
  public trendingTv(
    data: TrendingTvData,
  ): CancelablePromise<TrendingTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/trending/tv/{time_window}',
      path: {
        time_window: data.timeWindow,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Account States
   * Get the rating, watchlist and favourite status of an account.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.sessionId
   * @param data.guestSessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieAccountStates(
    data: MovieAccountStatesData,
  ): CancelablePromise<MovieAccountStatesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/account_states',
      path: {
        movie_id: data.movieId,
      },
      query: {
        session_id: data.sessionId,
        guest_session_id: data.guestSessionId,
      },
    });
  }

  /**
   * Account States
   * Get the rating, watchlist and favourite status.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.sessionId
   * @param data.guestSessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesAccountStates(
    data: TvSeriesAccountStatesData,
  ): CancelablePromise<TvSeriesAccountStatesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/account_states',
      path: {
        series_id: data.seriesId,
      },
      query: {
        session_id: data.sessionId,
        guest_session_id: data.guestSessionId,
      },
    });
  }

  /**
   * Account States
   * Get the rating, watchlist and favourite status.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.sessionId
   * @param data.guestSessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeAccountStates(
    data: TvEpisodeAccountStatesData,
  ): CancelablePromise<TvEpisodeAccountStatesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      query: {
        session_id: data.sessionId,
        guest_session_id: data.guestSessionId,
      },
    });
  }

  /**
   * People
   * Get the trending people on TMDB.
   * @param data The data for the request.
   * @param data.timeWindow
   * @param data.language `ISO-639-1`-`ISO-3166-1` code
   * @returns unknown 200
   * @throws ApiError
   */
  public trendingPeople(
    data: TrendingPeopleData,
  ): CancelablePromise<TrendingPeopleResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/trending/person/{time_window}',
      path: {
        time_window: data.timeWindow,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Alternative Titles
   * Get the alternative titles for a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.country specify a ISO-3166-1 value to filter the results
   * @returns unknown 200
   * @throws ApiError
   */
  public movieAlternativeTitles(
    data: MovieAlternativeTitlesData,
  ): CancelablePromise<MovieAlternativeTitlesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/alternative_titles',
      path: {
        movie_id: data.movieId,
      },
      query: {
        country: data.country,
      },
    });
  }

  /**
   * Changes
   * Get the recent changes for a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public movieChanges(
    data: MovieChangesData,
  ): CancelablePromise<MovieChangesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/changes',
      path: {
        movie_id: data.movieId,
      },
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * Credits
   * @param data The data for the request.
   * @param data.movieId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public movieCredits(
    data: MovieCreditsData,
  ): CancelablePromise<MovieCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/credits',
      path: {
        movie_id: data.movieId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * External IDs
   * @param data The data for the request.
   * @param data.movieId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieExternalIds(
    data: MovieExternalIdsData,
  ): CancelablePromise<MovieExternalIdsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/external_ids',
      path: {
        movie_id: data.movieId,
      },
    });
  }

  /**
   * Keywords
   * @param data The data for the request.
   * @param data.movieId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieKeywords(
    data: MovieKeywordsData,
  ): CancelablePromise<MovieKeywordsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/keywords',
      path: {
        movie_id: data.movieId,
      },
    });
  }

  /**
   * Lists
   * Get the lists that a movie has been added to.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public movieLists(
    data: MovieListsData,
  ): CancelablePromise<MovieListsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/lists',
      path: {
        movie_id: data.movieId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Recommendations
   * @param data The data for the request.
   * @param data.movieId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public movieRecommendations(
    data: MovieRecommendationsData,
  ): CancelablePromise<MovieRecommendationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/recommendations',
      path: {
        movie_id: data.movieId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Release Dates
   * Get the release dates and certifications for a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieReleaseDates(
    data: MovieReleaseDatesData,
  ): CancelablePromise<MovieReleaseDatesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/release_dates',
      path: {
        movie_id: data.movieId,
      },
    });
  }

  /**
   * Reviews
   * Get the user reviews for a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public movieReviews(
    data: MovieReviewsData,
  ): CancelablePromise<MovieReviewsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/reviews',
      path: {
        movie_id: data.movieId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Similar
   * Get the similar movies based on genres and keywords.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public movieSimilar(
    data: MovieSimilarData,
  ): CancelablePromise<MovieSimilarResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/similar',
      path: {
        movie_id: data.movieId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Translations
   * Get the translations for a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieTranslations(
    data: MovieTranslationsData,
  ): CancelablePromise<MovieTranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/translations',
      path: {
        movie_id: data.movieId,
      },
    });
  }

  /**
   * Videos
   * @param data The data for the request.
   * @param data.movieId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public movieVideos(
    data: MovieVideosData,
  ): CancelablePromise<MovieVideosResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/videos',
      path: {
        movie_id: data.movieId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Watch Providers
   * Get the list of streaming providers we have for a movie.
   * @param data The data for the request.
   * @param data.movieId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieWatchProviders(
    data: MovieWatchProvidersData,
  ): CancelablePromise<MovieWatchProvidersResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/{movie_id}/watch/providers',
      path: {
        movie_id: data.movieId,
      },
    });
  }

  /**
   * Add Rating
   * Rate a movie and save it to your rated list.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.guestSessionId
   * @param data.sessionId
   * @param data.contentType
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public movieAddRating(
    data: MovieAddRatingData,
  ): CancelablePromise<MovieAddRatingResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/movie/{movie_id}/rating',
      path: {
        movie_id: data.movieId,
      },
      headers: {
        'Content-Type': data.contentType,
      },
      query: {
        guest_session_id: data.guestSessionId,
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Delete Rating
   * Delete a user rating.
   * @param data The data for the request.
   * @param data.movieId
   * @param data.contentType
   * @param data.guestSessionId
   * @param data.sessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public movieDeleteRating(
    data: MovieDeleteRatingData,
  ): CancelablePromise<MovieDeleteRatingResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/3/movie/{movie_id}/rating',
      path: {
        movie_id: data.movieId,
      },
      headers: {
        'Content-Type': data.contentType,
      },
      query: {
        guest_session_id: data.guestSessionId,
        session_id: data.sessionId,
      },
    });
  }

  /**
   * Create Guest Session
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationCreateGuestSession(): CancelablePromise<AuthenticationCreateGuestSessionResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/authentication/guest_session/new',
    });
  }

  /**
   * Create Request Token
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationCreateRequestToken(): CancelablePromise<AuthenticationCreateRequestTokenResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/authentication/token/new',
    });
  }

  /**
   * Create Session
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationCreateSession(
    data: AuthenticationCreateSessionData = {},
  ): CancelablePromise<AuthenticationCreateSessionResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/authentication/session/new',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Create Session (from v4 token)
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationCreateSessionFromV4Token(
    data: AuthenticationCreateSessionFromV4TokenData = {},
  ): CancelablePromise<AuthenticationCreateSessionFromV4TokenResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/authentication/session/convert/4',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Delete Session
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationDeleteSession(
    data: AuthenticationDeleteSessionData = {},
  ): CancelablePromise<AuthenticationDeleteSessionResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/3/authentication/session',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Find By ID
   * Find data by external ID's.
   * @param data The data for the request.
   * @param data.externalId
   * @param data.externalSource
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public findById(data: FindByIdData): CancelablePromise<FindByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/find/{external_id}',
      path: {
        external_id: data.externalId,
      },
      query: {
        external_source: data.externalSource,
        language: data.language,
      },
    });
  }

  /**
   * Details
   * Query the top level details of a person.
   * @param data The data for the request.
   * @param data.personId
   * @param data.appendToResponse comma separated list of endpoints within this namespace, 20 items max
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public personDetails(
    data: PersonDetailsData,
  ): CancelablePromise<PersonDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}',
      path: {
        person_id: data.personId,
      },
      query: {
        append_to_response: data.appendToResponse,
        language: data.language,
      },
    });
  }

  /**
   * Changes
   * Get the recent changes for a person.
   * @param data The data for the request.
   * @param data.personId
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public personChanges(
    data: PersonChangesData,
  ): CancelablePromise<PersonChangesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/changes',
      path: {
        person_id: data.personId,
      },
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * Changes
   * Get the recent changes for a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesChanges(
    data: TvSeriesChangesData,
  ): CancelablePromise<TvSeriesChangesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/changes',
      path: {
        series_id: data.seriesId,
      },
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * Images
   * Get the profile images that belong to a person.
   * @param data The data for the request.
   * @param data.personId
   * @returns unknown 200
   * @throws ApiError
   */
  public personImages(
    data: PersonImagesData,
  ): CancelablePromise<PersonImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/images',
      path: {
        person_id: data.personId,
      },
    });
  }

  /**
   * Movie Credits
   * Get the movie credits for a person.
   * @param data The data for the request.
   * @param data.personId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public personMovieCredits(
    data: PersonMovieCreditsData,
  ): CancelablePromise<PersonMovieCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/movie_credits',
      path: {
        person_id: data.personId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * TV Credits
   * Get the TV credits that belong to a person.
   * @param data The data for the request.
   * @param data.personId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public personTvCredits(
    data: PersonTvCreditsData,
  ): CancelablePromise<PersonTvCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/tv_credits',
      path: {
        person_id: data.personId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Combined Credits
   * Get the combined movie and TV credits that belong to a person.
   * @param data The data for the request.
   * @param data.personId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public personCombinedCredits(
    data: PersonCombinedCreditsData,
  ): CancelablePromise<PersonCombinedCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/combined_credits',
      path: {
        person_id: data.personId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * External IDs
   * Get the external ID's that belong to a person.
   * @param data The data for the request.
   * @param data.personId
   * @returns unknown 200
   * @throws ApiError
   */
  public personExternalIds(
    data: PersonExternalIdsData,
  ): CancelablePromise<PersonExternalIdsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/external_ids',
      path: {
        person_id: data.personId,
      },
    });
  }

  /**
   * Tagged Images
   * Get the tagged images for a person.
   * @param data The data for the request.
   * @param data.personId
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public personTaggedImages(
    data: PersonTaggedImagesData,
  ): CancelablePromise<PersonTaggedImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/tagged_images',
      path: {
        person_id: data.personId,
      },
      query: {
        page: data.page,
      },
    });
  }

  /**
   * Translations
   * Get the translations that belong to a person.
   * @param data The data for the request.
   * @param data.personId
   * @returns unknown 200
   * @throws ApiError
   */
  public translations(
    data: TranslationsData,
  ): CancelablePromise<TranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/{person_id}/translations',
      path: {
        person_id: data.personId,
      },
    });
  }

  /**
   * Popular
   * Get a list of people ordered by popularity.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public personPopularList(
    data: PersonPopularListData = {},
  ): CancelablePromise<PersonPopularListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/popular',
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Popular
   * Get a list of movies ordered by popularity.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @param data.region ISO-3166-1 code
   * @returns unknown 200
   * @throws ApiError
   */
  public moviePopularList(
    data: MoviePopularListData = {},
  ): CancelablePromise<MoviePopularListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/popular',
      query: {
        language: data.language,
        page: data.page,
        region: data.region,
      },
    });
  }

  /**
   * Top Rated
   * Get a list of movies ordered by rating.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @param data.region ISO-3166-1 code
   * @returns unknown 200
   * @throws ApiError
   */
  public movieTopRatedList(
    data: MovieTopRatedListData = {},
  ): CancelablePromise<MovieTopRatedListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/top_rated',
      query: {
        language: data.language,
        page: data.page,
        region: data.region,
      },
    });
  }

  /**
   * Upcoming
   * Get a list of movies that are being released soon.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @param data.region ISO-3166-1 code
   * @returns unknown 200
   * @throws ApiError
   */
  public movieUpcomingList(
    data: MovieUpcomingListData = {},
  ): CancelablePromise<MovieUpcomingListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/upcoming',
      query: {
        language: data.language,
        page: data.page,
        region: data.region,
      },
    });
  }

  /**
   * Now Playing
   * Get a list of movies that are currently in theatres.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @param data.region ISO-3166-1 code
   * @returns unknown 200
   * @throws ApiError
   */
  public movieNowPlayingList(
    data: MovieNowPlayingListData = {},
  ): CancelablePromise<MovieNowPlayingListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/now_playing',
      query: {
        language: data.language,
        page: data.page,
        region: data.region,
      },
    });
  }

  /**
   * Airing Today
   * Get a list of TV shows airing today.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @param data.timezone
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesAiringTodayList(
    data: TvSeriesAiringTodayListData = {},
  ): CancelablePromise<TvSeriesAiringTodayListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/airing_today',
      query: {
        language: data.language,
        page: data.page,
        timezone: data.timezone,
      },
    });
  }

  /**
   * On The Air
   * Get a list of TV shows that air in the next 7 days.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @param data.timezone
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesOnTheAirList(
    data: TvSeriesOnTheAirListData = {},
  ): CancelablePromise<TvSeriesOnTheAirListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/on_the_air',
      query: {
        language: data.language,
        page: data.page,
        timezone: data.timezone,
      },
    });
  }

  /**
   * Popular
   * Get a list of TV shows ordered by popularity.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesPopularList(
    data: TvSeriesPopularListData = {},
  ): CancelablePromise<TvSeriesPopularListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/popular',
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Top Rated
   * Get a list of TV shows ordered by rating.
   * @param data The data for the request.
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesTopRatedList(
    data: TvSeriesTopRatedListData = {},
  ): CancelablePromise<TvSeriesTopRatedListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/top_rated',
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Latest
   * Get the newest movie ID.
   * @returns unknown 200
   * @throws ApiError
   */
  public movieLatestId(): CancelablePromise<MovieLatestIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/latest',
    });
  }

  /**
   * Latest
   * Get the newest TV show ID.
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesLatestId(): CancelablePromise<TvSeriesLatestIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/latest',
    });
  }

  /**
   * Aggregate Credits
   * Get the aggregate credits (cast and crew) that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesAggregateCredits(
    data: TvSeriesAggregateCreditsData,
  ): CancelablePromise<TvSeriesAggregateCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/aggregate_credits',
      path: {
        series_id: data.seriesId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Alternative Titles
   * Get the alternative titles that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesAlternativeTitles(
    data: TvSeriesAlternativeTitlesData,
  ): CancelablePromise<TvSeriesAlternativeTitlesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/alternative_titles',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Content Ratings
   * Get the content ratings that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesContentRatings(
    data: TvSeriesContentRatingsData,
  ): CancelablePromise<TvSeriesContentRatingsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/content_ratings',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Credits
   * Get the latest season credits of a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesCredits(
    data: TvSeriesCreditsData,
  ): CancelablePromise<TvSeriesCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/credits',
      path: {
        series_id: data.seriesId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Episode Groups
   * Get the episode groups that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesEpisodeGroups(
    data: TvSeriesEpisodeGroupsData,
  ): CancelablePromise<TvSeriesEpisodeGroupsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/episode_groups',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * External IDs
   * Get a list of external IDs that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesExternalIds(
    data: TvSeriesExternalIdsData,
  ): CancelablePromise<TvSeriesExternalIdsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/external_ids',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Keywords
   * Get a list of keywords that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesKeywords(
    data: TvSeriesKeywordsData,
  ): CancelablePromise<TvSeriesKeywordsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/keywords',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Recommendations
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesRecommendations(
    data: TvSeriesRecommendationsData,
  ): CancelablePromise<TvSeriesRecommendationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/recommendations',
      path: {
        series_id: data.seriesId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Reviews
   * Get the reviews that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesReviews(
    data: TvSeriesReviewsData,
  ): CancelablePromise<TvSeriesReviewsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/reviews',
      path: {
        series_id: data.seriesId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Screened Theatrically
   * Get the seasons and episodes that have screened theatrically.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesScreenedTheatrically(
    data: TvSeriesScreenedTheatricallyData,
  ): CancelablePromise<TvSeriesScreenedTheatricallyResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/screened_theatrically',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Similar
   * Get the similar TV shows.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesSimilar(
    data: TvSeriesSimilarData,
  ): CancelablePromise<TvSeriesSimilarResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/similar',
      path: {
        series_id: data.seriesId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Translations
   * Get the translations that have been added to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesTranslations(
    data: TvSeriesTranslationsData,
  ): CancelablePromise<TvSeriesTranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/translations',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Videos
   * Get the videos that belong to a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.includeVideoLanguage filter the list results by language, supports more than one value by using a comma
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesVideos(
    data: TvSeriesVideosData,
  ): CancelablePromise<TvSeriesVideosResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/videos',
      path: {
        series_id: data.seriesId,
      },
      query: {
        include_video_language: data.includeVideoLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Watch Providers
   * Get the list of streaming providers we have for a TV show.
   * @param data The data for the request.
   * @param data.seriesId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesWatchProviders(
    data: TvSeriesWatchProvidersData,
  ): CancelablePromise<TvSeriesWatchProvidersResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/watch/providers',
      path: {
        series_id: data.seriesId,
      },
    });
  }

  /**
   * Add Rating
   * Rate a TV show and save it to your rated list.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.guestSessionId
   * @param data.sessionId
   * @param data.contentType
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesAddRating(
    data: TvSeriesAddRatingData,
  ): CancelablePromise<TvSeriesAddRatingResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/tv/{series_id}/rating',
      path: {
        series_id: data.seriesId,
      },
      headers: {
        'Content-Type': data.contentType,
      },
      query: {
        guest_session_id: data.guestSessionId,
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Delete Rating
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.contentType
   * @param data.guestSessionId
   * @param data.sessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeriesDeleteRating(
    data: TvSeriesDeleteRatingData,
  ): CancelablePromise<TvSeriesDeleteRatingResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/3/tv/{series_id}/rating',
      path: {
        series_id: data.seriesId,
      },
      headers: {
        'Content-Type': data.contentType,
      },
      query: {
        guest_session_id: data.guestSessionId,
        session_id: data.sessionId,
      },
    });
  }

  /**
   * Account States
   * Get the rating, watchlist and favourite status.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.sessionId
   * @param data.guestSessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonAccountStates(
    data: TvSeasonAccountStatesData,
  ): CancelablePromise<TvSeasonAccountStatesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/account_states',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        session_id: data.sessionId,
        guest_session_id: data.guestSessionId,
      },
    });
  }

  /**
   * Aggregate Credits
   * Get the aggregate credits (cast and crew) that have been added to a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonAggregateCredits(
    data: TvSeasonAggregateCreditsData,
  ): CancelablePromise<TvSeasonAggregateCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/aggregate_credits',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Changes
   * Get the recent changes for a TV season.
   * @param data The data for the request.
   * @param data.seasonId
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonChangesById(
    data: TvSeasonChangesByIdData,
  ): CancelablePromise<TvSeasonChangesByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/season/{season_id}/changes',
      path: {
        season_id: data.seasonId,
      },
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * Credits
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonCredits(
    data: TvSeasonCreditsData,
  ): CancelablePromise<TvSeasonCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/credits',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * External IDs
   * Get a list of external IDs that have been added to a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonExternalIds(
    data: TvSeasonExternalIdsData,
  ): CancelablePromise<TvSeasonExternalIdsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/external_ids',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
    });
  }

  /**
   * Translations
   * Get the translations for a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonTranslations(
    data: TvSeasonTranslationsData,
  ): CancelablePromise<TvSeasonTranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/translations',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
    });
  }

  /**
   * Videos
   * Get the videos that belong to a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.includeVideoLanguage filter the list results by language, supports more than one value by using a comma
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonVideos(
    data: TvSeasonVideosData,
  ): CancelablePromise<TvSeasonVideosResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/videos',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        include_video_language: data.includeVideoLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Credits
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeCredits(
    data: TvEpisodeCreditsData,
  ): CancelablePromise<TvEpisodeCreditsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * External IDs
   * Get a list of external IDs that have been added to a TV episode.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeExternalIds(
    data: TvEpisodeExternalIdsData,
  ): CancelablePromise<TvEpisodeExternalIdsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
    });
  }

  /**
   * Translations
   * Get the translations that have been added to a TV episode.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeTranslations(
    data: TvEpisodeTranslationsData,
  ): CancelablePromise<TvEpisodeTranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
    });
  }

  /**
   * Videos
   * Get the videos that belong to a TV episode.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.includeVideoLanguage filter the list results by language, supports more than one value by using a comma
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeVideos(
    data: TvEpisodeVideosData,
  ): CancelablePromise<TvEpisodeVideosResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      query: {
        include_video_language: data.includeVideoLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Add Rating
   * Rate a TV episode and save it to your rated list.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.guestSessionId
   * @param data.sessionId
   * @param data.contentType
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeAddRating(
    data: TvEpisodeAddRatingData,
  ): CancelablePromise<TvEpisodeAddRatingResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      headers: {
        'Content-Type': data.contentType,
      },
      query: {
        guest_session_id: data.guestSessionId,
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Delete Rating
   * Delete your rating on a TV episode.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.episodeNumber
   * @param data.contentType
   * @param data.guestSessionId
   * @param data.sessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeDeleteRating(
    data: TvEpisodeDeleteRatingData,
  ): CancelablePromise<TvEpisodeDeleteRatingResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
        episode_number: data.episodeNumber,
      },
      headers: {
        'Content-Type': data.contentType,
      },
      query: {
        guest_session_id: data.guestSessionId,
        session_id: data.sessionId,
      },
    });
  }

  /**
   * Details
   * @param data The data for the request.
   * @param data.accountId
   * @param data.sessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public accountDetails(
    data: AccountDetailsData,
  ): CancelablePromise<AccountDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}',
      path: {
        account_id: data.accountId,
      },
      query: {
        session_id: data.sessionId,
      },
    });
  }

  /**
   * Lists
   * @param data The data for the request.
   * @param data.accountId
   * @param data.page
   * @param data.sessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public accountLists(
    data: AccountListsData,
  ): CancelablePromise<AccountListsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/lists',
      path: {
        account_id: data.accountId,
      },
      query: {
        page: data.page,
        session_id: data.sessionId,
      },
    });
  }

  /**
   * Favorite Movies
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountGetFavorites(
    data: AccountGetFavoritesData,
  ): CancelablePromise<AccountGetFavoritesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/favorite/movies',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Favorite TV
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountFavoriteTv(
    data: AccountFavoriteTvData,
  ): CancelablePromise<AccountFavoriteTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/favorite/tv',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Rated Movies
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountRatedMovies(
    data: AccountRatedMoviesData,
  ): CancelablePromise<AccountRatedMoviesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/rated/movies',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Rated TV
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountRatedTv(
    data: AccountRatedTvData,
  ): CancelablePromise<AccountRatedTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/rated/tv',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Rated TV Episodes
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountRatedTvEpisodes(
    data: AccountRatedTvEpisodesData,
  ): CancelablePromise<AccountRatedTvEpisodesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/rated/tv/episodes',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Watchlist Movies
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountWatchlistMovies(
    data: AccountWatchlistMoviesData,
  ): CancelablePromise<AccountWatchlistMoviesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/watchlist/movies',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Watchlist TV
   * @param data The data for the request.
   * @param data.accountId
   * @param data.language
   * @param data.page
   * @param data.sessionId
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public accountWatchlistTv(
    data: AccountWatchlistTvData,
  ): CancelablePromise<AccountWatchlistTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/account/{account_id}/watchlist/tv',
      path: {
        account_id: data.accountId,
      },
      query: {
        language: data.language,
        page: data.page,
        session_id: data.sessionId,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Add Favorite
   * @param data The data for the request.
   * @param data.accountId
   * @param data.sessionId
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public accountAddFavorite(
    data: AccountAddFavoriteData,
  ): CancelablePromise<AccountAddFavoriteResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/account/{account_id}/favorite',
      path: {
        account_id: data.accountId,
      },
      query: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Add To Watchlist
   * @param data The data for the request.
   * @param data.accountId
   * @param data.sessionId
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public accountAddToWatchlist(
    data: AccountAddToWatchlistData,
  ): CancelablePromise<AccountAddToWatchlistResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/account/{account_id}/watchlist',
      path: {
        account_id: data.accountId,
      },
      query: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Movie Certifications
   * Get an up to date list of the officially supported movie certifications on TMDB.
   * @returns unknown 200
   * @throws ApiError
   */
  public certificationMovieList(): CancelablePromise<CertificationMovieListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/certification/movie/list',
    });
  }

  /**
   * TV Certifications
   * @returns unknown 200
   * @throws ApiError
   */
  public certificationsTvList(): CancelablePromise<CertificationsTvListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/certification/tv/list',
    });
  }

  /**
   * Movie List
   * Get a list of all of the movie ids that have been changed in the past 24 hours.
   * @param data The data for the request.
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public changesMovieList(
    data: ChangesMovieListData = {},
  ): CancelablePromise<ChangesMovieListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/movie/changes',
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * TV List
   * @param data The data for the request.
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public changesTvList(
    data: ChangesTvListData = {},
  ): CancelablePromise<ChangesTvListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/changes',
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * People List
   * @param data The data for the request.
   * @param data.endDate
   * @param data.page
   * @param data.startDate
   * @returns unknown 200
   * @throws ApiError
   */
  public changesPeopleList(
    data: ChangesPeopleListData = {},
  ): CancelablePromise<ChangesPeopleListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/changes',
      query: {
        end_date: data.endDate,
        page: data.page,
        start_date: data.startDate,
      },
    });
  }

  /**
   * Details
   * Get collection details by ID.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public collectionDetails(
    data: CollectionDetailsData,
  ): CancelablePromise<CollectionDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/collection/{collection_id}',
      path: {
        collection_id: data.collectionId,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Images
   * Get the images that belong to a collection.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public collectionImages(
    data: CollectionImagesData,
  ): CancelablePromise<CollectionImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/collection/{collection_id}/images',
      path: {
        collection_id: data.collectionId,
      },
      query: {
        include_image_language: data.includeImageLanguage,
        language: data.language,
      },
    });
  }

  /**
   * Translations
   * @param data The data for the request.
   * @param data.collectionId
   * @returns unknown 200
   * @throws ApiError
   */
  public collectionTranslations(
    data: CollectionTranslationsData,
  ): CancelablePromise<CollectionTranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/collection/{collection_id}/translations',
      path: {
        collection_id: data.collectionId,
      },
    });
  }

  /**
   * Details
   * Get the company details by ID.
   * @param data The data for the request.
   * @param data.companyId
   * @returns unknown 200
   * @throws ApiError
   */
  public companyDetails(
    data: CompanyDetailsData,
  ): CancelablePromise<CompanyDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/company/{company_id}',
      path: {
        company_id: data.companyId,
      },
    });
  }

  /**
   * Alternative Names
   * Get the company details by ID.
   * @param data The data for the request.
   * @param data.companyId
   * @returns unknown 200
   * @throws ApiError
   */
  public companyAlternativeNames(
    data: CompanyAlternativeNamesData,
  ): CancelablePromise<CompanyAlternativeNamesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/company/{company_id}/alternative_names',
      path: {
        company_id: data.companyId,
      },
    });
  }

  /**
   * Images
   * Get the company logos by id.
   * @param data The data for the request.
   * @param data.companyId
   * @returns unknown 200
   * @throws ApiError
   */
  public companyImages(
    data: CompanyImagesData,
  ): CancelablePromise<CompanyImagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/company/{company_id}/images',
      path: {
        company_id: data.companyId,
      },
    });
  }

  /**
   * Details
   * Get a movie or TV credit details by ID.
   * @param data The data for the request.
   * @param data.creditId
   * @returns unknown 200
   * @throws ApiError
   */
  public creditDetails(
    data: CreditDetailsData,
  ): CancelablePromise<CreditDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/credit/{credit_id}',
      path: {
        credit_id: data.creditId,
      },
    });
  }

  /**
   * Movie List
   * Get the list of official genres for movies.
   * @param data The data for the request.
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public genreMovieList(
    data: GenreMovieListData = {},
  ): CancelablePromise<GenreMovieListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/genre/movie/list',
      query: {
        language: data.language,
      },
    });
  }

  /**
   * TV List
   * Get the list of official genres for TV shows.
   * @param data The data for the request.
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public genreTvList(
    data: GenreTvListData = {},
  ): CancelablePromise<GenreTvListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/genre/tv/list',
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Rated Movies
   * Get the rated movies for a guest session.
   * @param data The data for the request.
   * @param data.guestSessionId
   * @param data.language
   * @param data.page
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public guestSessionRatedMovies(
    data: GuestSessionRatedMoviesData,
  ): CancelablePromise<GuestSessionRatedMoviesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/guest_session/{guest_session_id}/rated/movies',
      path: {
        guest_session_id: data.guestSessionId,
      },
      query: {
        language: data.language,
        page: data.page,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Rated TV
   * Get the rated TV shows for a guest session.
   * @param data The data for the request.
   * @param data.guestSessionId
   * @param data.language
   * @param data.page
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public guestSessionRatedTv(
    data: GuestSessionRatedTvData,
  ): CancelablePromise<GuestSessionRatedTvResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/guest_session/{guest_session_id}/rated/tv',
      path: {
        guest_session_id: data.guestSessionId,
      },
      query: {
        language: data.language,
        page: data.page,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Rated TV Episodes
   * Get the rated TV episodes for a guest session.
   * @param data The data for the request.
   * @param data.guestSessionId
   * @param data.language
   * @param data.page
   * @param data.sortBy
   * @returns unknown 200
   * @throws ApiError
   */
  public guestSessionRatedTvEpisodes(
    data: GuestSessionRatedTvEpisodesData,
  ): CancelablePromise<GuestSessionRatedTvEpisodesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/guest_session/{guest_session_id}/rated/tv/episodes',
      path: {
        guest_session_id: data.guestSessionId,
      },
      query: {
        language: data.language,
        page: data.page,
        sort_by: data.sortBy,
      },
    });
  }

  /**
   * Available Regions
   * Get the list of the countries we have watch provider (OTT/streaming) data for.
   * @param data The data for the request.
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public watchProvidersAvailableRegions(
    data: WatchProvidersAvailableRegionsData = {},
  ): CancelablePromise<WatchProvidersAvailableRegionsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/watch/providers/regions',
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Movie Providers
   * Get the list of streaming providers we have for movies.
   * @param data The data for the request.
   * @param data.language
   * @param data.watchRegion
   * @returns unknown 200
   * @throws ApiError
   */
  public watchProvidersMovieList(
    data: WatchProvidersMovieListData = {},
  ): CancelablePromise<WatchProvidersMovieListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/watch/providers/movie',
      query: {
        language: data.language,
        watch_region: data.watchRegion,
      },
    });
  }

  /**
   * TV Providers
   * Get the list of streaming providers we have for TV shows.
   * @param data The data for the request.
   * @param data.language
   * @param data.watchRegion
   * @returns unknown 200
   * @throws ApiError
   */
  public watchProviderTvList(
    data: WatchProviderTvListData = {},
  ): CancelablePromise<WatchProviderTvListResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/watch/providers/tv',
      query: {
        language: data.language,
        watch_region: data.watchRegion,
      },
    });
  }

  /**
   * Details
   * @param data The data for the request.
   * @param data.keywordId
   * @returns unknown 200
   * @throws ApiError
   */
  public keywordDetails(
    data: KeywordDetailsData,
  ): CancelablePromise<KeywordDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/keyword/{keyword_id}',
      path: {
        keyword_id: data.keywordId,
      },
    });
  }

  /**
   * Movies
   * @param data The data for the request.
   * @param data.keywordId
   * @param data.includeAdult
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public keywordMovies(
    data: KeywordMoviesData,
  ): CancelablePromise<KeywordMoviesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/keyword/{keyword_id}/movies',
      path: {
        keyword_id: data.keywordId,
      },
      query: {
        include_adult: data.includeAdult,
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Details
   * @param data The data for the request.
   * @param data.listId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public listDetails(
    data: ListDetailsData,
  ): CancelablePromise<ListDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/list/{list_id}',
      path: {
        list_id: data.listId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }

  /**
   * Delete
   * Delete a list.
   * @param data The data for the request.
   * @param data.listId
   * @param data.sessionId
   * @returns unknown 200
   * @throws ApiError
   */
  public listDelete(
    data: ListDeleteData,
  ): CancelablePromise<ListDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/3/list/{list_id}',
      path: {
        list_id: data.listId,
      },
      query: {
        session_id: data.sessionId,
      },
    });
  }

  /**
   * Check Item Status
   * Use this method to check if an item has already been added to the list.
   * @param data The data for the request.
   * @param data.listId
   * @param data.language
   * @param data.movieId
   * @returns unknown 200
   * @throws ApiError
   */
  public listCheckItemStatus(
    data: ListCheckItemStatusData,
  ): CancelablePromise<ListCheckItemStatusResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/list/{list_id}/item_status',
      path: {
        list_id: data.listId,
      },
      query: {
        language: data.language,
        movie_id: data.movieId,
      },
    });
  }

  /**
   * Create
   * @param data The data for the request.
   * @param data.sessionId
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public listCreate(
    data: ListCreateData,
  ): CancelablePromise<ListCreateResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/list',
      query: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Add Movie
   * Add a movie to a list.
   * @param data The data for the request.
   * @param data.listId
   * @param data.sessionId
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public listAddMovie(
    data: ListAddMovieData,
  ): CancelablePromise<ListAddMovieResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/list/{list_id}/add_item',
      path: {
        list_id: data.listId,
      },
      query: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Remove Movie
   * Remove a movie from a list.
   * @param data The data for the request.
   * @param data.listId
   * @param data.sessionId
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public listRemoveMovie(
    data: ListRemoveMovieData,
  ): CancelablePromise<ListRemoveMovieResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/list/{list_id}/remove_item',
      path: {
        list_id: data.listId,
      },
      query: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Clear
   * Clear all items from a list.
   * @param data The data for the request.
   * @param data.listId
   * @param data.sessionId
   * @param data.confirm
   * @returns unknown 200
   * @throws ApiError
   */
  public listClear(data: ListClearData): CancelablePromise<ListClearResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/list/{list_id}/clear',
      path: {
        list_id: data.listId,
      },
      query: {
        session_id: data.sessionId,
        confirm: data.confirm,
      },
    });
  }

  /**
   * Details
   * @param data The data for the request.
   * @param data.networkId
   * @returns unknown 200
   * @throws ApiError
   */
  public networkDetails(
    data: NetworkDetailsData,
  ): CancelablePromise<NetworkDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/network/{network_id}',
      path: {
        network_id: data.networkId,
      },
    });
  }

  /**
   * Alternative Names
   * Get the alternative names of a network.
   * @param data The data for the request.
   * @param data.networkId
   * @returns unknown 200
   * @throws ApiError
   */
  public detailsCopy(
    data: DetailsCopyData,
  ): CancelablePromise<DetailsCopyResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/network/{network_id}/alternative_names',
      path: {
        network_id: data.networkId,
      },
    });
  }

  /**
   * Images
   * Get the TV network logos by id.
   * @param data The data for the request.
   * @param data.networkId
   * @returns unknown 200
   * @throws ApiError
   */
  public alternativeNamesCopy(
    data: AlternativeNamesCopyData,
  ): CancelablePromise<AlternativeNamesCopyResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/network/{network_id}/images',
      path: {
        network_id: data.networkId,
      },
    });
  }

  /**
   * Details
   * Retrieve the details of a movie or TV show review.
   * @param data The data for the request.
   * @param data.reviewId
   * @returns unknown 200
   * @throws ApiError
   */
  public reviewDetails(
    data: ReviewDetailsData,
  ): CancelablePromise<ReviewDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/review/{review_id}',
      path: {
        review_id: data.reviewId,
      },
    });
  }

  /**
   * Validate Key
   * Test your API Key to see if it's valid.
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationValidateKey(): CancelablePromise<AuthenticationValidateKeyResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/authentication',
      errors: {
        401: 'Invalid API key: You must be granted a valid key.',
      },
    });
  }

  /**
   * Watch Providers
   * Get the list of streaming providers we have for a TV season.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.seasonNumber
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public tvSeasonWatchProviders(
    data: TvSeasonWatchProvidersData,
  ): CancelablePromise<TvSeasonWatchProvidersResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/season/{season_number}/watch/providers',
      path: {
        series_id: data.seriesId,
        season_number: data.seasonNumber,
      },
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Countries
   * Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
   * @param data The data for the request.
   * @param data.language
   * @returns unknown 200
   * @throws ApiError
   */
  public configurationCountries(
    data: ConfigurationCountriesData = {},
  ): CancelablePromise<ConfigurationCountriesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/configuration/countries',
      query: {
        language: data.language,
      },
    });
  }

  /**
   * Jobs
   * Get the list of the jobs and departments we use on TMDB.
   * @returns unknown 200
   * @throws ApiError
   */
  public configurationJobs(): CancelablePromise<ConfigurationJobsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/configuration/jobs',
    });
  }

  /**
   * Languages
   * Get the list of languages (ISO 639-1 tags) used throughout TMDB.
   * @returns unknown 200
   * @throws ApiError
   */
  public configurationLanguages(): CancelablePromise<ConfigurationLanguagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/configuration/languages',
    });
  }

  /**
   * Primary Translations
   * Get a list of the officially supported translations on TMDB.
   * @returns string 200
   * @throws ApiError
   */
  public configurationPrimaryTranslations(): CancelablePromise<ConfigurationPrimaryTranslationsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/configuration/primary_translations',
    });
  }

  /**
   * Timezones
   * Get the list of timezones used throughout TMDB.
   * @returns unknown 200
   * @throws ApiError
   */
  public configurationTimezones(): CancelablePromise<ConfigurationTimezonesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/configuration/timezones',
    });
  }

  /**
   * Create Session (with login)
   * This method allows an application to validate a request token by entering a username and password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown 200
   * @throws ApiError
   */
  public authenticationCreateSessionFromLogin(
    data: AuthenticationCreateSessionFromLoginData = {},
  ): CancelablePromise<AuthenticationCreateSessionFromLoginResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/3/authentication/token/validate_with_login',
      body: data.requestBody,
      mediaType: 'application/json',
    });
  }

  /**
   * Latest
   * Get the newest created person. This is a live response and will continuously change.
   * @returns unknown 200
   * @throws ApiError
   */
  public personLatestId(): CancelablePromise<PersonLatestIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/person/latest',
    });
  }

  /**
   * Changes
   * Get the recent changes for a TV episode.
   * @param data The data for the request.
   * @param data.episodeId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeChangesById(
    data: TvEpisodeChangesByIdData,
  ): CancelablePromise<TvEpisodeChangesByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/episode/{episode_id}/changes',
      path: {
        episode_id: data.episodeId,
      },
    });
  }

  /**
   * Details
   * Get the details of a TV episode group.
   * @param data The data for the request.
   * @param data.tvEpisodeGroupId
   * @returns unknown 200
   * @throws ApiError
   */
  public tvEpisodeGroupDetails(
    data: TvEpisodeGroupDetailsData,
  ): CancelablePromise<TvEpisodeGroupDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/episode_group/{tv_episode_group_id}',
      path: {
        tv_episode_group_id: data.tvEpisodeGroupId,
      },
    });
  }

  /**
   * Company
   * Search for companies by their original and alternative names.
   * @param data The data for the request.
   * @param data.query
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public searchCompany(
    data: SearchCompanyData,
  ): CancelablePromise<SearchCompanyResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/company',
      query: {
        query: data.query,
        page: data.page,
      },
    });
  }

  /**
   * Collection
   * Search for collections by their original, translated and alternative names.
   * @param data The data for the request.
   * @param data.query
   * @param data.includeAdult
   * @param data.language
   * @param data.page
   * @param data.region
   * @returns unknown 200
   * @throws ApiError
   */
  public searchCollection(
    data: SearchCollectionData,
  ): CancelablePromise<SearchCollectionResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/collection',
      query: {
        query: data.query,
        include_adult: data.includeAdult,
        language: data.language,
        page: data.page,
        region: data.region,
      },
    });
  }

  /**
   * Keyword
   * Search for keywords by their name.
   * @param data The data for the request.
   * @param data.query
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public searchKeyword(
    data: SearchKeywordData,
  ): CancelablePromise<SearchKeywordResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/search/keyword',
      query: {
        query: data.query,
        page: data.page,
      },
    });
  }

  /**
   * Lists
   * Get the lists that a TV series has been added to.
   * @param data The data for the request.
   * @param data.seriesId
   * @param data.language
   * @param data.page
   * @returns unknown 200
   * @throws ApiError
   */
  public listsCopy(data: ListsCopyData): CancelablePromise<ListsCopyResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/3/tv/{series_id}/lists',
      path: {
        series_id: data.seriesId,
      },
      query: {
        language: data.language,
        page: data.page,
      },
    });
  }
}
