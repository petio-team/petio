// This file is auto-generated by @hey-api/openapi-ts

export type AddMovieMethod = 'manual' | 'list' | 'collection';

export type AddMovieOptions = {
    ignoreEpisodesWithFiles?: boolean;
    ignoreEpisodesWithoutFiles?: boolean;
    monitor?: MonitorTypes;
    searchForMovie?: boolean;
    addMethod?: AddMovieMethod;
};

export type AlternativeTitleResource = {
    id?: number;
    sourceType?: SourceType;
    movieMetadataId?: number;
    title?: string | null;
    cleanTitle?: string | null;
};

export type ApiInfoResource = {
    current?: string | null;
    deprecated?: Array<(string)> | null;
};

export type ApplyTags = 'add' | 'remove' | 'replace';

export type AuthenticationRequiredType = 'enabled' | 'disabledForLocalAddresses';

export type AuthenticationType = 'none' | 'basic' | 'forms' | 'external';

export type AutoTaggingResource = {
    id?: number;
    name?: string | null;
    removeTagsAutomatically?: boolean;
    tags?: Array<(number)> | null;
    specifications?: Array<AutoTaggingSpecificationSchema> | null;
};

export type AutoTaggingSpecificationSchema = {
    id?: number;
    name?: string | null;
    implementation?: string | null;
    implementationName?: string | null;
    negate?: boolean;
    required?: boolean;
    fields?: Array<Field> | null;
};

export type BackupResource = {
    id?: number;
    name?: string | null;
    path?: string | null;
    type?: BackupType;
    size?: number;
    time?: string;
};

export type BackupType = 'scheduled' | 'manual' | 'update';

export type BlocklistBulkResource = {
    ids?: Array<(number)> | null;
};

export type BlocklistResource = {
    id?: number;
    movieId?: number;
    sourceTitle?: string | null;
    languages?: Array<Language> | null;
    quality?: QualityModel;
    customFormats?: Array<CustomFormatResource> | null;
    date?: string;
    protocol?: DownloadProtocol;
    indexer?: string | null;
    message?: string | null;
    movie?: MovieResource;
};

export type BlocklistResourcePagingResource = {
    page?: number;
    pageSize?: number;
    sortKey?: string | null;
    sortDirection?: SortDirection;
    totalRecords?: number;
    records?: Array<BlocklistResource> | null;
};

export type CertificateValidationType = 'enabled' | 'disabledForLocalAddresses' | 'disabled';

export type CollectionMovieResource = {
    tmdbId?: number;
    imdbId?: string | null;
    title?: string | null;
    cleanTitle?: string | null;
    sortTitle?: string | null;
    status?: MovieStatusType;
    overview?: string | null;
    runtime?: number;
    images?: Array<MediaCover> | null;
    year?: number;
    ratings?: Ratings;
    genres?: Array<(string)> | null;
    folder?: string | null;
    isExisting?: boolean;
    isExcluded?: boolean;
};

export type CollectionResource = {
    id?: number;
    title?: string | null;
    sortTitle?: string | null;
    tmdbId?: number;
    images?: Array<MediaCover> | null;
    overview?: string | null;
    monitored?: boolean;
    rootFolderPath?: string | null;
    qualityProfileId?: number;
    searchOnAdd?: boolean;
    minimumAvailability?: MovieStatusType;
    movies?: Array<CollectionMovieResource> | null;
    missingMovies?: number;
    tags?: Array<(number)> | null;
};

export type CollectionUpdateResource = {
    collectionIds?: Array<(number)> | null;
    monitored?: boolean | null;
    monitorMovies?: boolean | null;
    searchOnAdd?: boolean | null;
    qualityProfileId?: number | null;
    rootFolderPath?: string | null;
    minimumAvailability?: MovieStatusType;
};

export type ColonReplacementFormat = 'delete' | 'dash' | 'spaceDash' | 'spaceDashSpace';

export type Command = {
    sendUpdatesToClient?: boolean;
    readonly updateScheduledTask?: boolean;
    readonly completionMessage?: string | null;
    readonly requiresDiskAccess?: boolean;
    readonly isExclusive?: boolean;
    readonly isTypeExclusive?: boolean;
    readonly isLongRunning?: boolean;
    readonly name?: string | null;
    lastExecutionTime?: string | null;
    lastStartTime?: string | null;
    trigger?: CommandTrigger;
    suppressMessages?: boolean;
    clientUserAgent?: string | null;
};

export type CommandPriority = 'normal' | 'high' | 'low';

export type CommandResource = {
    id?: number;
    name?: string | null;
    commandName?: string | null;
    message?: string | null;
    body?: Command;
    priority?: CommandPriority;
    status?: CommandStatus;
    result?: CommandResult;
    queued?: string;
    started?: string | null;
    ended?: string | null;
    duration?: TimeSpan;
    exception?: string | null;
    trigger?: CommandTrigger;
    clientUserAgent?: string | null;
    stateChangeTime?: string | null;
    sendUpdatesToClient?: boolean;
    updateScheduledTask?: boolean;
    lastExecutionTime?: string | null;
};

export type CommandResult = 'unknown' | 'successful' | 'unsuccessful';

export type CommandStatus = 'queued' | 'started' | 'completed' | 'failed' | 'aborted' | 'cancelled' | 'orphaned';

export type CommandTrigger = 'unspecified' | 'manual' | 'scheduled';

export type CreditResource = {
    id?: number;
    personName?: string | null;
    creditTmdbId?: string | null;
    personTmdbId?: number;
    movieMetadataId?: number;
    images?: Array<MediaCover> | null;
    department?: string | null;
    job?: string | null;
    character?: string | null;
    order?: number;
    type?: CreditType;
};

export type CreditType = 'cast' | 'crew';

export type CustomFilterResource = {
    id?: number;
    type?: string | null;
    label?: string | null;
    filters?: Array<{
        [key: string]: unknown;
    }> | null;
};

export type CustomFormatResource = {
    id?: number;
    name?: string | null;
    includeCustomFormatWhenRenaming?: boolean | null;
    specifications?: Array<CustomFormatSpecificationSchema> | null;
};

export type CustomFormatSpecificationSchema = {
    id?: number;
    name?: string | null;
    implementation?: string | null;
    implementationName?: string | null;
    infoLink?: string | null;
    negate?: boolean;
    required?: boolean;
    fields?: Array<Field> | null;
    presets?: Array<CustomFormatSpecificationSchema> | null;
};

export type DatabaseType = 'sqLite' | 'postgreSQL';

export type DelayProfileResource = {
    id?: number;
    enableUsenet?: boolean;
    enableTorrent?: boolean;
    preferredProtocol?: DownloadProtocol;
    usenetDelay?: number;
    torrentDelay?: number;
    bypassIfHighestQuality?: boolean;
    bypassIfAboveCustomFormatScore?: boolean;
    minimumCustomFormatScore?: number;
    order?: number;
    tags?: Array<(number)> | null;
};

export type DiskSpaceResource = {
    id?: number;
    path?: string | null;
    label?: string | null;
    freeSpace?: number;
    totalSpace?: number;
};

export type DownloadClientBulkResource = {
    ids?: Array<(number)> | null;
    tags?: Array<(number)> | null;
    applyTags?: ApplyTags;
    enable?: boolean | null;
    priority?: number | null;
    removeCompletedDownloads?: boolean | null;
    removeFailedDownloads?: boolean | null;
};

export type DownloadClientConfigResource = {
    id?: number;
    downloadClientWorkingFolders?: string | null;
    enableCompletedDownloadHandling?: boolean;
    checkForFinishedDownloadInterval?: number;
    autoRedownloadFailed?: boolean;
    autoRedownloadFailedFromInteractiveSearch?: boolean;
};

export type DownloadClientResource = {
    id?: number;
    name?: string | null;
    fields?: Array<Field> | null;
    implementationName?: string | null;
    implementation?: string | null;
    configContract?: string | null;
    infoLink?: string | null;
    message?: ProviderMessage;
    tags?: Array<(number)> | null;
    presets?: Array<DownloadClientResource> | null;
    enable?: boolean;
    protocol?: DownloadProtocol;
    priority?: number;
    removeCompletedDownloads?: boolean;
    removeFailedDownloads?: boolean;
};

export type DownloadProtocol = 'unknown' | 'usenet' | 'torrent';

export type ExtraFileResource = {
    id?: number;
    movieId?: number;
    movieFileId?: number | null;
    relativePath?: string | null;
    extension?: string | null;
    type?: ExtraFileType;
};

export type ExtraFileType = 'subtitle' | 'metadata' | 'other';

export type Field = {
    order?: number;
    name?: string | null;
    label?: string | null;
    unit?: string | null;
    helpText?: string | null;
    helpTextWarning?: string | null;
    helpLink?: string | null;
    value?: unknown;
    type?: string | null;
    advanced?: boolean;
    selectOptions?: Array<SelectOption> | null;
    selectOptionsProviderAction?: string | null;
    section?: string | null;
    hidden?: string | null;
    privacy?: PrivacyLevel;
    placeholder?: string | null;
    isFloat?: boolean;
};

export type FileDateType = 'none' | 'cinemas' | 'release';

export type HealthCheckResult = 'ok' | 'notice' | 'warning' | 'error';

export type HealthResource = {
    id?: number;
    source?: string | null;
    type?: HealthCheckResult;
    message?: string | null;
    wikiUrl?: HttpUri;
};

export type HistoryResource = {
    id?: number;
    movieId?: number;
    sourceTitle?: string | null;
    languages?: Array<Language> | null;
    quality?: QualityModel;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
    qualityCutoffNotMet?: boolean;
    date?: string;
    downloadId?: string | null;
    eventType?: MovieHistoryEventType;
    data?: {
        [key: string]: (string | null);
    } | null;
    movie?: MovieResource;
};

export type HistoryResourcePagingResource = {
    page?: number;
    pageSize?: number;
    sortKey?: string | null;
    sortDirection?: SortDirection;
    totalRecords?: number;
    records?: Array<HistoryResource> | null;
};

export type HostConfigResource = {
    id?: number;
    bindAddress?: string | null;
    port?: number;
    sslPort?: number;
    enableSsl?: boolean;
    launchBrowser?: boolean;
    authenticationMethod?: AuthenticationType;
    authenticationRequired?: AuthenticationRequiredType;
    analyticsEnabled?: boolean;
    username?: string | null;
    password?: string | null;
    passwordConfirmation?: string | null;
    logLevel?: string | null;
    consoleLogLevel?: string | null;
    branch?: string | null;
    apiKey?: string | null;
    sslCertPath?: string | null;
    sslCertPassword?: string | null;
    urlBase?: string | null;
    instanceName?: string | null;
    applicationUrl?: string | null;
    updateAutomatically?: boolean;
    updateMechanism?: UpdateMechanism;
    updateScriptPath?: string | null;
    proxyEnabled?: boolean;
    proxyType?: ProxyType;
    proxyHostname?: string | null;
    proxyPort?: number;
    proxyUsername?: string | null;
    proxyPassword?: string | null;
    proxyBypassFilter?: string | null;
    proxyBypassLocalAddresses?: boolean;
    certificateValidation?: CertificateValidationType;
    backupFolder?: string | null;
    backupInterval?: number;
    backupRetention?: number;
};

export type HttpUri = {
    readonly fullUri?: string | null;
    readonly scheme?: string | null;
    readonly host?: string | null;
    readonly port?: number | null;
    readonly path?: string | null;
    readonly query?: string | null;
    readonly fragment?: string | null;
};

export type ImportExclusionsResource = {
    id?: number;
    name?: string | null;
    fields?: Array<Field> | null;
    implementationName?: string | null;
    implementation?: string | null;
    configContract?: string | null;
    infoLink?: string | null;
    message?: ProviderMessage;
    tags?: Array<(number)> | null;
    presets?: Array<ImportExclusionsResource> | null;
    tmdbId?: number;
    movieTitle?: string | null;
    movieYear?: number;
};

export type ImportListBulkResource = {
    ids?: Array<(number)> | null;
    tags?: Array<(number)> | null;
    applyTags?: ApplyTags;
    enabled?: boolean | null;
    enableAuto?: boolean | null;
    rootFolderPath?: string | null;
    qualityProfileId?: number | null;
    minimumAvailability?: MovieStatusType;
};

export type ImportListConfigResource = {
    id?: number;
    listSyncLevel?: string | null;
    importExclusions?: string | null;
};

export type ImportListResource = {
    id?: number;
    name?: string | null;
    fields?: Array<Field> | null;
    implementationName?: string | null;
    implementation?: string | null;
    configContract?: string | null;
    infoLink?: string | null;
    message?: ProviderMessage;
    tags?: Array<(number)> | null;
    presets?: Array<ImportListResource> | null;
    enabled?: boolean;
    enableAuto?: boolean;
    monitor?: MonitorTypes;
    rootFolderPath?: string | null;
    qualityProfileId?: number;
    searchOnAdd?: boolean;
    minimumAvailability?: MovieStatusType;
    listType?: ImportListType;
    listOrder?: number;
    minRefreshInterval?: TimeSpan;
};

export type ImportListType = 'program' | 'tmdb' | 'trakt' | 'plex' | 'simkl' | 'other' | 'advanced';

export type IndexerBulkResource = {
    ids?: Array<(number)> | null;
    tags?: Array<(number)> | null;
    applyTags?: ApplyTags;
    enableRss?: boolean | null;
    enableAutomaticSearch?: boolean | null;
    enableInteractiveSearch?: boolean | null;
    priority?: number | null;
};

export type IndexerConfigResource = {
    id?: number;
    minimumAge?: number;
    maximumSize?: number;
    retention?: number;
    rssSyncInterval?: number;
    preferIndexerFlags?: boolean;
    availabilityDelay?: number;
    allowHardcodedSubs?: boolean;
    whitelistedHardcodedSubs?: string | null;
};

export type IndexerFlagResource = {
    id?: number;
    name?: string | null;
    readonly nameLower?: string | null;
};

export type IndexerResource = {
    id?: number;
    name?: string | null;
    fields?: Array<Field> | null;
    implementationName?: string | null;
    implementation?: string | null;
    configContract?: string | null;
    infoLink?: string | null;
    message?: ProviderMessage;
    tags?: Array<(number)> | null;
    presets?: Array<IndexerResource> | null;
    enableRss?: boolean;
    enableAutomaticSearch?: boolean;
    enableInteractiveSearch?: boolean;
    supportsRss?: boolean;
    supportsSearch?: boolean;
    protocol?: DownloadProtocol;
    priority?: number;
    downloadClientId?: number;
};

export type Language = {
    id?: number;
    name?: string | null;
};

export type LanguageResource = {
    id?: number;
    name?: string | null;
    readonly nameLower?: string | null;
};

export type LocalizationLanguageResource = {
    identifier?: string | null;
};

export type LogFileResource = {
    id?: number;
    filename?: string | null;
    lastWriteTime?: string;
    contentsUrl?: string | null;
    downloadUrl?: string | null;
};

export type LogResource = {
    id?: number;
    time?: string;
    exception?: string | null;
    exceptionType?: string | null;
    level?: string | null;
    logger?: string | null;
    message?: string | null;
    method?: string | null;
};

export type LogResourcePagingResource = {
    page?: number;
    pageSize?: number;
    sortKey?: string | null;
    sortDirection?: SortDirection;
    totalRecords?: number;
    records?: Array<LogResource> | null;
};

export type ManualImportReprocessResource = {
    id?: number;
    path?: string | null;
    movieId?: number;
    movie?: MovieResource;
    quality?: QualityModel;
    languages?: Array<Language> | null;
    releaseGroup?: string | null;
    downloadId?: string | null;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
    indexerFlags?: number;
    rejections?: Array<Rejection> | null;
};

export type ManualImportResource = {
    id?: number;
    path?: string | null;
    relativePath?: string | null;
    folderName?: string | null;
    name?: string | null;
    size?: number;
    movie?: MovieResource;
    quality?: QualityModel;
    languages?: Array<Language> | null;
    releaseGroup?: string | null;
    qualityWeight?: number;
    downloadId?: string | null;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
    indexerFlags?: number;
    rejections?: Array<Rejection> | null;
};

export type MediaCover = {
    coverType?: MediaCoverTypes;
    url?: string | null;
    remoteUrl?: string | null;
};

export type MediaCoverTypes = 'unknown' | 'poster' | 'banner' | 'fanart' | 'screenshot' | 'headshot' | 'clearlogo';

export type MediaInfoResource = {
    id?: number;
    audioBitrate?: number;
    audioChannels?: number;
    audioCodec?: string | null;
    audioLanguages?: string | null;
    audioStreamCount?: number;
    videoBitDepth?: number;
    videoBitrate?: number;
    videoCodec?: string | null;
    videoFps?: number;
    videoDynamicRange?: string | null;
    videoDynamicRangeType?: string | null;
    resolution?: string | null;
    runTime?: string | null;
    scanType?: string | null;
    subtitles?: string | null;
};

export type MediaManagementConfigResource = {
    id?: number;
    autoUnmonitorPreviouslyDownloadedMovies?: boolean;
    recycleBin?: string | null;
    recycleBinCleanupDays?: number;
    downloadPropersAndRepacks?: ProperDownloadTypes;
    createEmptyMovieFolders?: boolean;
    deleteEmptyFolders?: boolean;
    fileDate?: FileDateType;
    rescanAfterRefresh?: RescanAfterRefreshType;
    autoRenameFolders?: boolean;
    pathsDefaultStatic?: boolean;
    setPermissionsLinux?: boolean;
    chmodFolder?: string | null;
    chownGroup?: string | null;
    skipFreeSpaceCheckWhenImporting?: boolean;
    minimumFreeSpaceWhenImporting?: number;
    copyUsingHardlinks?: boolean;
    useScriptImport?: boolean;
    scriptImportPath?: string | null;
    importExtraFiles?: boolean;
    extraFileExtensions?: string | null;
    enableMediaInfo?: boolean;
};

export type MetadataConfigResource = {
    id?: number;
    certificationCountry?: TMDbCountryCode;
};

export type MetadataResource = {
    id?: number;
    name?: string | null;
    fields?: Array<Field> | null;
    implementationName?: string | null;
    implementation?: string | null;
    configContract?: string | null;
    infoLink?: string | null;
    message?: ProviderMessage;
    tags?: Array<(number)> | null;
    presets?: Array<MetadataResource> | null;
    enable?: boolean;
};

export type Modifier = 'none' | 'regional' | 'screener' | 'rawhd' | 'brdisk' | 'remux';

export type MonitorTypes = 'movieOnly' | 'movieAndCollection' | 'none';

export type MovieCollectionResource = {
    title?: string | null;
    tmdbId?: number;
};

export type MovieEditorResource = {
    movieIds?: Array<(number)> | null;
    monitored?: boolean | null;
    qualityProfileId?: number | null;
    minimumAvailability?: MovieStatusType;
    rootFolderPath?: string | null;
    tags?: Array<(number)> | null;
    applyTags?: ApplyTags;
    moveFiles?: boolean;
    deleteFiles?: boolean;
    addImportExclusion?: boolean;
};

export type MovieFileListResource = {
    movieFileIds?: Array<(number)> | null;
    languages?: Array<Language> | null;
    quality?: QualityModel;
    edition?: string | null;
    releaseGroup?: string | null;
    sceneName?: string | null;
    indexerFlags?: number | null;
};

export type MovieFileResource = {
    id?: number;
    movieId?: number;
    relativePath?: string | null;
    path?: string | null;
    size?: number;
    dateAdded?: string;
    sceneName?: string | null;
    releaseGroup?: string | null;
    edition?: string | null;
    languages?: Array<Language> | null;
    quality?: QualityModel;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
    indexerFlags?: number | null;
    mediaInfo?: MediaInfoResource;
    originalFilePath?: string | null;
    qualityCutoffNotMet?: boolean;
};

export type MovieHistoryEventType = 'unknown' | 'grabbed' | 'downloadFolderImported' | 'downloadFailed' | 'movieFileDeleted' | 'movieFolderImported' | 'movieFileRenamed' | 'downloadIgnored';

export type MovieResource = {
    id?: number;
    title?: string | null;
    originalTitle?: string | null;
    originalLanguage?: Language;
    alternateTitles?: Array<AlternativeTitleResource> | null;
    secondaryYear?: number | null;
    secondaryYearSourceId?: number;
    sortTitle?: string | null;
    sizeOnDisk?: number | null;
    status?: MovieStatusType;
    overview?: string | null;
    inCinemas?: string | null;
    physicalRelease?: string | null;
    digitalRelease?: string | null;
    physicalReleaseNote?: string | null;
    images?: Array<MediaCover> | null;
    website?: string | null;
    remotePoster?: string | null;
    year?: number;
    youTubeTrailerId?: string | null;
    studio?: string | null;
    path?: string | null;
    qualityProfileId?: number;
    hasFile?: boolean | null;
    movieFileId?: number;
    monitored?: boolean;
    minimumAvailability?: MovieStatusType;
    isAvailable?: boolean;
    folderName?: string | null;
    runtime?: number;
    cleanTitle?: string | null;
    imdbId?: string | null;
    tmdbId?: number;
    titleSlug?: string | null;
    rootFolderPath?: string | null;
    folder?: string | null;
    certification?: string | null;
    genres?: Array<(string)> | null;
    tags?: Array<(number)> | null;
    added?: string;
    addOptions?: AddMovieOptions;
    ratings?: Ratings;
    movieFile?: MovieFileResource;
    collection?: MovieCollectionResource;
    popularity?: number;
    statistics?: MovieStatisticsResource;
    grabbed?: boolean;
};

export type MovieResourcePagingResource = {
    page?: number;
    pageSize?: number;
    sortKey?: string | null;
    sortDirection?: SortDirection;
    totalRecords?: number;
    records?: Array<MovieResource> | null;
};

export type MovieRuntimeFormatType = 'hoursMinutes' | 'minutes';

export type MovieStatisticsResource = {
    movieFileCount?: number;
    sizeOnDisk?: number;
    releaseGroups?: Array<(string)> | null;
};

export type MovieStatusType = 'tba' | 'announced' | 'inCinemas' | 'released' | 'deleted';

export type NamingConfigResource = {
    id?: number;
    renameMovies?: boolean;
    replaceIllegalCharacters?: boolean;
    colonReplacementFormat?: ColonReplacementFormat;
    standardMovieFormat?: string | null;
    movieFolderFormat?: string | null;
};

export type NotificationResource = {
    id?: number;
    name?: string | null;
    fields?: Array<Field> | null;
    implementationName?: string | null;
    implementation?: string | null;
    configContract?: string | null;
    infoLink?: string | null;
    message?: ProviderMessage;
    tags?: Array<(number)> | null;
    presets?: Array<NotificationResource> | null;
    link?: string | null;
    onGrab?: boolean;
    onDownload?: boolean;
    onUpgrade?: boolean;
    onRename?: boolean;
    onMovieAdded?: boolean;
    onMovieDelete?: boolean;
    onMovieFileDelete?: boolean;
    onMovieFileDeleteForUpgrade?: boolean;
    onHealthIssue?: boolean;
    includeHealthWarnings?: boolean;
    onHealthRestored?: boolean;
    onApplicationUpdate?: boolean;
    onManualInteractionRequired?: boolean;
    supportsOnGrab?: boolean;
    supportsOnDownload?: boolean;
    supportsOnUpgrade?: boolean;
    supportsOnRename?: boolean;
    supportsOnMovieAdded?: boolean;
    supportsOnMovieDelete?: boolean;
    supportsOnMovieFileDelete?: boolean;
    supportsOnMovieFileDeleteForUpgrade?: boolean;
    supportsOnHealthIssue?: boolean;
    supportsOnHealthRestored?: boolean;
    supportsOnApplicationUpdate?: boolean;
    supportsOnManualInteractionRequired?: boolean;
    testCommand?: string | null;
};

export type ParseResource = {
    id?: number;
    title?: string | null;
    parsedMovieInfo?: ParsedMovieInfo;
    movie?: MovieResource;
    languages?: Array<Language> | null;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
};

export type ParsedMovieInfo = {
    movieTitles?: Array<(string)> | null;
    originalTitle?: string | null;
    releaseTitle?: string | null;
    simpleReleaseTitle?: string | null;
    quality?: QualityModel;
    languages?: Array<Language> | null;
    releaseGroup?: string | null;
    releaseHash?: string | null;
    edition?: string | null;
    year?: number;
    imdbId?: string | null;
    tmdbId?: number;
    hardcodedSubs?: string | null;
    readonly movieTitle?: string | null;
    readonly primaryMovieTitle?: string | null;
};

export type PingResource = {
    status?: string | null;
};

export type PrivacyLevel = 'normal' | 'password' | 'apiKey' | 'userName';

export type ProfileFormatItemResource = {
    id?: number;
    format?: number;
    name?: string | null;
    score?: number;
};

export type ProperDownloadTypes = 'preferAndUpgrade' | 'doNotUpgrade' | 'doNotPrefer';

export type ProviderMessage = {
    message?: string | null;
    type?: ProviderMessageType;
};

export type ProviderMessageType = 'info' | 'warning' | 'error';

export type ProxyType = 'http' | 'socks4' | 'socks5';

export type Quality = {
    id?: number;
    name?: string | null;
    source?: QualitySource;
    resolution?: number;
    modifier?: Modifier;
};

export type QualityDefinitionResource = {
    id?: number;
    quality?: Quality;
    title?: string | null;
    weight?: number;
    minSize?: number | null;
    maxSize?: number | null;
    preferredSize?: number | null;
};

export type QualityModel = {
    quality?: Quality;
    revision?: Revision;
};

export type QualityProfileQualityItemResource = {
    id?: number;
    name?: string | null;
    quality?: Quality;
    items?: Array<QualityProfileQualityItemResource> | null;
    allowed?: boolean;
};

export type QualityProfileResource = {
    id?: number;
    name?: string | null;
    upgradeAllowed?: boolean;
    cutoff?: number;
    items?: Array<QualityProfileQualityItemResource> | null;
    minFormatScore?: number;
    cutoffFormatScore?: number;
    formatItems?: Array<ProfileFormatItemResource> | null;
    language?: Language;
};

export type QualitySource = 'unknown' | 'cam' | 'telesync' | 'telecine' | 'workprint' | 'dvd' | 'tv' | 'webdl' | 'webrip' | 'bluray';

export type QueueBulkResource = {
    ids?: Array<(number)> | null;
};

export type QueueResource = {
    id?: number;
    movieId?: number | null;
    movie?: MovieResource;
    languages?: Array<Language> | null;
    quality?: QualityModel;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
    size?: number;
    title?: string | null;
    sizeleft?: number;
    timeleft?: TimeSpan;
    estimatedCompletionTime?: string | null;
    added?: string | null;
    status?: string | null;
    trackedDownloadStatus?: TrackedDownloadStatus;
    trackedDownloadState?: TrackedDownloadState;
    statusMessages?: Array<TrackedDownloadStatusMessage> | null;
    errorMessage?: string | null;
    downloadId?: string | null;
    protocol?: DownloadProtocol;
    downloadClient?: string | null;
    downloadClientHasPostImportCategory?: boolean;
    indexer?: string | null;
    outputPath?: string | null;
};

export type QueueResourcePagingResource = {
    page?: number;
    pageSize?: number;
    sortKey?: string | null;
    sortDirection?: SortDirection;
    totalRecords?: number;
    records?: Array<QueueResource> | null;
};

export type QueueStatusResource = {
    id?: number;
    totalCount?: number;
    count?: number;
    unknownCount?: number;
    errors?: boolean;
    warnings?: boolean;
    unknownErrors?: boolean;
    unknownWarnings?: boolean;
};

export type RatingChild = {
    votes?: number;
    value?: number;
    type?: RatingType;
};

export type RatingType = 'user' | 'critic';

export type Ratings = {
    imdb?: RatingChild;
    tmdb?: RatingChild;
    metacritic?: RatingChild;
    rottenTomatoes?: RatingChild;
};

export type Rejection = {
    reason?: string | null;
    type?: RejectionType;
};

export type RejectionType = 'permanent' | 'temporary';

export type ReleaseProfileResource = {
    id?: number;
    name?: string | null;
    enabled?: boolean;
    required?: unknown;
    ignored?: unknown;
    indexerId?: number;
    tags?: Array<(number)> | null;
};

export type ReleaseResource = {
    id?: number;
    guid?: string | null;
    quality?: QualityModel;
    customFormats?: Array<CustomFormatResource> | null;
    customFormatScore?: number;
    qualityWeight?: number;
    age?: number;
    ageHours?: number;
    ageMinutes?: number;
    size?: number;
    indexerId?: number;
    indexer?: string | null;
    releaseGroup?: string | null;
    subGroup?: string | null;
    releaseHash?: string | null;
    title?: string | null;
    sceneSource?: boolean;
    movieTitles?: Array<(string)> | null;
    languages?: Array<Language> | null;
    mappedMovieId?: number | null;
    approved?: boolean;
    temporarilyRejected?: boolean;
    rejected?: boolean;
    tmdbId?: number;
    imdbId?: number;
    rejections?: Array<(string)> | null;
    publishDate?: string;
    commentUrl?: string | null;
    downloadUrl?: string | null;
    infoUrl?: string | null;
    downloadAllowed?: boolean;
    releaseWeight?: number;
    edition?: string | null;
    magnetUrl?: string | null;
    infoHash?: string | null;
    seeders?: number | null;
    leechers?: number | null;
    protocol?: DownloadProtocol;
    indexerFlags?: unknown;
    movieId?: number | null;
    downloadClientId?: number | null;
    downloadClient?: string | null;
    shouldOverride?: boolean | null;
};

export type RemotePathMappingResource = {
    id?: number;
    host?: string | null;
    remotePath?: string | null;
    localPath?: string | null;
};

export type RenameMovieResource = {
    id?: number;
    movieId?: number;
    movieFileId?: number;
    existingPath?: string | null;
    newPath?: string | null;
};

export type RescanAfterRefreshType = 'always' | 'afterManual' | 'never';

export type Revision = {
    version?: number;
    real?: number;
    isRepack?: boolean;
};

export type RootFolderResource = {
    id?: number;
    path?: string | null;
    accessible?: boolean;
    freeSpace?: number | null;
    unmappedFolders?: Array<UnmappedFolder> | null;
};

export type RuntimeMode = 'console' | 'service' | 'tray';

export type SelectOption = {
    value?: number;
    name?: string | null;
    order?: number;
    hint?: string | null;
    dividerAfter?: boolean;
};

export type SortDirection = 'default' | 'ascending' | 'descending';

export type SourceType = 'tmdb' | 'mappings' | 'user' | 'indexer';

export type SystemResource = {
    appName?: string | null;
    instanceName?: string | null;
    version?: string | null;
    buildTime?: string;
    isDebug?: boolean;
    isProduction?: boolean;
    isAdmin?: boolean;
    isUserInteractive?: boolean;
    startupPath?: string | null;
    appData?: string | null;
    osName?: string | null;
    osVersion?: string | null;
    isNetCore?: boolean;
    isLinux?: boolean;
    isOsx?: boolean;
    isWindows?: boolean;
    isDocker?: boolean;
    mode?: RuntimeMode;
    branch?: string | null;
    databaseType?: DatabaseType;
    databaseVersion?: Version;
    authentication?: AuthenticationType;
    migrationVersion?: number;
    urlBase?: string | null;
    runtimeVersion?: Version;
    runtimeName?: string | null;
    startTime?: string;
    packageVersion?: string | null;
    packageAuthor?: string | null;
    packageUpdateMechanism?: UpdateMechanism;
    packageUpdateMechanismMessage?: string | null;
};

export type TMDbCountryCode = 'au' | 'br' | 'ca' | 'fr' | 'de' | 'gb' | 'ie' | 'it' | 'es' | 'us' | 'nz';

export type TagDetailsResource = {
    id?: number;
    label?: string | null;
    delayProfileIds?: Array<(number)> | null;
    importListIds?: Array<(number)> | null;
    notificationIds?: Array<(number)> | null;
    releaseProfileIds?: Array<(number)> | null;
    indexerIds?: Array<(number)> | null;
    downloadClientIds?: Array<(number)> | null;
    autoTagIds?: Array<(number)> | null;
    movieIds?: Array<(number)> | null;
};

export type TagResource = {
    id?: number;
    label?: string | null;
};

export type TaskResource = {
    id?: number;
    name?: string | null;
    taskName?: string | null;
    interval?: number;
    lastExecution?: string;
    lastStartTime?: string;
    nextExecution?: string;
    lastDuration?: TimeSpan;
};

export type TimeSpan = {
    ticks?: number;
    readonly days?: number;
    readonly hours?: number;
    readonly milliseconds?: number;
    readonly minutes?: number;
    readonly seconds?: number;
    readonly totalDays?: number;
    readonly totalHours?: number;
    readonly totalMilliseconds?: number;
    readonly totalMinutes?: number;
    readonly totalSeconds?: number;
};

export type TrackedDownloadState = 'downloading' | 'importPending' | 'importing' | 'imported' | 'failedPending' | 'failed' | 'ignored';

export type TrackedDownloadStatus = 'ok' | 'warning' | 'error';

export type TrackedDownloadStatusMessage = {
    title?: string | null;
    messages?: Array<(string)> | null;
};

export type UiConfigResource = {
    id?: number;
    firstDayOfWeek?: number;
    calendarWeekColumnHeader?: string | null;
    movieRuntimeFormat?: MovieRuntimeFormatType;
    shortDateFormat?: string | null;
    longDateFormat?: string | null;
    timeFormat?: string | null;
    showRelativeDates?: boolean;
    enableColorImpairedMode?: boolean;
    movieInfoLanguage?: number;
    uiLanguage?: number;
    theme?: string | null;
};

export type UnmappedFolder = {
    name?: string | null;
    path?: string | null;
    relativePath?: string | null;
};

export type UpdateChanges = {
    new?: Array<(string)> | null;
    fixed?: Array<(string)> | null;
};

export type UpdateMechanism = 'builtIn' | 'script' | 'external' | 'apt' | 'docker';

export type UpdateResource = {
    id?: number;
    version?: Version;
    branch?: string | null;
    releaseDate?: string;
    fileName?: string | null;
    url?: string | null;
    installed?: boolean;
    installedOn?: string | null;
    installable?: boolean;
    latest?: boolean;
    changes?: UpdateChanges;
    hash?: string | null;
};

export type Version = {
    readonly major?: number;
    readonly minor?: number;
    readonly build?: number;
    readonly revision?: number;
    readonly majorRevision?: number;
    readonly minorRevision?: number;
};

export type GetApiV3AlttitleData = {
    movieId?: number;
    movieMetadataId?: number;
};

export type GetApiV3AlttitleResponse = Array<AlternativeTitleResource>;

export type GetApiV3AlttitleByIdData = {
    id: number;
};

export type GetApiV3AlttitleByIdResponse = AlternativeTitleResource;

export type GetApiResponse = ApiInfoResource;

export type PostLoginData = {
    formData?: {
        username?: string;
        password?: string;
        rememberMe?: string;
    };
    returnUrl?: string;
};

export type PostLoginResponse = unknown;

export type GetLogoutResponse = unknown;

export type GetLoginResponse = unknown;

export type GetContentByPathData = {
    path: string;
};

export type GetContentByPathResponse = unknown;

export type GetData = {
    path: string;
};

export type GetResponse = unknown;

export type GetByPathData = {
    path: string;
};

export type GetByPathResponse = unknown;

export type PostApiV3AutotaggingData = {
    requestBody?: AutoTaggingResource;
};

export type PostApiV3AutotaggingResponse = AutoTaggingResource;

export type GetApiV3AutotaggingResponse = Array<AutoTaggingResource>;

export type PutApiV3AutotaggingByIdData = {
    id: string;
    requestBody?: AutoTaggingResource;
};

export type PutApiV3AutotaggingByIdResponse = AutoTaggingResource;

export type DeleteApiV3AutotaggingByIdData = {
    id: number;
};

export type DeleteApiV3AutotaggingByIdResponse = unknown;

export type GetApiV3AutotaggingByIdData = {
    id: number;
};

export type GetApiV3AutotaggingByIdResponse = AutoTaggingResource;

export type GetApiV3AutotaggingSchemaResponse = unknown;

export type GetApiV3SystemBackupResponse = Array<BackupResource>;

export type DeleteApiV3SystemBackupByIdData = {
    id: number;
};

export type DeleteApiV3SystemBackupByIdResponse = unknown;

export type PostApiV3SystemBackupRestoreByIdData = {
    id: number;
};

export type PostApiV3SystemBackupRestoreByIdResponse = unknown;

export type PostApiV3SystemBackupRestoreUploadResponse = unknown;

export type GetApiV3BlocklistData = {
    movieIds?: Array<(number)>;
    page?: number;
    pageSize?: number;
    protocols?: Array<DownloadProtocol>;
    sortDirection?: SortDirection;
    sortKey?: string;
};

export type GetApiV3BlocklistResponse = BlocklistResourcePagingResource;

export type GetApiV3BlocklistMovieData = {
    movieId?: number;
};

export type GetApiV3BlocklistMovieResponse = Array<BlocklistResource>;

export type DeleteApiV3BlocklistByIdData = {
    id: number;
};

export type DeleteApiV3BlocklistByIdResponse = unknown;

export type DeleteApiV3BlocklistBulkData = {
    requestBody?: BlocklistBulkResource;
};

export type DeleteApiV3BlocklistBulkResponse = unknown;

export type GetApiV3CalendarData = {
    end?: string;
    start?: string;
    tags?: string;
    unmonitored?: boolean;
};

export type GetApiV3CalendarResponse = Array<MovieResource>;

export type GetFeedV3CalendarRadarrIcsData = {
    futureDays?: number;
    pastDays?: number;
    tags?: string;
    unmonitored?: boolean;
};

export type GetFeedV3CalendarRadarrIcsResponse = unknown;

export type GetApiV3CollectionData = {
    tmdbId?: number;
};

export type GetApiV3CollectionResponse = Array<CollectionResource>;

export type PutApiV3CollectionData = {
    requestBody?: CollectionUpdateResource;
};

export type PutApiV3CollectionResponse = unknown;

export type PutApiV3CollectionByIdData = {
    id: string;
    requestBody?: CollectionResource;
};

export type PutApiV3CollectionByIdResponse = CollectionResource;

export type GetApiV3CollectionByIdData = {
    id: number;
};

export type GetApiV3CollectionByIdResponse = CollectionResource;

export type PostApiV3CommandData = {
    requestBody?: CommandResource;
};

export type PostApiV3CommandResponse = CommandResource;

export type GetApiV3CommandResponse = Array<CommandResource>;

export type DeleteApiV3CommandByIdData = {
    id: number;
};

export type DeleteApiV3CommandByIdResponse = unknown;

export type GetApiV3CommandByIdData = {
    id: number;
};

export type GetApiV3CommandByIdResponse = CommandResource;

export type GetApiV3CreditData = {
    movieId?: number;
    movieMetadataId?: number;
};

export type GetApiV3CreditResponse = unknown;

export type GetApiV3CreditByIdData = {
    id: number;
};

export type GetApiV3CreditByIdResponse = CreditResource;

export type GetApiV3CustomfilterResponse = Array<CustomFilterResource>;

export type PostApiV3CustomfilterData = {
    requestBody?: CustomFilterResource;
};

export type PostApiV3CustomfilterResponse = CustomFilterResource;

export type PutApiV3CustomfilterByIdData = {
    id: string;
    requestBody?: CustomFilterResource;
};

export type PutApiV3CustomfilterByIdResponse = CustomFilterResource;

export type DeleteApiV3CustomfilterByIdData = {
    id: number;
};

export type DeleteApiV3CustomfilterByIdResponse = unknown;

export type GetApiV3CustomfilterByIdData = {
    id: number;
};

export type GetApiV3CustomfilterByIdResponse = CustomFilterResource;

export type PostApiV3CustomformatData = {
    requestBody?: CustomFormatResource;
};

export type PostApiV3CustomformatResponse = CustomFormatResource;

export type GetApiV3CustomformatResponse = Array<CustomFormatResource>;

export type PutApiV3CustomformatByIdData = {
    id: string;
    requestBody?: CustomFormatResource;
};

export type PutApiV3CustomformatByIdResponse = CustomFormatResource;

export type DeleteApiV3CustomformatByIdData = {
    id: number;
};

export type DeleteApiV3CustomformatByIdResponse = unknown;

export type GetApiV3CustomformatByIdData = {
    id: number;
};

export type GetApiV3CustomformatByIdResponse = CustomFormatResource;

export type GetApiV3CustomformatSchemaResponse = unknown;

export type GetApiV3WantedCutoffData = {
    monitored?: boolean;
    page?: number;
    pageSize?: number;
    sortDirection?: SortDirection;
    sortKey?: string;
};

export type GetApiV3WantedCutoffResponse = MovieResourcePagingResource;

export type PostApiV3DelayprofileData = {
    requestBody?: DelayProfileResource;
};

export type PostApiV3DelayprofileResponse = DelayProfileResource;

export type GetApiV3DelayprofileResponse = Array<DelayProfileResource>;

export type DeleteApiV3DelayprofileByIdData = {
    id: number;
};

export type DeleteApiV3DelayprofileByIdResponse = unknown;

export type PutApiV3DelayprofileByIdData = {
    id: string;
    requestBody?: DelayProfileResource;
};

export type PutApiV3DelayprofileByIdResponse = DelayProfileResource;

export type GetApiV3DelayprofileByIdData = {
    id: number;
};

export type GetApiV3DelayprofileByIdResponse = DelayProfileResource;

export type PutApiV3DelayprofileReorderByIdData = {
    after?: number;
    id: number;
};

export type PutApiV3DelayprofileReorderByIdResponse = Array<DelayProfileResource>;

export type GetApiV3DiskspaceResponse = Array<DiskSpaceResource>;

export type GetApiV3DownloadclientResponse = Array<DownloadClientResource>;

export type PostApiV3DownloadclientData = {
    forceSave?: boolean;
    requestBody?: DownloadClientResource;
};

export type PostApiV3DownloadclientResponse = DownloadClientResource;

export type PutApiV3DownloadclientByIdData = {
    forceSave?: boolean;
    id: string;
    requestBody?: DownloadClientResource;
};

export type PutApiV3DownloadclientByIdResponse = DownloadClientResource;

export type DeleteApiV3DownloadclientByIdData = {
    id: number;
};

export type DeleteApiV3DownloadclientByIdResponse = unknown;

export type GetApiV3DownloadclientByIdData = {
    id: number;
};

export type GetApiV3DownloadclientByIdResponse = DownloadClientResource;

export type PutApiV3DownloadclientBulkData = {
    requestBody?: DownloadClientBulkResource;
};

export type PutApiV3DownloadclientBulkResponse = DownloadClientResource;

export type DeleteApiV3DownloadclientBulkData = {
    requestBody?: DownloadClientBulkResource;
};

export type DeleteApiV3DownloadclientBulkResponse = unknown;

export type GetApiV3DownloadclientSchemaResponse = Array<DownloadClientResource>;

export type PostApiV3DownloadclientTestData = {
    forceTest?: boolean;
    requestBody?: DownloadClientResource;
};

export type PostApiV3DownloadclientTestResponse = unknown;

export type PostApiV3DownloadclientTestallResponse = unknown;

export type PostApiV3DownloadclientActionByNameData = {
    name: string;
    requestBody?: DownloadClientResource;
};

export type PostApiV3DownloadclientActionByNameResponse = unknown;

export type GetApiV3ConfigDownloadclientResponse = DownloadClientConfigResource;

export type PutApiV3ConfigDownloadclientByIdData = {
    id: string;
    requestBody?: DownloadClientConfigResource;
};

export type PutApiV3ConfigDownloadclientByIdResponse = DownloadClientConfigResource;

export type GetApiV3ConfigDownloadclientByIdData = {
    id: number;
};

export type GetApiV3ConfigDownloadclientByIdResponse = DownloadClientConfigResource;

export type GetApiV3ExtrafileData = {
    movieId?: number;
};

export type GetApiV3ExtrafileResponse = Array<ExtraFileResource>;

export type GetApiV3FilesystemData = {
    allowFoldersWithoutTrailingSlashes?: boolean;
    includeFiles?: boolean;
    path?: string;
};

export type GetApiV3FilesystemResponse = unknown;

export type GetApiV3FilesystemTypeData = {
    path?: string;
};

export type GetApiV3FilesystemTypeResponse = unknown;

export type GetApiV3FilesystemMediafilesData = {
    path?: string;
};

export type GetApiV3FilesystemMediafilesResponse = unknown;

export type GetApiV3HealthResponse = Array<HealthResource>;

export type GetApiV3HistoryData = {
    downloadId?: string;
    eventType?: Array<(number)>;
    includeMovie?: boolean;
    languages?: Array<(number)>;
    movieIds?: Array<(number)>;
    page?: number;
    pageSize?: number;
    quality?: Array<(number)>;
    sortDirection?: SortDirection;
    sortKey?: string;
};

export type GetApiV3HistoryResponse = HistoryResourcePagingResource;

export type GetApiV3HistorySinceData = {
    date?: string;
    eventType?: MovieHistoryEventType;
    includeMovie?: boolean;
};

export type GetApiV3HistorySinceResponse = Array<HistoryResource>;

export type GetApiV3HistoryMovieData = {
    eventType?: MovieHistoryEventType;
    includeMovie?: boolean;
    movieId?: number;
};

export type GetApiV3HistoryMovieResponse = Array<HistoryResource>;

export type PostApiV3HistoryFailedByIdData = {
    id: number;
};

export type PostApiV3HistoryFailedByIdResponse = unknown;

export type GetApiV3ConfigHostResponse = HostConfigResource;

export type PutApiV3ConfigHostByIdData = {
    id: string;
    requestBody?: HostConfigResource;
};

export type PutApiV3ConfigHostByIdResponse = HostConfigResource;

export type GetApiV3ConfigHostByIdData = {
    id: number;
};

export type GetApiV3ConfigHostByIdResponse = HostConfigResource;

export type GetApiV3ExclusionsResponse = Array<ImportExclusionsResource>;

export type PostApiV3ExclusionsData = {
    requestBody?: ImportExclusionsResource;
};

export type PostApiV3ExclusionsResponse = ImportExclusionsResource;

export type PutApiV3ExclusionsByIdData = {
    id: string;
    requestBody?: ImportExclusionsResource;
};

export type PutApiV3ExclusionsByIdResponse = ImportExclusionsResource;

export type DeleteApiV3ExclusionsByIdData = {
    id: number;
};

export type DeleteApiV3ExclusionsByIdResponse = unknown;

export type GetApiV3ExclusionsByIdData = {
    id: number;
};

export type GetApiV3ExclusionsByIdResponse = ImportExclusionsResource;

export type PostApiV3ExclusionsBulkData = {
    requestBody?: Array<ImportExclusionsResource>;
};

export type PostApiV3ExclusionsBulkResponse = unknown;

export type GetApiV3ImportlistResponse = Array<ImportListResource>;

export type PostApiV3ImportlistData = {
    forceSave?: boolean;
    requestBody?: ImportListResource;
};

export type PostApiV3ImportlistResponse = ImportListResource;

export type PutApiV3ImportlistByIdData = {
    forceSave?: boolean;
    id: string;
    requestBody?: ImportListResource;
};

export type PutApiV3ImportlistByIdResponse = ImportListResource;

export type DeleteApiV3ImportlistByIdData = {
    id: number;
};

export type DeleteApiV3ImportlistByIdResponse = unknown;

export type GetApiV3ImportlistByIdData = {
    id: number;
};

export type GetApiV3ImportlistByIdResponse = ImportListResource;

export type PutApiV3ImportlistBulkData = {
    requestBody?: ImportListBulkResource;
};

export type PutApiV3ImportlistBulkResponse = ImportListResource;

export type DeleteApiV3ImportlistBulkData = {
    requestBody?: ImportListBulkResource;
};

export type DeleteApiV3ImportlistBulkResponse = unknown;

export type GetApiV3ImportlistSchemaResponse = Array<ImportListResource>;

export type PostApiV3ImportlistTestData = {
    forceTest?: boolean;
    requestBody?: ImportListResource;
};

export type PostApiV3ImportlistTestResponse = unknown;

export type PostApiV3ImportlistTestallResponse = unknown;

export type PostApiV3ImportlistActionByNameData = {
    name: string;
    requestBody?: ImportListResource;
};

export type PostApiV3ImportlistActionByNameResponse = unknown;

export type GetApiV3ConfigImportlistResponse = ImportListConfigResource;

export type PutApiV3ConfigImportlistByIdData = {
    id: string;
    requestBody?: ImportListConfigResource;
};

export type PutApiV3ConfigImportlistByIdResponse = ImportListConfigResource;

export type GetApiV3ConfigImportlistByIdData = {
    id: number;
};

export type GetApiV3ConfigImportlistByIdResponse = ImportListConfigResource;

export type GetApiV3ImportlistMovieData = {
    includePopular?: boolean;
    includeRecommendations?: boolean;
    includeTrending?: boolean;
};

export type GetApiV3ImportlistMovieResponse = unknown;

export type PostApiV3ImportlistMovieData = {
    requestBody?: Array<MovieResource>;
};

export type PostApiV3ImportlistMovieResponse = unknown;

export type GetApiV3IndexerResponse = Array<IndexerResource>;

export type PostApiV3IndexerData = {
    forceSave?: boolean;
    requestBody?: IndexerResource;
};

export type PostApiV3IndexerResponse = IndexerResource;

export type PutApiV3IndexerByIdData = {
    forceSave?: boolean;
    id: string;
    requestBody?: IndexerResource;
};

export type PutApiV3IndexerByIdResponse = IndexerResource;

export type DeleteApiV3IndexerByIdData = {
    id: number;
};

export type DeleteApiV3IndexerByIdResponse = unknown;

export type GetApiV3IndexerByIdData = {
    id: number;
};

export type GetApiV3IndexerByIdResponse = IndexerResource;

export type PutApiV3IndexerBulkData = {
    requestBody?: IndexerBulkResource;
};

export type PutApiV3IndexerBulkResponse = IndexerResource;

export type DeleteApiV3IndexerBulkData = {
    requestBody?: IndexerBulkResource;
};

export type DeleteApiV3IndexerBulkResponse = unknown;

export type GetApiV3IndexerSchemaResponse = Array<IndexerResource>;

export type PostApiV3IndexerTestData = {
    forceTest?: boolean;
    requestBody?: IndexerResource;
};

export type PostApiV3IndexerTestResponse = unknown;

export type PostApiV3IndexerTestallResponse = unknown;

export type PostApiV3IndexerActionByNameData = {
    name: string;
    requestBody?: IndexerResource;
};

export type PostApiV3IndexerActionByNameResponse = unknown;

export type GetApiV3ConfigIndexerResponse = IndexerConfigResource;

export type PutApiV3ConfigIndexerByIdData = {
    id: string;
    requestBody?: IndexerConfigResource;
};

export type PutApiV3ConfigIndexerByIdResponse = IndexerConfigResource;

export type GetApiV3ConfigIndexerByIdData = {
    id: number;
};

export type GetApiV3ConfigIndexerByIdResponse = IndexerConfigResource;

export type GetApiV3IndexerflagResponse = Array<IndexerFlagResource>;

export type GetApiV3LanguageResponse = Array<LanguageResource>;

export type GetApiV3LanguageByIdData = {
    id: number;
};

export type GetApiV3LanguageByIdResponse = LanguageResource;

export type GetApiV3LocalizationResponse = string;

export type GetApiV3LocalizationLanguageResponse = LocalizationLanguageResource;

export type GetApiV3LogData = {
    level?: string;
    page?: number;
    pageSize?: number;
    sortDirection?: SortDirection;
    sortKey?: string;
};

export type GetApiV3LogResponse = LogResourcePagingResource;

export type GetApiV3LogFileResponse = Array<LogFileResource>;

export type GetApiV3LogFileByFilenameData = {
    filename: string;
};

export type GetApiV3LogFileByFilenameResponse = unknown;

export type GetApiV3ManualimportData = {
    downloadId?: string;
    filterExistingFiles?: boolean;
    folder?: string;
    movieId?: number;
};

export type GetApiV3ManualimportResponse = Array<ManualImportResource>;

export type PostApiV3ManualimportData = {
    requestBody?: Array<ManualImportReprocessResource>;
};

export type PostApiV3ManualimportResponse = unknown;

export type GetApiV3MediacoverByMovieIdByFilenameData = {
    filename: string;
    movieId: number;
};

export type GetApiV3MediacoverByMovieIdByFilenameResponse = unknown;

export type GetApiV3ConfigMediamanagementResponse = MediaManagementConfigResource;

export type PutApiV3ConfigMediamanagementByIdData = {
    id: string;
    requestBody?: MediaManagementConfigResource;
};

export type PutApiV3ConfigMediamanagementByIdResponse = MediaManagementConfigResource;

export type GetApiV3ConfigMediamanagementByIdData = {
    id: number;
};

export type GetApiV3ConfigMediamanagementByIdResponse = MediaManagementConfigResource;

export type GetApiV3MetadataResponse = Array<MetadataResource>;

export type PostApiV3MetadataData = {
    forceSave?: boolean;
    requestBody?: MetadataResource;
};

export type PostApiV3MetadataResponse = MetadataResource;

export type PutApiV3MetadataByIdData = {
    forceSave?: boolean;
    id: string;
    requestBody?: MetadataResource;
};

export type PutApiV3MetadataByIdResponse = MetadataResource;

export type DeleteApiV3MetadataByIdData = {
    id: number;
};

export type DeleteApiV3MetadataByIdResponse = unknown;

export type GetApiV3MetadataByIdData = {
    id: number;
};

export type GetApiV3MetadataByIdResponse = MetadataResource;

export type GetApiV3MetadataSchemaResponse = Array<MetadataResource>;

export type PostApiV3MetadataTestData = {
    forceTest?: boolean;
    requestBody?: MetadataResource;
};

export type PostApiV3MetadataTestResponse = unknown;

export type PostApiV3MetadataTestallResponse = unknown;

export type PostApiV3MetadataActionByNameData = {
    name: string;
    requestBody?: MetadataResource;
};

export type PostApiV3MetadataActionByNameResponse = unknown;

export type GetApiV3ConfigMetadataResponse = MetadataConfigResource;

export type PutApiV3ConfigMetadataByIdData = {
    id: string;
    requestBody?: MetadataConfigResource;
};

export type PutApiV3ConfigMetadataByIdResponse = MetadataConfigResource;

export type GetApiV3ConfigMetadataByIdData = {
    id: number;
};

export type GetApiV3ConfigMetadataByIdResponse = MetadataConfigResource;

export type GetApiV3WantedMissingData = {
    monitored?: boolean;
    page?: number;
    pageSize?: number;
    sortDirection?: SortDirection;
    sortKey?: string;
};

export type GetApiV3WantedMissingResponse = MovieResourcePagingResource;

export type GetApiV3MovieData = {
    excludeLocalCovers?: boolean;
    languageId?: number;
    tmdbId?: number;
};

export type GetApiV3MovieResponse = Array<MovieResource>;

export type PostApiV3MovieData = {
    requestBody?: MovieResource;
};

export type PostApiV3MovieResponse = MovieResource;

export type PutApiV3MovieByIdData = {
    id: string;
    moveFiles?: boolean;
    requestBody?: MovieResource;
};

export type PutApiV3MovieByIdResponse = MovieResource;

export type DeleteApiV3MovieByIdData = {
    addImportExclusion?: boolean;
    deleteFiles?: boolean;
    id: number;
};

export type DeleteApiV3MovieByIdResponse = unknown;

export type GetApiV3MovieByIdData = {
    id: number;
};

export type GetApiV3MovieByIdResponse = MovieResource;

export type PutApiV3MovieEditorData = {
    requestBody?: MovieEditorResource;
};

export type PutApiV3MovieEditorResponse = unknown;

export type DeleteApiV3MovieEditorData = {
    requestBody?: MovieEditorResource;
};

export type DeleteApiV3MovieEditorResponse = unknown;

export type GetApiV3MoviefileData = {
    movieFileIds?: Array<(number)>;
    movieId?: Array<(number)>;
};

export type GetApiV3MoviefileResponse = Array<MovieFileResource>;

export type PutApiV3MoviefileByIdData = {
    id: string;
    requestBody?: MovieFileResource;
};

export type PutApiV3MoviefileByIdResponse = MovieFileResource;

export type DeleteApiV3MoviefileByIdData = {
    id: number;
};

export type DeleteApiV3MoviefileByIdResponse = unknown;

export type GetApiV3MoviefileByIdData = {
    id: number;
};

export type GetApiV3MoviefileByIdResponse = MovieFileResource;

export type PutApiV3MoviefileEditorData = {
    requestBody?: MovieFileListResource;
};

export type PutApiV3MoviefileEditorResponse = unknown;

export type DeleteApiV3MoviefileBulkData = {
    requestBody?: MovieFileListResource;
};

export type DeleteApiV3MoviefileBulkResponse = unknown;

export type PostApiV3MovieImportData = {
    requestBody?: Array<MovieResource>;
};

export type PostApiV3MovieImportResponse = unknown;

export type GetApiV3MovieLookupTmdbData = {
    tmdbId?: number;
};

export type GetApiV3MovieLookupTmdbResponse = unknown;

export type GetApiV3MovieLookupImdbData = {
    imdbId?: string;
};

export type GetApiV3MovieLookupImdbResponse = unknown;

export type GetApiV3MovieLookupData = {
    term?: string;
};

export type GetApiV3MovieLookupResponse = unknown;

export type GetApiV3ConfigNamingResponse = NamingConfigResource;

export type PutApiV3ConfigNamingByIdData = {
    id: string;
    requestBody?: NamingConfigResource;
};

export type PutApiV3ConfigNamingByIdResponse = NamingConfigResource;

export type GetApiV3ConfigNamingByIdData = {
    id: number;
};

export type GetApiV3ConfigNamingByIdResponse = NamingConfigResource;

export type GetApiV3ConfigNamingExamplesData = {
    colonReplacementFormat?: ColonReplacementFormat;
    id?: number;
    movieFolderFormat?: string;
    renameMovies?: boolean;
    replaceIllegalCharacters?: boolean;
    resourceName?: string;
    standardMovieFormat?: string;
};

export type GetApiV3ConfigNamingExamplesResponse = unknown;

export type GetApiV3NotificationResponse = Array<NotificationResource>;

export type PostApiV3NotificationData = {
    forceSave?: boolean;
    requestBody?: NotificationResource;
};

export type PostApiV3NotificationResponse = NotificationResource;

export type PutApiV3NotificationByIdData = {
    forceSave?: boolean;
    id: string;
    requestBody?: NotificationResource;
};

export type PutApiV3NotificationByIdResponse = NotificationResource;

export type DeleteApiV3NotificationByIdData = {
    id: number;
};

export type DeleteApiV3NotificationByIdResponse = unknown;

export type GetApiV3NotificationByIdData = {
    id: number;
};

export type GetApiV3NotificationByIdResponse = NotificationResource;

export type GetApiV3NotificationSchemaResponse = Array<NotificationResource>;

export type PostApiV3NotificationTestData = {
    forceTest?: boolean;
    requestBody?: NotificationResource;
};

export type PostApiV3NotificationTestResponse = unknown;

export type PostApiV3NotificationTestallResponse = unknown;

export type PostApiV3NotificationActionByNameData = {
    name: string;
    requestBody?: NotificationResource;
};

export type PostApiV3NotificationActionByNameResponse = unknown;

export type GetApiV3ParseData = {
    title?: string;
};

export type GetApiV3ParseResponse = ParseResource;

export type GetPingResponse = PingResource;

export type HeadPingResponse = PingResource;

export type PutApiV3QualitydefinitionByIdData = {
    id: string;
    requestBody?: QualityDefinitionResource;
};

export type PutApiV3QualitydefinitionByIdResponse = QualityDefinitionResource;

export type GetApiV3QualitydefinitionByIdData = {
    id: number;
};

export type GetApiV3QualitydefinitionByIdResponse = QualityDefinitionResource;

export type GetApiV3QualitydefinitionResponse = Array<QualityDefinitionResource>;

export type PutApiV3QualitydefinitionUpdateData = {
    requestBody?: Array<QualityDefinitionResource>;
};

export type PutApiV3QualitydefinitionUpdateResponse = unknown;

export type PostApiV3QualityprofileData = {
    requestBody?: QualityProfileResource;
};

export type PostApiV3QualityprofileResponse = QualityProfileResource;

export type GetApiV3QualityprofileResponse = Array<QualityProfileResource>;

export type DeleteApiV3QualityprofileByIdData = {
    id: number;
};

export type DeleteApiV3QualityprofileByIdResponse = unknown;

export type PutApiV3QualityprofileByIdData = {
    id: string;
    requestBody?: QualityProfileResource;
};

export type PutApiV3QualityprofileByIdResponse = QualityProfileResource;

export type GetApiV3QualityprofileByIdData = {
    id: number;
};

export type GetApiV3QualityprofileByIdResponse = QualityProfileResource;

export type GetApiV3QualityprofileSchemaResponse = QualityProfileResource;

export type DeleteApiV3QueueByIdData = {
    blocklist?: boolean;
    changeCategory?: boolean;
    id: number;
    removeFromClient?: boolean;
    skipRedownload?: boolean;
};

export type DeleteApiV3QueueByIdResponse = unknown;

export type DeleteApiV3QueueBulkData = {
    blocklist?: boolean;
    changeCategory?: boolean;
    removeFromClient?: boolean;
    requestBody?: QueueBulkResource;
    skipRedownload?: boolean;
};

export type DeleteApiV3QueueBulkResponse = unknown;

export type GetApiV3QueueData = {
    includeMovie?: boolean;
    includeUnknownMovieItems?: boolean;
    languages?: Array<(number)>;
    movieIds?: Array<(number)>;
    page?: number;
    pageSize?: number;
    protocol?: DownloadProtocol;
    quality?: number;
    sortDirection?: SortDirection;
    sortKey?: string;
};

export type GetApiV3QueueResponse = QueueResourcePagingResource;

export type PostApiV3QueueGrabByIdData = {
    id: number;
};

export type PostApiV3QueueGrabByIdResponse = unknown;

export type PostApiV3QueueGrabBulkData = {
    requestBody?: QueueBulkResource;
};

export type PostApiV3QueueGrabBulkResponse = unknown;

export type GetApiV3QueueDetailsData = {
    includeMovie?: boolean;
    movieId?: number;
};

export type GetApiV3QueueDetailsResponse = Array<QueueResource>;

export type GetApiV3QueueStatusResponse = QueueStatusResource;

export type PostApiV3ReleaseData = {
    requestBody?: ReleaseResource;
};

export type PostApiV3ReleaseResponse = unknown;

export type GetApiV3ReleaseData = {
    movieId?: number;
};

export type GetApiV3ReleaseResponse = Array<ReleaseResource>;

export type PostApiV3ReleaseprofileData = {
    requestBody?: ReleaseProfileResource;
};

export type PostApiV3ReleaseprofileResponse = ReleaseProfileResource;

export type GetApiV3ReleaseprofileResponse = Array<ReleaseProfileResource>;

export type DeleteApiV3ReleaseprofileByIdData = {
    id: number;
};

export type DeleteApiV3ReleaseprofileByIdResponse = unknown;

export type PutApiV3ReleaseprofileByIdData = {
    id: string;
    requestBody?: ReleaseProfileResource;
};

export type PutApiV3ReleaseprofileByIdResponse = ReleaseProfileResource;

export type GetApiV3ReleaseprofileByIdData = {
    id: number;
};

export type GetApiV3ReleaseprofileByIdResponse = ReleaseProfileResource;

export type PostApiV3ReleasePushData = {
    requestBody?: ReleaseResource;
};

export type PostApiV3ReleasePushResponse = Array<ReleaseResource>;

export type PostApiV3RemotepathmappingData = {
    requestBody?: RemotePathMappingResource;
};

export type PostApiV3RemotepathmappingResponse = RemotePathMappingResource;

export type GetApiV3RemotepathmappingResponse = Array<RemotePathMappingResource>;

export type DeleteApiV3RemotepathmappingByIdData = {
    id: number;
};

export type DeleteApiV3RemotepathmappingByIdResponse = unknown;

export type PutApiV3RemotepathmappingByIdData = {
    id: string;
    requestBody?: RemotePathMappingResource;
};

export type PutApiV3RemotepathmappingByIdResponse = RemotePathMappingResource;

export type GetApiV3RemotepathmappingByIdData = {
    id: number;
};

export type GetApiV3RemotepathmappingByIdResponse = RemotePathMappingResource;

export type GetApiV3RenameData = {
    movieId?: number;
};

export type GetApiV3RenameResponse = Array<RenameMovieResource>;

export type PostApiV3RootfolderData = {
    requestBody?: RootFolderResource;
};

export type PostApiV3RootfolderResponse = RootFolderResource;

export type GetApiV3RootfolderResponse = Array<RootFolderResource>;

export type DeleteApiV3RootfolderByIdData = {
    id: number;
};

export type DeleteApiV3RootfolderByIdResponse = unknown;

export type GetApiV3RootfolderByIdData = {
    id: number;
};

export type GetApiV3RootfolderByIdResponse = RootFolderResource;

export type GetApiV3SystemStatusResponse = SystemResource;

export type GetApiV3SystemRoutesResponse = unknown;

export type GetApiV3SystemRoutesDuplicateResponse = unknown;

export type PostApiV3SystemShutdownResponse = unknown;

export type PostApiV3SystemRestartResponse = unknown;

export type GetApiV3TagResponse = Array<TagResource>;

export type PostApiV3TagData = {
    requestBody?: TagResource;
};

export type PostApiV3TagResponse = TagResource;

export type PutApiV3TagByIdData = {
    id: string;
    requestBody?: TagResource;
};

export type PutApiV3TagByIdResponse = TagResource;

export type DeleteApiV3TagByIdData = {
    id: number;
};

export type DeleteApiV3TagByIdResponse = unknown;

export type GetApiV3TagByIdData = {
    id: number;
};

export type GetApiV3TagByIdResponse = TagResource;

export type GetApiV3TagDetailResponse = Array<TagDetailsResource>;

export type GetApiV3TagDetailByIdData = {
    id: number;
};

export type GetApiV3TagDetailByIdResponse = TagDetailsResource;

export type GetApiV3SystemTaskResponse = Array<TaskResource>;

export type GetApiV3SystemTaskByIdData = {
    id: number;
};

export type GetApiV3SystemTaskByIdResponse = TaskResource;

export type PutApiV3ConfigUiByIdData = {
    id: string;
    requestBody?: UiConfigResource;
};

export type PutApiV3ConfigUiByIdResponse = UiConfigResource;

export type GetApiV3ConfigUiByIdData = {
    id: number;
};

export type GetApiV3ConfigUiByIdResponse = UiConfigResource;

export type GetApiV3ConfigUiResponse = UiConfigResource;

export type GetApiV3UpdateResponse = Array<UpdateResource>;

export type GetApiV3LogFileUpdateResponse = Array<LogFileResource>;

export type GetApiV3LogFileUpdateByFilenameData = {
    filename: string;
};

export type GetApiV3LogFileUpdateByFilenameResponse = unknown;

export type $OpenApiTs = {
    '/api/v3/alttitle': {
        get: {
            req: {
                movieId?: number;
                movieMetadataId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<AlternativeTitleResource>;
            };
        };
    };
    '/api/v3/alttitle/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: AlternativeTitleResource;
            };
        };
    };
    '/api': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: ApiInfoResource;
            };
        };
    };
    '/login': {
        post: {
            req: {
                formData?: {
                    username?: string;
                    password?: string;
                    rememberMe?: string;
                };
                returnUrl?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/logout': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/content/{path}': {
        get: {
            req: {
                path: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/': {
        get: {
            req: {
                path: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/{path}': {
        get: {
            req: {
                path: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/autotagging': {
        post: {
            req: {
                requestBody?: AutoTaggingResource;
            };
            res: {
                /**
                 * Success
                 */
                200: AutoTaggingResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<AutoTaggingResource>;
            };
        };
    };
    '/api/v3/autotagging/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: AutoTaggingResource;
            };
            res: {
                /**
                 * Success
                 */
                200: AutoTaggingResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: AutoTaggingResource;
            };
        };
    };
    '/api/v3/autotagging/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/system/backup': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<BackupResource>;
            };
        };
    };
    '/api/v3/system/backup/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/system/backup/restore/{id}': {
        post: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/system/backup/restore/upload': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/blocklist': {
        get: {
            req: {
                movieIds?: Array<(number)>;
                page?: number;
                pageSize?: number;
                protocols?: Array<DownloadProtocol>;
                sortDirection?: SortDirection;
                sortKey?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: BlocklistResourcePagingResource;
            };
        };
    };
    '/api/v3/blocklist/movie': {
        get: {
            req: {
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<BlocklistResource>;
            };
        };
    };
    '/api/v3/blocklist/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/blocklist/bulk': {
        delete: {
            req: {
                requestBody?: BlocklistBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/calendar': {
        get: {
            req: {
                end?: string;
                start?: string;
                tags?: string;
                unmonitored?: boolean;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<MovieResource>;
            };
        };
    };
    '/feed/v3/calendar/radarr.ics': {
        get: {
            req: {
                futureDays?: number;
                pastDays?: number;
                tags?: string;
                unmonitored?: boolean;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/collection': {
        get: {
            req: {
                tmdbId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<CollectionResource>;
            };
        };
        put: {
            req: {
                requestBody?: CollectionUpdateResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/collection/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: CollectionResource;
            };
            res: {
                /**
                 * Success
                 */
                200: CollectionResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: CollectionResource;
            };
        };
    };
    '/api/v3/command': {
        post: {
            req: {
                requestBody?: CommandResource;
            };
            res: {
                /**
                 * Success
                 */
                200: CommandResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<CommandResource>;
            };
        };
    };
    '/api/v3/command/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: CommandResource;
            };
        };
    };
    '/api/v3/credit': {
        get: {
            req: {
                movieId?: number;
                movieMetadataId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/credit/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: CreditResource;
            };
        };
    };
    '/api/v3/customfilter': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<CustomFilterResource>;
            };
        };
        post: {
            req: {
                requestBody?: CustomFilterResource;
            };
            res: {
                /**
                 * Success
                 */
                200: CustomFilterResource;
            };
        };
    };
    '/api/v3/customfilter/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: CustomFilterResource;
            };
            res: {
                /**
                 * Success
                 */
                200: CustomFilterResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: CustomFilterResource;
            };
        };
    };
    '/api/v3/customformat': {
        post: {
            req: {
                requestBody?: CustomFormatResource;
            };
            res: {
                /**
                 * Success
                 */
                200: CustomFormatResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<CustomFormatResource>;
            };
        };
    };
    '/api/v3/customformat/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: CustomFormatResource;
            };
            res: {
                /**
                 * Success
                 */
                200: CustomFormatResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: CustomFormatResource;
            };
        };
    };
    '/api/v3/customformat/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/wanted/cutoff': {
        get: {
            req: {
                monitored?: boolean;
                page?: number;
                pageSize?: number;
                sortDirection?: SortDirection;
                sortKey?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieResourcePagingResource;
            };
        };
    };
    '/api/v3/delayprofile': {
        post: {
            req: {
                requestBody?: DelayProfileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: DelayProfileResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<DelayProfileResource>;
            };
        };
    };
    '/api/v3/delayprofile/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        put: {
            req: {
                id: string;
                requestBody?: DelayProfileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: DelayProfileResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: DelayProfileResource;
            };
        };
    };
    '/api/v3/delayprofile/reorder/{id}': {
        put: {
            req: {
                after?: number;
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<DelayProfileResource>;
            };
        };
    };
    '/api/v3/diskspace': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<DiskSpaceResource>;
            };
        };
    };
    '/api/v3/downloadclient': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<DownloadClientResource>;
            };
        };
        post: {
            req: {
                forceSave?: boolean;
                requestBody?: DownloadClientResource;
            };
            res: {
                /**
                 * Success
                 */
                200: DownloadClientResource;
            };
        };
    };
    '/api/v3/downloadclient/{id}': {
        put: {
            req: {
                forceSave?: boolean;
                id: string;
                requestBody?: DownloadClientResource;
            };
            res: {
                /**
                 * Success
                 */
                200: DownloadClientResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: DownloadClientResource;
            };
        };
    };
    '/api/v3/downloadclient/bulk': {
        put: {
            req: {
                requestBody?: DownloadClientBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: DownloadClientResource;
            };
        };
        delete: {
            req: {
                requestBody?: DownloadClientBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/downloadclient/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<DownloadClientResource>;
            };
        };
    };
    '/api/v3/downloadclient/test': {
        post: {
            req: {
                forceTest?: boolean;
                requestBody?: DownloadClientResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/downloadclient/testall': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/downloadclient/action/{name}': {
        post: {
            req: {
                name: string;
                requestBody?: DownloadClientResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/downloadclient': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: DownloadClientConfigResource;
            };
        };
    };
    '/api/v3/config/downloadclient/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: DownloadClientConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: DownloadClientConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: DownloadClientConfigResource;
            };
        };
    };
    '/api/v3/extrafile': {
        get: {
            req: {
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<ExtraFileResource>;
            };
        };
    };
    '/api/v3/filesystem': {
        get: {
            req: {
                allowFoldersWithoutTrailingSlashes?: boolean;
                includeFiles?: boolean;
                path?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/filesystem/type': {
        get: {
            req: {
                path?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/filesystem/mediafiles': {
        get: {
            req: {
                path?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/health': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<HealthResource>;
            };
        };
    };
    '/api/v3/history': {
        get: {
            req: {
                downloadId?: string;
                eventType?: Array<(number)>;
                includeMovie?: boolean;
                languages?: Array<(number)>;
                movieIds?: Array<(number)>;
                page?: number;
                pageSize?: number;
                quality?: Array<(number)>;
                sortDirection?: SortDirection;
                sortKey?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: HistoryResourcePagingResource;
            };
        };
    };
    '/api/v3/history/since': {
        get: {
            req: {
                date?: string;
                eventType?: MovieHistoryEventType;
                includeMovie?: boolean;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<HistoryResource>;
            };
        };
    };
    '/api/v3/history/movie': {
        get: {
            req: {
                eventType?: MovieHistoryEventType;
                includeMovie?: boolean;
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<HistoryResource>;
            };
        };
    };
    '/api/v3/history/failed/{id}': {
        post: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/host': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: HostConfigResource;
            };
        };
    };
    '/api/v3/config/host/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: HostConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: HostConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: HostConfigResource;
            };
        };
    };
    '/api/v3/exclusions': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<ImportExclusionsResource>;
            };
        };
        post: {
            req: {
                requestBody?: ImportExclusionsResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportExclusionsResource;
            };
        };
    };
    '/api/v3/exclusions/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: ImportExclusionsResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportExclusionsResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportExclusionsResource;
            };
        };
    };
    '/api/v3/exclusions/bulk': {
        post: {
            req: {
                requestBody?: Array<ImportExclusionsResource>;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/importlist': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<ImportListResource>;
            };
        };
        post: {
            req: {
                forceSave?: boolean;
                requestBody?: ImportListResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportListResource;
            };
        };
    };
    '/api/v3/importlist/{id}': {
        put: {
            req: {
                forceSave?: boolean;
                id: string;
                requestBody?: ImportListResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportListResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportListResource;
            };
        };
    };
    '/api/v3/importlist/bulk': {
        put: {
            req: {
                requestBody?: ImportListBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportListResource;
            };
        };
        delete: {
            req: {
                requestBody?: ImportListBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/importlist/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<ImportListResource>;
            };
        };
    };
    '/api/v3/importlist/test': {
        post: {
            req: {
                forceTest?: boolean;
                requestBody?: ImportListResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/importlist/testall': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/importlist/action/{name}': {
        post: {
            req: {
                name: string;
                requestBody?: ImportListResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/importlist': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: ImportListConfigResource;
            };
        };
    };
    '/api/v3/config/importlist/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: ImportListConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportListConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: ImportListConfigResource;
            };
        };
    };
    '/api/v3/importlist/movie': {
        get: {
            req: {
                includePopular?: boolean;
                includeRecommendations?: boolean;
                includeTrending?: boolean;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        post: {
            req: {
                requestBody?: Array<MovieResource>;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/indexer': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<IndexerResource>;
            };
        };
        post: {
            req: {
                forceSave?: boolean;
                requestBody?: IndexerResource;
            };
            res: {
                /**
                 * Success
                 */
                200: IndexerResource;
            };
        };
    };
    '/api/v3/indexer/{id}': {
        put: {
            req: {
                forceSave?: boolean;
                id: string;
                requestBody?: IndexerResource;
            };
            res: {
                /**
                 * Success
                 */
                200: IndexerResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: IndexerResource;
            };
        };
    };
    '/api/v3/indexer/bulk': {
        put: {
            req: {
                requestBody?: IndexerBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: IndexerResource;
            };
        };
        delete: {
            req: {
                requestBody?: IndexerBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/indexer/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<IndexerResource>;
            };
        };
    };
    '/api/v3/indexer/test': {
        post: {
            req: {
                forceTest?: boolean;
                requestBody?: IndexerResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/indexer/testall': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/indexer/action/{name}': {
        post: {
            req: {
                name: string;
                requestBody?: IndexerResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/indexer': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: IndexerConfigResource;
            };
        };
    };
    '/api/v3/config/indexer/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: IndexerConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: IndexerConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: IndexerConfigResource;
            };
        };
    };
    '/api/v3/indexerflag': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<IndexerFlagResource>;
            };
        };
    };
    '/api/v3/language': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<LanguageResource>;
            };
        };
    };
    '/api/v3/language/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: LanguageResource;
            };
        };
    };
    '/api/v3/localization': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: string;
            };
        };
    };
    '/api/v3/localization/language': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: LocalizationLanguageResource;
            };
        };
    };
    '/api/v3/log': {
        get: {
            req: {
                level?: string;
                page?: number;
                pageSize?: number;
                sortDirection?: SortDirection;
                sortKey?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: LogResourcePagingResource;
            };
        };
    };
    '/api/v3/log/file': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<LogFileResource>;
            };
        };
    };
    '/api/v3/log/file/{filename}': {
        get: {
            req: {
                filename: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/manualimport': {
        get: {
            req: {
                downloadId?: string;
                filterExistingFiles?: boolean;
                folder?: string;
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<ManualImportResource>;
            };
        };
        post: {
            req: {
                requestBody?: Array<ManualImportReprocessResource>;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/mediacover/{movieId}/{filename}': {
        get: {
            req: {
                filename: string;
                movieId: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/mediamanagement': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: MediaManagementConfigResource;
            };
        };
    };
    '/api/v3/config/mediamanagement/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: MediaManagementConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MediaManagementConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: MediaManagementConfigResource;
            };
        };
    };
    '/api/v3/metadata': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<MetadataResource>;
            };
        };
        post: {
            req: {
                forceSave?: boolean;
                requestBody?: MetadataResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MetadataResource;
            };
        };
    };
    '/api/v3/metadata/{id}': {
        put: {
            req: {
                forceSave?: boolean;
                id: string;
                requestBody?: MetadataResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MetadataResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: MetadataResource;
            };
        };
    };
    '/api/v3/metadata/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<MetadataResource>;
            };
        };
    };
    '/api/v3/metadata/test': {
        post: {
            req: {
                forceTest?: boolean;
                requestBody?: MetadataResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/metadata/testall': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/metadata/action/{name}': {
        post: {
            req: {
                name: string;
                requestBody?: MetadataResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/metadata': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: MetadataConfigResource;
            };
        };
    };
    '/api/v3/config/metadata/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: MetadataConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MetadataConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: MetadataConfigResource;
            };
        };
    };
    '/api/v3/wanted/missing': {
        get: {
            req: {
                monitored?: boolean;
                page?: number;
                pageSize?: number;
                sortDirection?: SortDirection;
                sortKey?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieResourcePagingResource;
            };
        };
    };
    '/api/v3/movie': {
        get: {
            req: {
                excludeLocalCovers?: boolean;
                languageId?: number;
                tmdbId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<MovieResource>;
            };
        };
        post: {
            req: {
                requestBody?: MovieResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieResource;
            };
        };
    };
    '/api/v3/movie/{id}': {
        put: {
            req: {
                id: string;
                moveFiles?: boolean;
                requestBody?: MovieResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieResource;
            };
        };
        delete: {
            req: {
                addImportExclusion?: boolean;
                deleteFiles?: boolean;
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieResource;
            };
        };
    };
    '/api/v3/movie/editor': {
        put: {
            req: {
                requestBody?: MovieEditorResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: {
                requestBody?: MovieEditorResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/moviefile': {
        get: {
            req: {
                movieFileIds?: Array<(number)>;
                movieId?: Array<(number)>;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<MovieFileResource>;
            };
        };
    };
    '/api/v3/moviefile/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: MovieFileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieFileResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: MovieFileResource;
            };
        };
    };
    '/api/v3/moviefile/editor': {
        put: {
            req: {
                requestBody?: MovieFileListResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/moviefile/bulk': {
        delete: {
            req: {
                requestBody?: MovieFileListResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/movie/import': {
        post: {
            req: {
                requestBody?: Array<MovieResource>;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/movie/lookup/tmdb': {
        get: {
            req: {
                tmdbId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/movie/lookup/imdb': {
        get: {
            req: {
                imdbId?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/movie/lookup': {
        get: {
            req: {
                term?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/config/naming': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: NamingConfigResource;
            };
        };
    };
    '/api/v3/config/naming/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: NamingConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: NamingConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: NamingConfigResource;
            };
        };
    };
    '/api/v3/config/naming/examples': {
        get: {
            req: {
                colonReplacementFormat?: ColonReplacementFormat;
                id?: number;
                movieFolderFormat?: string;
                renameMovies?: boolean;
                replaceIllegalCharacters?: boolean;
                resourceName?: string;
                standardMovieFormat?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/notification': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<NotificationResource>;
            };
        };
        post: {
            req: {
                forceSave?: boolean;
                requestBody?: NotificationResource;
            };
            res: {
                /**
                 * Success
                 */
                200: NotificationResource;
            };
        };
    };
    '/api/v3/notification/{id}': {
        put: {
            req: {
                forceSave?: boolean;
                id: string;
                requestBody?: NotificationResource;
            };
            res: {
                /**
                 * Success
                 */
                200: NotificationResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: NotificationResource;
            };
        };
    };
    '/api/v3/notification/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<NotificationResource>;
            };
        };
    };
    '/api/v3/notification/test': {
        post: {
            req: {
                forceTest?: boolean;
                requestBody?: NotificationResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/notification/testall': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/notification/action/{name}': {
        post: {
            req: {
                name: string;
                requestBody?: NotificationResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/parse': {
        get: {
            req: {
                title?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: ParseResource;
            };
        };
    };
    '/ping': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: PingResource;
            };
        };
        head: {
            res: {
                /**
                 * Success
                 */
                200: PingResource;
            };
        };
    };
    '/api/v3/qualitydefinition/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: QualityDefinitionResource;
            };
            res: {
                /**
                 * Success
                 */
                200: QualityDefinitionResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: QualityDefinitionResource;
            };
        };
    };
    '/api/v3/qualitydefinition': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<QualityDefinitionResource>;
            };
        };
    };
    '/api/v3/qualitydefinition/update': {
        put: {
            req: {
                requestBody?: Array<QualityDefinitionResource>;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/qualityprofile': {
        post: {
            req: {
                requestBody?: QualityProfileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: QualityProfileResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<QualityProfileResource>;
            };
        };
    };
    '/api/v3/qualityprofile/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        put: {
            req: {
                id: string;
                requestBody?: QualityProfileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: QualityProfileResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: QualityProfileResource;
            };
        };
    };
    '/api/v3/qualityprofile/schema': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: QualityProfileResource;
            };
        };
    };
    '/api/v3/queue/{id}': {
        delete: {
            req: {
                blocklist?: boolean;
                changeCategory?: boolean;
                id: number;
                removeFromClient?: boolean;
                skipRedownload?: boolean;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/queue/bulk': {
        delete: {
            req: {
                blocklist?: boolean;
                changeCategory?: boolean;
                removeFromClient?: boolean;
                requestBody?: QueueBulkResource;
                skipRedownload?: boolean;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/queue': {
        get: {
            req: {
                includeMovie?: boolean;
                includeUnknownMovieItems?: boolean;
                languages?: Array<(number)>;
                movieIds?: Array<(number)>;
                page?: number;
                pageSize?: number;
                protocol?: DownloadProtocol;
                quality?: number;
                sortDirection?: SortDirection;
                sortKey?: string;
            };
            res: {
                /**
                 * Success
                 */
                200: QueueResourcePagingResource;
            };
        };
    };
    '/api/v3/queue/grab/{id}': {
        post: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/queue/grab/bulk': {
        post: {
            req: {
                requestBody?: QueueBulkResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/queue/details': {
        get: {
            req: {
                includeMovie?: boolean;
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<QueueResource>;
            };
        };
    };
    '/api/v3/queue/status': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: QueueStatusResource;
            };
        };
    };
    '/api/v3/release': {
        post: {
            req: {
                requestBody?: ReleaseResource;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<ReleaseResource>;
            };
        };
    };
    '/api/v3/releaseprofile': {
        post: {
            req: {
                requestBody?: ReleaseProfileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ReleaseProfileResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<ReleaseProfileResource>;
            };
        };
    };
    '/api/v3/releaseprofile/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        put: {
            req: {
                id: string;
                requestBody?: ReleaseProfileResource;
            };
            res: {
                /**
                 * Success
                 */
                200: ReleaseProfileResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: ReleaseProfileResource;
            };
        };
    };
    '/api/v3/release/push': {
        post: {
            req: {
                requestBody?: ReleaseResource;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<ReleaseResource>;
            };
        };
    };
    '/api/v3/remotepathmapping': {
        post: {
            req: {
                requestBody?: RemotePathMappingResource;
            };
            res: {
                /**
                 * Success
                 */
                200: RemotePathMappingResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<RemotePathMappingResource>;
            };
        };
    };
    '/api/v3/remotepathmapping/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        put: {
            req: {
                id: string;
                requestBody?: RemotePathMappingResource;
            };
            res: {
                /**
                 * Success
                 */
                200: RemotePathMappingResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: RemotePathMappingResource;
            };
        };
    };
    '/api/v3/rename': {
        get: {
            req: {
                movieId?: number;
            };
            res: {
                /**
                 * Success
                 */
                200: Array<RenameMovieResource>;
            };
        };
    };
    '/api/v3/rootfolder': {
        post: {
            req: {
                requestBody?: RootFolderResource;
            };
            res: {
                /**
                 * Success
                 */
                200: RootFolderResource;
            };
        };
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<RootFolderResource>;
            };
        };
    };
    '/api/v3/rootfolder/{id}': {
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: RootFolderResource;
            };
        };
    };
    '/api/v3/system/status': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: SystemResource;
            };
        };
    };
    '/api/v3/system/routes': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/system/routes/duplicate': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/system/shutdown': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/system/restart': {
        post: {
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/api/v3/tag': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<TagResource>;
            };
        };
        post: {
            req: {
                requestBody?: TagResource;
            };
            res: {
                /**
                 * Success
                 */
                200: TagResource;
            };
        };
    };
    '/api/v3/tag/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: TagResource;
            };
            res: {
                /**
                 * Success
                 */
                200: TagResource;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: TagResource;
            };
        };
    };
    '/api/v3/tag/detail': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<TagDetailsResource>;
            };
        };
    };
    '/api/v3/tag/detail/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: TagDetailsResource;
            };
        };
    };
    '/api/v3/system/task': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<TaskResource>;
            };
        };
    };
    '/api/v3/system/task/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: TaskResource;
            };
        };
    };
    '/api/v3/config/ui/{id}': {
        put: {
            req: {
                id: string;
                requestBody?: UiConfigResource;
            };
            res: {
                /**
                 * Success
                 */
                200: UiConfigResource;
            };
        };
        get: {
            req: {
                id: number;
            };
            res: {
                /**
                 * Success
                 */
                200: UiConfigResource;
            };
        };
    };
    '/api/v3/config/ui': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: UiConfigResource;
            };
        };
    };
    '/api/v3/update': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<UpdateResource>;
            };
        };
    };
    '/api/v3/log/file/update': {
        get: {
            res: {
                /**
                 * Success
                 */
                200: Array<LogFileResource>;
            };
        };
    };
    '/api/v3/log/file/update/{filename}': {
        get: {
            req: {
                filename: string;
            };
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
};