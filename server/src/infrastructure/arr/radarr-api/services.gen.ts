// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetApiV3AlttitleData, GetApiV3AlttitleResponse, GetApiV3AlttitleByIdData, GetApiV3AlttitleByIdResponse, GetApiResponse, PostLoginData, PostLoginResponse, GetLogoutResponse, GetLoginResponse, GetContentByPathData, GetContentByPathResponse, GetData, GetResponse, GetByPathData, GetByPathResponse, PostApiV3AutotaggingData, PostApiV3AutotaggingResponse, GetApiV3AutotaggingResponse, PutApiV3AutotaggingByIdData, PutApiV3AutotaggingByIdResponse, DeleteApiV3AutotaggingByIdData, DeleteApiV3AutotaggingByIdResponse, GetApiV3AutotaggingByIdData, GetApiV3AutotaggingByIdResponse, GetApiV3AutotaggingSchemaResponse, GetApiV3SystemBackupResponse, DeleteApiV3SystemBackupByIdData, DeleteApiV3SystemBackupByIdResponse, PostApiV3SystemBackupRestoreByIdData, PostApiV3SystemBackupRestoreByIdResponse, PostApiV3SystemBackupRestoreUploadResponse, GetApiV3BlocklistData, GetApiV3BlocklistResponse, GetApiV3BlocklistMovieData, GetApiV3BlocklistMovieResponse, DeleteApiV3BlocklistByIdData, DeleteApiV3BlocklistByIdResponse, DeleteApiV3BlocklistBulkData, DeleteApiV3BlocklistBulkResponse, GetApiV3CalendarData, GetApiV3CalendarResponse, GetFeedV3CalendarRadarrIcsData, GetFeedV3CalendarRadarrIcsResponse, GetApiV3CollectionData, GetApiV3CollectionResponse, PutApiV3CollectionData, PutApiV3CollectionResponse, PutApiV3CollectionByIdData, PutApiV3CollectionByIdResponse, GetApiV3CollectionByIdData, GetApiV3CollectionByIdResponse, PostApiV3CommandData, PostApiV3CommandResponse, GetApiV3CommandResponse, DeleteApiV3CommandByIdData, DeleteApiV3CommandByIdResponse, GetApiV3CommandByIdData, GetApiV3CommandByIdResponse, GetApiV3CreditData, GetApiV3CreditResponse, GetApiV3CreditByIdData, GetApiV3CreditByIdResponse, GetApiV3CustomfilterResponse, PostApiV3CustomfilterData, PostApiV3CustomfilterResponse, PutApiV3CustomfilterByIdData, PutApiV3CustomfilterByIdResponse, DeleteApiV3CustomfilterByIdData, DeleteApiV3CustomfilterByIdResponse, GetApiV3CustomfilterByIdData, GetApiV3CustomfilterByIdResponse, PostApiV3CustomformatData, PostApiV3CustomformatResponse, GetApiV3CustomformatResponse, PutApiV3CustomformatByIdData, PutApiV3CustomformatByIdResponse, DeleteApiV3CustomformatByIdData, DeleteApiV3CustomformatByIdResponse, GetApiV3CustomformatByIdData, GetApiV3CustomformatByIdResponse, GetApiV3CustomformatSchemaResponse, GetApiV3WantedCutoffData, GetApiV3WantedCutoffResponse, PostApiV3DelayprofileData, PostApiV3DelayprofileResponse, GetApiV3DelayprofileResponse, DeleteApiV3DelayprofileByIdData, DeleteApiV3DelayprofileByIdResponse, PutApiV3DelayprofileByIdData, PutApiV3DelayprofileByIdResponse, GetApiV3DelayprofileByIdData, GetApiV3DelayprofileByIdResponse, PutApiV3DelayprofileReorderByIdData, PutApiV3DelayprofileReorderByIdResponse, GetApiV3DiskspaceResponse, GetApiV3DownloadclientResponse, PostApiV3DownloadclientData, PostApiV3DownloadclientResponse, PutApiV3DownloadclientByIdData, PutApiV3DownloadclientByIdResponse, DeleteApiV3DownloadclientByIdData, DeleteApiV3DownloadclientByIdResponse, GetApiV3DownloadclientByIdData, GetApiV3DownloadclientByIdResponse, PutApiV3DownloadclientBulkData, PutApiV3DownloadclientBulkResponse, DeleteApiV3DownloadclientBulkData, DeleteApiV3DownloadclientBulkResponse, GetApiV3DownloadclientSchemaResponse, PostApiV3DownloadclientTestData, PostApiV3DownloadclientTestResponse, PostApiV3DownloadclientTestallResponse, PostApiV3DownloadclientActionByNameData, PostApiV3DownloadclientActionByNameResponse, GetApiV3ConfigDownloadclientResponse, PutApiV3ConfigDownloadclientByIdData, PutApiV3ConfigDownloadclientByIdResponse, GetApiV3ConfigDownloadclientByIdData, GetApiV3ConfigDownloadclientByIdResponse, GetApiV3ExtrafileData, GetApiV3ExtrafileResponse, GetApiV3FilesystemData, GetApiV3FilesystemResponse, GetApiV3FilesystemTypeData, GetApiV3FilesystemTypeResponse, GetApiV3FilesystemMediafilesData, GetApiV3FilesystemMediafilesResponse, GetApiV3HealthResponse, GetApiV3HistoryData, GetApiV3HistoryResponse, GetApiV3HistorySinceData, GetApiV3HistorySinceResponse, GetApiV3HistoryMovieData, GetApiV3HistoryMovieResponse, PostApiV3HistoryFailedByIdData, PostApiV3HistoryFailedByIdResponse, GetApiV3ConfigHostResponse, PutApiV3ConfigHostByIdData, PutApiV3ConfigHostByIdResponse, GetApiV3ConfigHostByIdData, GetApiV3ConfigHostByIdResponse, GetApiV3ExclusionsResponse, PostApiV3ExclusionsData, PostApiV3ExclusionsResponse, PutApiV3ExclusionsByIdData, PutApiV3ExclusionsByIdResponse, DeleteApiV3ExclusionsByIdData, DeleteApiV3ExclusionsByIdResponse, GetApiV3ExclusionsByIdData, GetApiV3ExclusionsByIdResponse, PostApiV3ExclusionsBulkData, PostApiV3ExclusionsBulkResponse, GetApiV3ImportlistResponse, PostApiV3ImportlistData, PostApiV3ImportlistResponse, PutApiV3ImportlistByIdData, PutApiV3ImportlistByIdResponse, DeleteApiV3ImportlistByIdData, DeleteApiV3ImportlistByIdResponse, GetApiV3ImportlistByIdData, GetApiV3ImportlistByIdResponse, PutApiV3ImportlistBulkData, PutApiV3ImportlistBulkResponse, DeleteApiV3ImportlistBulkData, DeleteApiV3ImportlistBulkResponse, GetApiV3ImportlistSchemaResponse, PostApiV3ImportlistTestData, PostApiV3ImportlistTestResponse, PostApiV3ImportlistTestallResponse, PostApiV3ImportlistActionByNameData, PostApiV3ImportlistActionByNameResponse, GetApiV3ConfigImportlistResponse, PutApiV3ConfigImportlistByIdData, PutApiV3ConfigImportlistByIdResponse, GetApiV3ConfigImportlistByIdData, GetApiV3ConfigImportlistByIdResponse, GetApiV3ImportlistMovieData, GetApiV3ImportlistMovieResponse, PostApiV3ImportlistMovieData, PostApiV3ImportlistMovieResponse, GetApiV3IndexerResponse, PostApiV3IndexerData, PostApiV3IndexerResponse, PutApiV3IndexerByIdData, PutApiV3IndexerByIdResponse, DeleteApiV3IndexerByIdData, DeleteApiV3IndexerByIdResponse, GetApiV3IndexerByIdData, GetApiV3IndexerByIdResponse, PutApiV3IndexerBulkData, PutApiV3IndexerBulkResponse, DeleteApiV3IndexerBulkData, DeleteApiV3IndexerBulkResponse, GetApiV3IndexerSchemaResponse, PostApiV3IndexerTestData, PostApiV3IndexerTestResponse, PostApiV3IndexerTestallResponse, PostApiV3IndexerActionByNameData, PostApiV3IndexerActionByNameResponse, GetApiV3ConfigIndexerResponse, PutApiV3ConfigIndexerByIdData, PutApiV3ConfigIndexerByIdResponse, GetApiV3ConfigIndexerByIdData, GetApiV3ConfigIndexerByIdResponse, GetApiV3IndexerflagResponse, GetApiV3LanguageResponse, GetApiV3LanguageByIdData, GetApiV3LanguageByIdResponse, GetApiV3LocalizationResponse, GetApiV3LocalizationLanguageResponse, GetApiV3LogData, GetApiV3LogResponse, GetApiV3LogFileResponse, GetApiV3LogFileByFilenameData, GetApiV3LogFileByFilenameResponse, GetApiV3ManualimportData, GetApiV3ManualimportResponse, PostApiV3ManualimportData, PostApiV3ManualimportResponse, GetApiV3MediacoverByMovieIdByFilenameData, GetApiV3MediacoverByMovieIdByFilenameResponse, GetApiV3ConfigMediamanagementResponse, PutApiV3ConfigMediamanagementByIdData, PutApiV3ConfigMediamanagementByIdResponse, GetApiV3ConfigMediamanagementByIdData, GetApiV3ConfigMediamanagementByIdResponse, GetApiV3MetadataResponse, PostApiV3MetadataData, PostApiV3MetadataResponse, PutApiV3MetadataByIdData, PutApiV3MetadataByIdResponse, DeleteApiV3MetadataByIdData, DeleteApiV3MetadataByIdResponse, GetApiV3MetadataByIdData, GetApiV3MetadataByIdResponse, GetApiV3MetadataSchemaResponse, PostApiV3MetadataTestData, PostApiV3MetadataTestResponse, PostApiV3MetadataTestallResponse, PostApiV3MetadataActionByNameData, PostApiV3MetadataActionByNameResponse, GetApiV3ConfigMetadataResponse, PutApiV3ConfigMetadataByIdData, PutApiV3ConfigMetadataByIdResponse, GetApiV3ConfigMetadataByIdData, GetApiV3ConfigMetadataByIdResponse, GetApiV3WantedMissingData, GetApiV3WantedMissingResponse, GetApiV3MovieData, GetApiV3MovieResponse, PostApiV3MovieData, PostApiV3MovieResponse, PutApiV3MovieByIdData, PutApiV3MovieByIdResponse, DeleteApiV3MovieByIdData, DeleteApiV3MovieByIdResponse, GetApiV3MovieByIdData, GetApiV3MovieByIdResponse, PutApiV3MovieEditorData, PutApiV3MovieEditorResponse, DeleteApiV3MovieEditorData, DeleteApiV3MovieEditorResponse, GetApiV3MoviefileData, GetApiV3MoviefileResponse, PutApiV3MoviefileByIdData, PutApiV3MoviefileByIdResponse, DeleteApiV3MoviefileByIdData, DeleteApiV3MoviefileByIdResponse, GetApiV3MoviefileByIdData, GetApiV3MoviefileByIdResponse, PutApiV3MoviefileEditorData, PutApiV3MoviefileEditorResponse, DeleteApiV3MoviefileBulkData, DeleteApiV3MoviefileBulkResponse, PostApiV3MovieImportData, PostApiV3MovieImportResponse, GetApiV3MovieLookupTmdbData, GetApiV3MovieLookupTmdbResponse, GetApiV3MovieLookupImdbData, GetApiV3MovieLookupImdbResponse, GetApiV3MovieLookupData, GetApiV3MovieLookupResponse, GetApiV3ConfigNamingResponse, PutApiV3ConfigNamingByIdData, PutApiV3ConfigNamingByIdResponse, GetApiV3ConfigNamingByIdData, GetApiV3ConfigNamingByIdResponse, GetApiV3ConfigNamingExamplesData, GetApiV3ConfigNamingExamplesResponse, GetApiV3NotificationResponse, PostApiV3NotificationData, PostApiV3NotificationResponse, PutApiV3NotificationByIdData, PutApiV3NotificationByIdResponse, DeleteApiV3NotificationByIdData, DeleteApiV3NotificationByIdResponse, GetApiV3NotificationByIdData, GetApiV3NotificationByIdResponse, GetApiV3NotificationSchemaResponse, PostApiV3NotificationTestData, PostApiV3NotificationTestResponse, PostApiV3NotificationTestallResponse, PostApiV3NotificationActionByNameData, PostApiV3NotificationActionByNameResponse, GetApiV3ParseData, GetApiV3ParseResponse, GetPingResponse, HeadPingResponse, PutApiV3QualitydefinitionByIdData, PutApiV3QualitydefinitionByIdResponse, GetApiV3QualitydefinitionByIdData, GetApiV3QualitydefinitionByIdResponse, GetApiV3QualitydefinitionResponse, PutApiV3QualitydefinitionUpdateData, PutApiV3QualitydefinitionUpdateResponse, PostApiV3QualityprofileData, PostApiV3QualityprofileResponse, GetApiV3QualityprofileResponse, DeleteApiV3QualityprofileByIdData, DeleteApiV3QualityprofileByIdResponse, PutApiV3QualityprofileByIdData, PutApiV3QualityprofileByIdResponse, GetApiV3QualityprofileByIdData, GetApiV3QualityprofileByIdResponse, GetApiV3QualityprofileSchemaResponse, DeleteApiV3QueueByIdData, DeleteApiV3QueueByIdResponse, DeleteApiV3QueueBulkData, DeleteApiV3QueueBulkResponse, GetApiV3QueueData, GetApiV3QueueResponse, PostApiV3QueueGrabByIdData, PostApiV3QueueGrabByIdResponse, PostApiV3QueueGrabBulkData, PostApiV3QueueGrabBulkResponse, GetApiV3QueueDetailsData, GetApiV3QueueDetailsResponse, GetApiV3QueueStatusResponse, PostApiV3ReleaseData, PostApiV3ReleaseResponse, GetApiV3ReleaseData, GetApiV3ReleaseResponse, PostApiV3ReleaseprofileData, PostApiV3ReleaseprofileResponse, GetApiV3ReleaseprofileResponse, DeleteApiV3ReleaseprofileByIdData, DeleteApiV3ReleaseprofileByIdResponse, PutApiV3ReleaseprofileByIdData, PutApiV3ReleaseprofileByIdResponse, GetApiV3ReleaseprofileByIdData, GetApiV3ReleaseprofileByIdResponse, PostApiV3ReleasePushData, PostApiV3ReleasePushResponse, PostApiV3RemotepathmappingData, PostApiV3RemotepathmappingResponse, GetApiV3RemotepathmappingResponse, DeleteApiV3RemotepathmappingByIdData, DeleteApiV3RemotepathmappingByIdResponse, PutApiV3RemotepathmappingByIdData, PutApiV3RemotepathmappingByIdResponse, GetApiV3RemotepathmappingByIdData, GetApiV3RemotepathmappingByIdResponse, GetApiV3RenameData, GetApiV3RenameResponse, PostApiV3RootfolderData, PostApiV3RootfolderResponse, GetApiV3RootfolderResponse, DeleteApiV3RootfolderByIdData, DeleteApiV3RootfolderByIdResponse, GetApiV3RootfolderByIdData, GetApiV3RootfolderByIdResponse, GetApiV3SystemStatusResponse, GetApiV3SystemRoutesResponse, GetApiV3SystemRoutesDuplicateResponse, PostApiV3SystemShutdownResponse, PostApiV3SystemRestartResponse, GetApiV3TagResponse, PostApiV3TagData, PostApiV3TagResponse, PutApiV3TagByIdData, PutApiV3TagByIdResponse, DeleteApiV3TagByIdData, DeleteApiV3TagByIdResponse, GetApiV3TagByIdData, GetApiV3TagByIdResponse, GetApiV3TagDetailResponse, GetApiV3TagDetailByIdData, GetApiV3TagDetailByIdResponse, GetApiV3SystemTaskResponse, GetApiV3SystemTaskByIdData, GetApiV3SystemTaskByIdResponse, PutApiV3ConfigUiByIdData, PutApiV3ConfigUiByIdResponse, GetApiV3ConfigUiByIdData, GetApiV3ConfigUiByIdResponse, GetApiV3ConfigUiResponse, GetApiV3UpdateResponse, GetApiV3LogFileUpdateResponse, GetApiV3LogFileUpdateByFilenameData, GetApiV3LogFileUpdateByFilenameResponse } from './types.gen';

export class AlternativeTitleService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @param data.movieMetadataId
     * @returns AlternativeTitleResource Success
     * @throws ApiError
     */
    public getApiV3Alttitle(data: GetApiV3AlttitleData = {}): CancelablePromise<GetApiV3AlttitleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/alttitle',
            query: {
                movieId: data.movieId,
                movieMetadataId: data.movieMetadataId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns AlternativeTitleResource Success
     * @throws ApiError
     */
    public getApiV3AlttitleById(data: GetApiV3AlttitleByIdData): CancelablePromise<GetApiV3AlttitleByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/alttitle/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class ApiInfoService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns ApiInfoResource Success
     * @throws ApiError
     */
    public getApi(): CancelablePromise<GetApiResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api'
        });
    }
    
}

export class AuthenticationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.returnUrl
     * @param data.formData
     * @returns unknown Success
     * @throws ApiError
     */
    public postLogin(data: PostLoginData = {}): CancelablePromise<PostLoginResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/login',
            query: {
                returnUrl: data.returnUrl
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public getLogout(): CancelablePromise<GetLogoutResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/logout'
        });
    }
    
}

export class StaticResourceService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public getLogin(): CancelablePromise<GetLoginResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/login'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown Success
     * @throws ApiError
     */
    public getContentByPath(data: GetContentByPathData): CancelablePromise<GetContentByPathResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/content/{path}',
            path: {
                path: data.path
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown Success
     * @throws ApiError
     */
    public get(data: GetData): CancelablePromise<GetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/',
            path: {
                path: data.path
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown Success
     * @throws ApiError
     */
    public getByPath(data: GetByPathData): CancelablePromise<GetByPathResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/{path}',
            path: {
                path: data.path
            }
        });
    }
    
}

export class AutoTaggingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AutoTaggingResource Success
     * @throws ApiError
     */
    public postApiV3Autotagging(data: PostApiV3AutotaggingData = {}): CancelablePromise<PostApiV3AutotaggingResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/autotagging',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns AutoTaggingResource Success
     * @throws ApiError
     */
    public getApiV3Autotagging(): CancelablePromise<GetApiV3AutotaggingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/autotagging'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns AutoTaggingResource Success
     * @throws ApiError
     */
    public putApiV3AutotaggingById(data: PutApiV3AutotaggingByIdData): CancelablePromise<PutApiV3AutotaggingByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/autotagging/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3AutotaggingById(data: DeleteApiV3AutotaggingByIdData): CancelablePromise<DeleteApiV3AutotaggingByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/autotagging/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns AutoTaggingResource Success
     * @throws ApiError
     */
    public getApiV3AutotaggingById(data: GetApiV3AutotaggingByIdData): CancelablePromise<GetApiV3AutotaggingByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/autotagging/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3AutotaggingSchema(): CancelablePromise<GetApiV3AutotaggingSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/autotagging/schema'
        });
    }
    
}

export class BackupService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns BackupResource Success
     * @throws ApiError
     */
    public getApiV3SystemBackup(): CancelablePromise<GetApiV3SystemBackupResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/system/backup'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3SystemBackupById(data: DeleteApiV3SystemBackupByIdData): CancelablePromise<DeleteApiV3SystemBackupByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/system/backup/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3SystemBackupRestoreById(data: PostApiV3SystemBackupRestoreByIdData): CancelablePromise<PostApiV3SystemBackupRestoreByIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/system/backup/restore/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3SystemBackupRestoreUpload(): CancelablePromise<PostApiV3SystemBackupRestoreUploadResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/system/backup/restore/upload'
        });
    }
    
}

export class BlocklistService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortKey
     * @param data.sortDirection
     * @param data.movieIds
     * @param data.protocols
     * @returns BlocklistResourcePagingResource Success
     * @throws ApiError
     */
    public getApiV3Blocklist(data: GetApiV3BlocklistData = {}): CancelablePromise<GetApiV3BlocklistResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/blocklist',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortKey: data.sortKey,
                sortDirection: data.sortDirection,
                movieIds: data.movieIds,
                protocols: data.protocols
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @returns BlocklistResource Success
     * @throws ApiError
     */
    public getApiV3BlocklistMovie(data: GetApiV3BlocklistMovieData = {}): CancelablePromise<GetApiV3BlocklistMovieResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/blocklist/movie',
            query: {
                movieId: data.movieId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3BlocklistById(data: DeleteApiV3BlocklistByIdData): CancelablePromise<DeleteApiV3BlocklistByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/blocklist/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3BlocklistBulk(data: DeleteApiV3BlocklistBulkData = {}): CancelablePromise<DeleteApiV3BlocklistBulkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/blocklist/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class CalendarService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.start
     * @param data.end
     * @param data.unmonitored
     * @param data.tags
     * @returns MovieResource Success
     * @throws ApiError
     */
    public getApiV3Calendar(data: GetApiV3CalendarData = {}): CancelablePromise<GetApiV3CalendarResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/calendar',
            query: {
                start: data.start,
                end: data.end,
                unmonitored: data.unmonitored,
                tags: data.tags
            }
        });
    }
    
}

export class CalendarFeedService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.pastDays
     * @param data.futureDays
     * @param data.tags
     * @param data.unmonitored
     * @returns unknown Success
     * @throws ApiError
     */
    public getFeedV3CalendarRadarrIcs(data: GetFeedV3CalendarRadarrIcsData = {}): CancelablePromise<GetFeedV3CalendarRadarrIcsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/feed/v3/calendar/radarr.ics',
            query: {
                pastDays: data.pastDays,
                futureDays: data.futureDays,
                tags: data.tags,
                unmonitored: data.unmonitored
            }
        });
    }
    
}

export class CollectionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.tmdbId
     * @returns CollectionResource Success
     * @throws ApiError
     */
    public getApiV3Collection(data: GetApiV3CollectionData = {}): CancelablePromise<GetApiV3CollectionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/collection',
            query: {
                tmdbId: data.tmdbId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiV3Collection(data: PutApiV3CollectionData = {}): CancelablePromise<PutApiV3CollectionResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/collection',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns CollectionResource Success
     * @throws ApiError
     */
    public putApiV3CollectionById(data: PutApiV3CollectionByIdData): CancelablePromise<PutApiV3CollectionByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/collection/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns CollectionResource Success
     * @throws ApiError
     */
    public getApiV3CollectionById(data: GetApiV3CollectionByIdData): CancelablePromise<GetApiV3CollectionByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/collection/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CommandService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CommandResource Success
     * @throws ApiError
     */
    public postApiV3Command(data: PostApiV3CommandData = {}): CancelablePromise<PostApiV3CommandResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/command',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns CommandResource Success
     * @throws ApiError
     */
    public getApiV3Command(): CancelablePromise<GetApiV3CommandResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/command'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3CommandById(data: DeleteApiV3CommandByIdData): CancelablePromise<DeleteApiV3CommandByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/command/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns CommandResource Success
     * @throws ApiError
     */
    public getApiV3CommandById(data: GetApiV3CommandByIdData): CancelablePromise<GetApiV3CommandByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/command/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CreditService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @param data.movieMetadataId
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3Credit(data: GetApiV3CreditData = {}): CancelablePromise<GetApiV3CreditResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/credit',
            query: {
                movieId: data.movieId,
                movieMetadataId: data.movieMetadataId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns CreditResource Success
     * @throws ApiError
     */
    public getApiV3CreditById(data: GetApiV3CreditByIdData): CancelablePromise<GetApiV3CreditByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/credit/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CustomFilterService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns CustomFilterResource Success
     * @throws ApiError
     */
    public getApiV3Customfilter(): CancelablePromise<GetApiV3CustomfilterResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/customfilter'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CustomFilterResource Success
     * @throws ApiError
     */
    public postApiV3Customfilter(data: PostApiV3CustomfilterData = {}): CancelablePromise<PostApiV3CustomfilterResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/customfilter',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns CustomFilterResource Success
     * @throws ApiError
     */
    public putApiV3CustomfilterById(data: PutApiV3CustomfilterByIdData): CancelablePromise<PutApiV3CustomfilterByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/customfilter/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3CustomfilterById(data: DeleteApiV3CustomfilterByIdData): CancelablePromise<DeleteApiV3CustomfilterByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/customfilter/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns CustomFilterResource Success
     * @throws ApiError
     */
    public getApiV3CustomfilterById(data: GetApiV3CustomfilterByIdData): CancelablePromise<GetApiV3CustomfilterByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/customfilter/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class CustomFormatService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CustomFormatResource Success
     * @throws ApiError
     */
    public postApiV3Customformat(data: PostApiV3CustomformatData = {}): CancelablePromise<PostApiV3CustomformatResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/customformat',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns CustomFormatResource Success
     * @throws ApiError
     */
    public getApiV3Customformat(): CancelablePromise<GetApiV3CustomformatResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/customformat'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns CustomFormatResource Success
     * @throws ApiError
     */
    public putApiV3CustomformatById(data: PutApiV3CustomformatByIdData): CancelablePromise<PutApiV3CustomformatByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/customformat/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3CustomformatById(data: DeleteApiV3CustomformatByIdData): CancelablePromise<DeleteApiV3CustomformatByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/customformat/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns CustomFormatResource Success
     * @throws ApiError
     */
    public getApiV3CustomformatById(data: GetApiV3CustomformatByIdData): CancelablePromise<GetApiV3CustomformatByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/customformat/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3CustomformatSchema(): CancelablePromise<GetApiV3CustomformatSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/customformat/schema'
        });
    }
    
}

export class CutoffService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortKey
     * @param data.sortDirection
     * @param data.monitored
     * @returns MovieResourcePagingResource Success
     * @throws ApiError
     */
    public getApiV3WantedCutoff(data: GetApiV3WantedCutoffData = {}): CancelablePromise<GetApiV3WantedCutoffResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/wanted/cutoff',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortKey: data.sortKey,
                sortDirection: data.sortDirection,
                monitored: data.monitored
            }
        });
    }
    
}

export class DelayProfileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns DelayProfileResource Success
     * @throws ApiError
     */
    public postApiV3Delayprofile(data: PostApiV3DelayprofileData = {}): CancelablePromise<PostApiV3DelayprofileResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/delayprofile',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns DelayProfileResource Success
     * @throws ApiError
     */
    public getApiV3Delayprofile(): CancelablePromise<GetApiV3DelayprofileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/delayprofile'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3DelayprofileById(data: DeleteApiV3DelayprofileByIdData): CancelablePromise<DeleteApiV3DelayprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/delayprofile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns DelayProfileResource Success
     * @throws ApiError
     */
    public putApiV3DelayprofileById(data: PutApiV3DelayprofileByIdData): CancelablePromise<PutApiV3DelayprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/delayprofile/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns DelayProfileResource Success
     * @throws ApiError
     */
    public getApiV3DelayprofileById(data: GetApiV3DelayprofileByIdData): CancelablePromise<GetApiV3DelayprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/delayprofile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.after
     * @returns DelayProfileResource Success
     * @throws ApiError
     */
    public putApiV3DelayprofileReorderById(data: PutApiV3DelayprofileReorderByIdData): CancelablePromise<PutApiV3DelayprofileReorderByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/delayprofile/reorder/{id}',
            path: {
                id: data.id
            },
            query: {
                after: data.after
            }
        });
    }
    
}

export class DiskSpaceService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns DiskSpaceResource Success
     * @throws ApiError
     */
    public getApiV3Diskspace(): CancelablePromise<GetApiV3DiskspaceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/diskspace'
        });
    }
    
}

export class DownloadClientService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns DownloadClientResource Success
     * @throws ApiError
     */
    public getApiV3Downloadclient(): CancelablePromise<GetApiV3DownloadclientResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/downloadclient'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceSave
     * @param data.requestBody
     * @returns DownloadClientResource Success
     * @throws ApiError
     */
    public postApiV3Downloadclient(data: PostApiV3DownloadclientData = {}): CancelablePromise<PostApiV3DownloadclientResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/downloadclient',
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.forceSave
     * @param data.requestBody
     * @returns DownloadClientResource Success
     * @throws ApiError
     */
    public putApiV3DownloadclientById(data: PutApiV3DownloadclientByIdData): CancelablePromise<PutApiV3DownloadclientByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/downloadclient/{id}',
            path: {
                id: data.id
            },
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3DownloadclientById(data: DeleteApiV3DownloadclientByIdData): CancelablePromise<DeleteApiV3DownloadclientByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/downloadclient/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns DownloadClientResource Success
     * @throws ApiError
     */
    public getApiV3DownloadclientById(data: GetApiV3DownloadclientByIdData): CancelablePromise<GetApiV3DownloadclientByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/downloadclient/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns DownloadClientResource Success
     * @throws ApiError
     */
    public putApiV3DownloadclientBulk(data: PutApiV3DownloadclientBulkData = {}): CancelablePromise<PutApiV3DownloadclientBulkResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/downloadclient/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3DownloadclientBulk(data: DeleteApiV3DownloadclientBulkData = {}): CancelablePromise<DeleteApiV3DownloadclientBulkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/downloadclient/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns DownloadClientResource Success
     * @throws ApiError
     */
    public getApiV3DownloadclientSchema(): CancelablePromise<GetApiV3DownloadclientSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/downloadclient/schema'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceTest
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3DownloadclientTest(data: PostApiV3DownloadclientTestData = {}): CancelablePromise<PostApiV3DownloadclientTestResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/downloadclient/test',
            query: {
                forceTest: data.forceTest
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3DownloadclientTestall(): CancelablePromise<PostApiV3DownloadclientTestallResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/downloadclient/testall'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3DownloadclientActionByName(data: PostApiV3DownloadclientActionByNameData): CancelablePromise<PostApiV3DownloadclientActionByNameResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/downloadclient/action/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class DownloadClientConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns DownloadClientConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigDownloadclient(): CancelablePromise<GetApiV3ConfigDownloadclientResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/downloadclient'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns DownloadClientConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigDownloadclientById(data: PutApiV3ConfigDownloadclientByIdData): CancelablePromise<PutApiV3ConfigDownloadclientByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/downloadclient/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns DownloadClientConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigDownloadclientById(data: GetApiV3ConfigDownloadclientByIdData): CancelablePromise<GetApiV3ConfigDownloadclientByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/downloadclient/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class ExtraFileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @returns ExtraFileResource Success
     * @throws ApiError
     */
    public getApiV3Extrafile(data: GetApiV3ExtrafileData = {}): CancelablePromise<GetApiV3ExtrafileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/extrafile',
            query: {
                movieId: data.movieId
            }
        });
    }
    
}

export class FileSystemService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.includeFiles
     * @param data.allowFoldersWithoutTrailingSlashes
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3Filesystem(data: GetApiV3FilesystemData = {}): CancelablePromise<GetApiV3FilesystemResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/filesystem',
            query: {
                path: data.path,
                includeFiles: data.includeFiles,
                allowFoldersWithoutTrailingSlashes: data.allowFoldersWithoutTrailingSlashes
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3FilesystemType(data: GetApiV3FilesystemTypeData = {}): CancelablePromise<GetApiV3FilesystemTypeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/filesystem/type',
            query: {
                path: data.path
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3FilesystemMediafiles(data: GetApiV3FilesystemMediafilesData = {}): CancelablePromise<GetApiV3FilesystemMediafilesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/filesystem/mediafiles',
            query: {
                path: data.path
            }
        });
    }
    
}

export class HealthService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns HealthResource Success
     * @throws ApiError
     */
    public getApiV3Health(): CancelablePromise<GetApiV3HealthResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/health'
        });
    }
    
}

export class HistoryService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortKey
     * @param data.sortDirection
     * @param data.includeMovie
     * @param data.eventType
     * @param data.downloadId
     * @param data.movieIds
     * @param data.languages
     * @param data.quality
     * @returns HistoryResourcePagingResource Success
     * @throws ApiError
     */
    public getApiV3History(data: GetApiV3HistoryData = {}): CancelablePromise<GetApiV3HistoryResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/history',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortKey: data.sortKey,
                sortDirection: data.sortDirection,
                includeMovie: data.includeMovie,
                eventType: data.eventType,
                downloadId: data.downloadId,
                movieIds: data.movieIds,
                languages: data.languages,
                quality: data.quality
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.date
     * @param data.eventType
     * @param data.includeMovie
     * @returns HistoryResource Success
     * @throws ApiError
     */
    public getApiV3HistorySince(data: GetApiV3HistorySinceData = {}): CancelablePromise<GetApiV3HistorySinceResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/history/since',
            query: {
                date: data.date,
                eventType: data.eventType,
                includeMovie: data.includeMovie
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @param data.eventType
     * @param data.includeMovie
     * @returns HistoryResource Success
     * @throws ApiError
     */
    public getApiV3HistoryMovie(data: GetApiV3HistoryMovieData = {}): CancelablePromise<GetApiV3HistoryMovieResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/history/movie',
            query: {
                movieId: data.movieId,
                eventType: data.eventType,
                includeMovie: data.includeMovie
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3HistoryFailedById(data: PostApiV3HistoryFailedByIdData): CancelablePromise<PostApiV3HistoryFailedByIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/history/failed/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class HostConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns HostConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigHost(): CancelablePromise<GetApiV3ConfigHostResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/host'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns HostConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigHostById(data: PutApiV3ConfigHostByIdData): CancelablePromise<PutApiV3ConfigHostByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/host/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns HostConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigHostById(data: GetApiV3ConfigHostByIdData): CancelablePromise<GetApiV3ConfigHostByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/host/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class ImportExclusionsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns ImportExclusionsResource Success
     * @throws ApiError
     */
    public getApiV3Exclusions(): CancelablePromise<GetApiV3ExclusionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/exclusions'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ImportExclusionsResource Success
     * @throws ApiError
     */
    public postApiV3Exclusions(data: PostApiV3ExclusionsData = {}): CancelablePromise<PostApiV3ExclusionsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/exclusions',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ImportExclusionsResource Success
     * @throws ApiError
     */
    public putApiV3ExclusionsById(data: PutApiV3ExclusionsByIdData): CancelablePromise<PutApiV3ExclusionsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/exclusions/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3ExclusionsById(data: DeleteApiV3ExclusionsByIdData): CancelablePromise<DeleteApiV3ExclusionsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/exclusions/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ImportExclusionsResource Success
     * @throws ApiError
     */
    public getApiV3ExclusionsById(data: GetApiV3ExclusionsByIdData): CancelablePromise<GetApiV3ExclusionsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/exclusions/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3ExclusionsBulk(data: PostApiV3ExclusionsBulkData = {}): CancelablePromise<PostApiV3ExclusionsBulkResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/exclusions/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ImportListService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns ImportListResource Success
     * @throws ApiError
     */
    public getApiV3Importlist(): CancelablePromise<GetApiV3ImportlistResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/importlist'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceSave
     * @param data.requestBody
     * @returns ImportListResource Success
     * @throws ApiError
     */
    public postApiV3Importlist(data: PostApiV3ImportlistData = {}): CancelablePromise<PostApiV3ImportlistResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/importlist',
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.forceSave
     * @param data.requestBody
     * @returns ImportListResource Success
     * @throws ApiError
     */
    public putApiV3ImportlistById(data: PutApiV3ImportlistByIdData): CancelablePromise<PutApiV3ImportlistByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/importlist/{id}',
            path: {
                id: data.id
            },
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3ImportlistById(data: DeleteApiV3ImportlistByIdData): CancelablePromise<DeleteApiV3ImportlistByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/importlist/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ImportListResource Success
     * @throws ApiError
     */
    public getApiV3ImportlistById(data: GetApiV3ImportlistByIdData): CancelablePromise<GetApiV3ImportlistByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/importlist/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ImportListResource Success
     * @throws ApiError
     */
    public putApiV3ImportlistBulk(data: PutApiV3ImportlistBulkData = {}): CancelablePromise<PutApiV3ImportlistBulkResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/importlist/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3ImportlistBulk(data: DeleteApiV3ImportlistBulkData = {}): CancelablePromise<DeleteApiV3ImportlistBulkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/importlist/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns ImportListResource Success
     * @throws ApiError
     */
    public getApiV3ImportlistSchema(): CancelablePromise<GetApiV3ImportlistSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/importlist/schema'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceTest
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3ImportlistTest(data: PostApiV3ImportlistTestData = {}): CancelablePromise<PostApiV3ImportlistTestResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/importlist/test',
            query: {
                forceTest: data.forceTest
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3ImportlistTestall(): CancelablePromise<PostApiV3ImportlistTestallResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/importlist/testall'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3ImportlistActionByName(data: PostApiV3ImportlistActionByNameData): CancelablePromise<PostApiV3ImportlistActionByNameResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/importlist/action/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ImportListConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns ImportListConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigImportlist(): CancelablePromise<GetApiV3ConfigImportlistResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/importlist'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ImportListConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigImportlistById(data: PutApiV3ConfigImportlistByIdData): CancelablePromise<PutApiV3ConfigImportlistByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/importlist/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ImportListConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigImportlistById(data: GetApiV3ConfigImportlistByIdData): CancelablePromise<GetApiV3ConfigImportlistByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/importlist/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class ImportListMoviesService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.includeRecommendations
     * @param data.includeTrending
     * @param data.includePopular
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3ImportlistMovie(data: GetApiV3ImportlistMovieData = {}): CancelablePromise<GetApiV3ImportlistMovieResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/importlist/movie',
            query: {
                includeRecommendations: data.includeRecommendations,
                includeTrending: data.includeTrending,
                includePopular: data.includePopular
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3ImportlistMovie(data: PostApiV3ImportlistMovieData = {}): CancelablePromise<PostApiV3ImportlistMovieResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/importlist/movie',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class IndexerService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns IndexerResource Success
     * @throws ApiError
     */
    public getApiV3Indexer(): CancelablePromise<GetApiV3IndexerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/indexer'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceSave
     * @param data.requestBody
     * @returns IndexerResource Success
     * @throws ApiError
     */
    public postApiV3Indexer(data: PostApiV3IndexerData = {}): CancelablePromise<PostApiV3IndexerResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/indexer',
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.forceSave
     * @param data.requestBody
     * @returns IndexerResource Success
     * @throws ApiError
     */
    public putApiV3IndexerById(data: PutApiV3IndexerByIdData): CancelablePromise<PutApiV3IndexerByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/indexer/{id}',
            path: {
                id: data.id
            },
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3IndexerById(data: DeleteApiV3IndexerByIdData): CancelablePromise<DeleteApiV3IndexerByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/indexer/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns IndexerResource Success
     * @throws ApiError
     */
    public getApiV3IndexerById(data: GetApiV3IndexerByIdData): CancelablePromise<GetApiV3IndexerByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/indexer/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IndexerResource Success
     * @throws ApiError
     */
    public putApiV3IndexerBulk(data: PutApiV3IndexerBulkData = {}): CancelablePromise<PutApiV3IndexerBulkResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/indexer/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3IndexerBulk(data: DeleteApiV3IndexerBulkData = {}): CancelablePromise<DeleteApiV3IndexerBulkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/indexer/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns IndexerResource Success
     * @throws ApiError
     */
    public getApiV3IndexerSchema(): CancelablePromise<GetApiV3IndexerSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/indexer/schema'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceTest
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3IndexerTest(data: PostApiV3IndexerTestData = {}): CancelablePromise<PostApiV3IndexerTestResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/indexer/test',
            query: {
                forceTest: data.forceTest
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3IndexerTestall(): CancelablePromise<PostApiV3IndexerTestallResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/indexer/testall'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3IndexerActionByName(data: PostApiV3IndexerActionByNameData): CancelablePromise<PostApiV3IndexerActionByNameResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/indexer/action/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class IndexerConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns IndexerConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigIndexer(): CancelablePromise<GetApiV3ConfigIndexerResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/indexer'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns IndexerConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigIndexerById(data: PutApiV3ConfigIndexerByIdData): CancelablePromise<PutApiV3ConfigIndexerByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/indexer/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns IndexerConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigIndexerById(data: GetApiV3ConfigIndexerByIdData): CancelablePromise<GetApiV3ConfigIndexerByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/indexer/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class IndexerFlagService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns IndexerFlagResource Success
     * @throws ApiError
     */
    public getApiV3Indexerflag(): CancelablePromise<GetApiV3IndexerflagResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/indexerflag'
        });
    }
    
}

export class LanguageService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns LanguageResource Success
     * @throws ApiError
     */
    public getApiV3Language(): CancelablePromise<GetApiV3LanguageResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/language'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns LanguageResource Success
     * @throws ApiError
     */
    public getApiV3LanguageById(data: GetApiV3LanguageByIdData): CancelablePromise<GetApiV3LanguageByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/language/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class LocalizationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns string Success
     * @throws ApiError
     */
    public getApiV3Localization(): CancelablePromise<GetApiV3LocalizationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/localization'
        });
    }
    
    /**
     * @returns LocalizationLanguageResource Success
     * @throws ApiError
     */
    public getApiV3LocalizationLanguage(): CancelablePromise<GetApiV3LocalizationLanguageResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/localization/language'
        });
    }
    
}

export class LogService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortKey
     * @param data.sortDirection
     * @param data.level
     * @returns LogResourcePagingResource Success
     * @throws ApiError
     */
    public getApiV3Log(data: GetApiV3LogData = {}): CancelablePromise<GetApiV3LogResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/log',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortKey: data.sortKey,
                sortDirection: data.sortDirection,
                level: data.level
            }
        });
    }
    
}

export class LogFileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns LogFileResource Success
     * @throws ApiError
     */
    public getApiV3LogFile(): CancelablePromise<GetApiV3LogFileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/log/file'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filename
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3LogFileByFilename(data: GetApiV3LogFileByFilenameData): CancelablePromise<GetApiV3LogFileByFilenameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/log/file/{filename}',
            path: {
                filename: data.filename
            }
        });
    }
    
}

export class ManualImportService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.folder
     * @param data.downloadId
     * @param data.movieId
     * @param data.filterExistingFiles
     * @returns ManualImportResource Success
     * @throws ApiError
     */
    public getApiV3Manualimport(data: GetApiV3ManualimportData = {}): CancelablePromise<GetApiV3ManualimportResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/manualimport',
            query: {
                folder: data.folder,
                downloadId: data.downloadId,
                movieId: data.movieId,
                filterExistingFiles: data.filterExistingFiles
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3Manualimport(data: PostApiV3ManualimportData = {}): CancelablePromise<PostApiV3ManualimportResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/manualimport',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MediaCoverService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @param data.filename
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3MediacoverByMovieIdByFilename(data: GetApiV3MediacoverByMovieIdByFilenameData): CancelablePromise<GetApiV3MediacoverByMovieIdByFilenameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/mediacover/{movieId}/{filename}',
            path: {
                movieId: data.movieId,
                filename: data.filename
            }
        });
    }
    
}

export class MediaManagementConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns MediaManagementConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigMediamanagement(): CancelablePromise<GetApiV3ConfigMediamanagementResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/mediamanagement'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns MediaManagementConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigMediamanagementById(data: PutApiV3ConfigMediamanagementByIdData): CancelablePromise<PutApiV3ConfigMediamanagementByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/mediamanagement/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns MediaManagementConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigMediamanagementById(data: GetApiV3ConfigMediamanagementByIdData): CancelablePromise<GetApiV3ConfigMediamanagementByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/mediamanagement/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class MetadataService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns MetadataResource Success
     * @throws ApiError
     */
    public getApiV3Metadata(): CancelablePromise<GetApiV3MetadataResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/metadata'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceSave
     * @param data.requestBody
     * @returns MetadataResource Success
     * @throws ApiError
     */
    public postApiV3Metadata(data: PostApiV3MetadataData = {}): CancelablePromise<PostApiV3MetadataResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/metadata',
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.forceSave
     * @param data.requestBody
     * @returns MetadataResource Success
     * @throws ApiError
     */
    public putApiV3MetadataById(data: PutApiV3MetadataByIdData): CancelablePromise<PutApiV3MetadataByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/metadata/{id}',
            path: {
                id: data.id
            },
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3MetadataById(data: DeleteApiV3MetadataByIdData): CancelablePromise<DeleteApiV3MetadataByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/metadata/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns MetadataResource Success
     * @throws ApiError
     */
    public getApiV3MetadataById(data: GetApiV3MetadataByIdData): CancelablePromise<GetApiV3MetadataByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/metadata/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns MetadataResource Success
     * @throws ApiError
     */
    public getApiV3MetadataSchema(): CancelablePromise<GetApiV3MetadataSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/metadata/schema'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceTest
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3MetadataTest(data: PostApiV3MetadataTestData = {}): CancelablePromise<PostApiV3MetadataTestResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/metadata/test',
            query: {
                forceTest: data.forceTest
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3MetadataTestall(): CancelablePromise<PostApiV3MetadataTestallResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/metadata/testall'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3MetadataActionByName(data: PostApiV3MetadataActionByNameData): CancelablePromise<PostApiV3MetadataActionByNameResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/metadata/action/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MetadataConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns MetadataConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigMetadata(): CancelablePromise<GetApiV3ConfigMetadataResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/metadata'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns MetadataConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigMetadataById(data: PutApiV3ConfigMetadataByIdData): CancelablePromise<PutApiV3ConfigMetadataByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/metadata/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns MetadataConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigMetadataById(data: GetApiV3ConfigMetadataByIdData): CancelablePromise<GetApiV3ConfigMetadataByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/metadata/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class MissingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortKey
     * @param data.sortDirection
     * @param data.monitored
     * @returns MovieResourcePagingResource Success
     * @throws ApiError
     */
    public getApiV3WantedMissing(data: GetApiV3WantedMissingData = {}): CancelablePromise<GetApiV3WantedMissingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/wanted/missing',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortKey: data.sortKey,
                sortDirection: data.sortDirection,
                monitored: data.monitored
            }
        });
    }
    
}

export class MovieService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.tmdbId
     * @param data.excludeLocalCovers
     * @param data.languageId
     * @returns MovieResource Success
     * @throws ApiError
     */
    public getApiV3Movie(data: GetApiV3MovieData = {}): CancelablePromise<GetApiV3MovieResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/movie',
            query: {
                tmdbId: data.tmdbId,
                excludeLocalCovers: data.excludeLocalCovers,
                languageId: data.languageId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns MovieResource Success
     * @throws ApiError
     */
    public postApiV3Movie(data: PostApiV3MovieData = {}): CancelablePromise<PostApiV3MovieResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/movie',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.moveFiles
     * @param data.requestBody
     * @returns MovieResource Success
     * @throws ApiError
     */
    public putApiV3MovieById(data: PutApiV3MovieByIdData): CancelablePromise<PutApiV3MovieByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/movie/{id}',
            path: {
                id: data.id
            },
            query: {
                moveFiles: data.moveFiles
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.deleteFiles
     * @param data.addImportExclusion
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3MovieById(data: DeleteApiV3MovieByIdData): CancelablePromise<DeleteApiV3MovieByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/movie/{id}',
            path: {
                id: data.id
            },
            query: {
                deleteFiles: data.deleteFiles,
                addImportExclusion: data.addImportExclusion
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns MovieResource Success
     * @throws ApiError
     */
    public getApiV3MovieById(data: GetApiV3MovieByIdData): CancelablePromise<GetApiV3MovieByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/movie/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class MovieEditorService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiV3MovieEditor(data: PutApiV3MovieEditorData = {}): CancelablePromise<PutApiV3MovieEditorResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/movie/editor',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3MovieEditor(data: DeleteApiV3MovieEditorData = {}): CancelablePromise<DeleteApiV3MovieEditorResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/movie/editor',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MovieFileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @param data.movieFileIds
     * @returns MovieFileResource Success
     * @throws ApiError
     */
    public getApiV3Moviefile(data: GetApiV3MoviefileData = {}): CancelablePromise<GetApiV3MoviefileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/moviefile',
            query: {
                movieId: data.movieId,
                movieFileIds: data.movieFileIds
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns MovieFileResource Success
     * @throws ApiError
     */
    public putApiV3MoviefileById(data: PutApiV3MoviefileByIdData): CancelablePromise<PutApiV3MoviefileByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/moviefile/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3MoviefileById(data: DeleteApiV3MoviefileByIdData): CancelablePromise<DeleteApiV3MoviefileByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/moviefile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns MovieFileResource Success
     * @throws ApiError
     */
    public getApiV3MoviefileById(data: GetApiV3MoviefileByIdData): CancelablePromise<GetApiV3MoviefileByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/moviefile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiV3MoviefileEditor(data: PutApiV3MoviefileEditorData = {}): CancelablePromise<PutApiV3MoviefileEditorResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/moviefile/editor',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3MoviefileBulk(data: DeleteApiV3MoviefileBulkData = {}): CancelablePromise<DeleteApiV3MoviefileBulkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/moviefile/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MovieImportService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3MovieImport(data: PostApiV3MovieImportData = {}): CancelablePromise<PostApiV3MovieImportResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/movie/import',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class MovieLookupService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.tmdbId
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3MovieLookupTmdb(data: GetApiV3MovieLookupTmdbData = {}): CancelablePromise<GetApiV3MovieLookupTmdbResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/movie/lookup/tmdb',
            query: {
                tmdbId: data.tmdbId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.imdbId
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3MovieLookupImdb(data: GetApiV3MovieLookupImdbData = {}): CancelablePromise<GetApiV3MovieLookupImdbResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/movie/lookup/imdb',
            query: {
                imdbId: data.imdbId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.term
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3MovieLookup(data: GetApiV3MovieLookupData = {}): CancelablePromise<GetApiV3MovieLookupResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/movie/lookup',
            query: {
                term: data.term
            }
        });
    }
    
}

export class NamingConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns NamingConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigNaming(): CancelablePromise<GetApiV3ConfigNamingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/naming'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns NamingConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigNamingById(data: PutApiV3ConfigNamingByIdData): CancelablePromise<PutApiV3ConfigNamingByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/naming/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns NamingConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigNamingById(data: GetApiV3ConfigNamingByIdData): CancelablePromise<GetApiV3ConfigNamingByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/naming/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.renameMovies
     * @param data.replaceIllegalCharacters
     * @param data.colonReplacementFormat
     * @param data.standardMovieFormat
     * @param data.movieFolderFormat
     * @param data.id
     * @param data.resourceName
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3ConfigNamingExamples(data: GetApiV3ConfigNamingExamplesData = {}): CancelablePromise<GetApiV3ConfigNamingExamplesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/naming/examples',
            query: {
                renameMovies: data.renameMovies,
                replaceIllegalCharacters: data.replaceIllegalCharacters,
                colonReplacementFormat: data.colonReplacementFormat,
                standardMovieFormat: data.standardMovieFormat,
                movieFolderFormat: data.movieFolderFormat,
                id: data.id,
                resourceName: data.resourceName
            }
        });
    }
    
}

export class NotificationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns NotificationResource Success
     * @throws ApiError
     */
    public getApiV3Notification(): CancelablePromise<GetApiV3NotificationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/notification'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceSave
     * @param data.requestBody
     * @returns NotificationResource Success
     * @throws ApiError
     */
    public postApiV3Notification(data: PostApiV3NotificationData = {}): CancelablePromise<PostApiV3NotificationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/notification',
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.forceSave
     * @param data.requestBody
     * @returns NotificationResource Success
     * @throws ApiError
     */
    public putApiV3NotificationById(data: PutApiV3NotificationByIdData): CancelablePromise<PutApiV3NotificationByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/notification/{id}',
            path: {
                id: data.id
            },
            query: {
                forceSave: data.forceSave
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3NotificationById(data: DeleteApiV3NotificationByIdData): CancelablePromise<DeleteApiV3NotificationByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/notification/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns NotificationResource Success
     * @throws ApiError
     */
    public getApiV3NotificationById(data: GetApiV3NotificationByIdData): CancelablePromise<GetApiV3NotificationByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/notification/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns NotificationResource Success
     * @throws ApiError
     */
    public getApiV3NotificationSchema(): CancelablePromise<GetApiV3NotificationSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/notification/schema'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.forceTest
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3NotificationTest(data: PostApiV3NotificationTestData = {}): CancelablePromise<PostApiV3NotificationTestResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/notification/test',
            query: {
                forceTest: data.forceTest
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3NotificationTestall(): CancelablePromise<PostApiV3NotificationTestallResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/notification/testall'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3NotificationActionByName(data: PostApiV3NotificationActionByNameData): CancelablePromise<PostApiV3NotificationActionByNameResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/notification/action/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ParseService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.title
     * @returns ParseResource Success
     * @throws ApiError
     */
    public getApiV3Parse(data: GetApiV3ParseData = {}): CancelablePromise<GetApiV3ParseResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/parse',
            query: {
                title: data.title
            }
        });
    }
    
}

export class PingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns PingResource Success
     * @throws ApiError
     */
    public getPing(): CancelablePromise<GetPingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/ping'
        });
    }
    
    /**
     * @returns PingResource Success
     * @throws ApiError
     */
    public headPing(): CancelablePromise<HeadPingResponse> {
        return this.httpRequest.request({
            method: 'HEAD',
            url: '/ping'
        });
    }
    
}

export class QualityDefinitionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns QualityDefinitionResource Success
     * @throws ApiError
     */
    public putApiV3QualitydefinitionById(data: PutApiV3QualitydefinitionByIdData): CancelablePromise<PutApiV3QualitydefinitionByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/qualitydefinition/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns QualityDefinitionResource Success
     * @throws ApiError
     */
    public getApiV3QualitydefinitionById(data: GetApiV3QualitydefinitionByIdData): CancelablePromise<GetApiV3QualitydefinitionByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/qualitydefinition/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns QualityDefinitionResource Success
     * @throws ApiError
     */
    public getApiV3Qualitydefinition(): CancelablePromise<GetApiV3QualitydefinitionResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/qualitydefinition'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiV3QualitydefinitionUpdate(data: PutApiV3QualitydefinitionUpdateData = {}): CancelablePromise<PutApiV3QualitydefinitionUpdateResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/qualitydefinition/update',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class QualityProfileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns QualityProfileResource Success
     * @throws ApiError
     */
    public postApiV3Qualityprofile(data: PostApiV3QualityprofileData = {}): CancelablePromise<PostApiV3QualityprofileResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/qualityprofile',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns QualityProfileResource Success
     * @throws ApiError
     */
    public getApiV3Qualityprofile(): CancelablePromise<GetApiV3QualityprofileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/qualityprofile'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3QualityprofileById(data: DeleteApiV3QualityprofileByIdData): CancelablePromise<DeleteApiV3QualityprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/qualityprofile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns QualityProfileResource Success
     * @throws ApiError
     */
    public putApiV3QualityprofileById(data: PutApiV3QualityprofileByIdData): CancelablePromise<PutApiV3QualityprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/qualityprofile/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns QualityProfileResource Success
     * @throws ApiError
     */
    public getApiV3QualityprofileById(data: GetApiV3QualityprofileByIdData): CancelablePromise<GetApiV3QualityprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/qualityprofile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class QualityProfileSchemaService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns QualityProfileResource Success
     * @throws ApiError
     */
    public getApiV3QualityprofileSchema(): CancelablePromise<GetApiV3QualityprofileSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/qualityprofile/schema'
        });
    }
    
}

export class QueueService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.removeFromClient
     * @param data.blocklist
     * @param data.skipRedownload
     * @param data.changeCategory
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3QueueById(data: DeleteApiV3QueueByIdData): CancelablePromise<DeleteApiV3QueueByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/queue/{id}',
            path: {
                id: data.id
            },
            query: {
                removeFromClient: data.removeFromClient,
                blocklist: data.blocklist,
                skipRedownload: data.skipRedownload,
                changeCategory: data.changeCategory
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.removeFromClient
     * @param data.blocklist
     * @param data.skipRedownload
     * @param data.changeCategory
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3QueueBulk(data: DeleteApiV3QueueBulkData = {}): CancelablePromise<DeleteApiV3QueueBulkResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/queue/bulk',
            query: {
                removeFromClient: data.removeFromClient,
                blocklist: data.blocklist,
                skipRedownload: data.skipRedownload,
                changeCategory: data.changeCategory
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortKey
     * @param data.sortDirection
     * @param data.includeUnknownMovieItems
     * @param data.includeMovie
     * @param data.movieIds
     * @param data.protocol
     * @param data.languages
     * @param data.quality
     * @returns QueueResourcePagingResource Success
     * @throws ApiError
     */
    public getApiV3Queue(data: GetApiV3QueueData = {}): CancelablePromise<GetApiV3QueueResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/queue',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortKey: data.sortKey,
                sortDirection: data.sortDirection,
                includeUnknownMovieItems: data.includeUnknownMovieItems,
                includeMovie: data.includeMovie,
                movieIds: data.movieIds,
                protocol: data.protocol,
                languages: data.languages,
                quality: data.quality
            }
        });
    }
    
}

export class QueueActionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3QueueGrabById(data: PostApiV3QueueGrabByIdData): CancelablePromise<PostApiV3QueueGrabByIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/queue/grab/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3QueueGrabBulk(data: PostApiV3QueueGrabBulkData = {}): CancelablePromise<PostApiV3QueueGrabBulkResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/queue/grab/bulk',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class QueueDetailsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @param data.includeMovie
     * @returns QueueResource Success
     * @throws ApiError
     */
    public getApiV3QueueDetails(data: GetApiV3QueueDetailsData = {}): CancelablePromise<GetApiV3QueueDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/queue/details',
            query: {
                movieId: data.movieId,
                includeMovie: data.includeMovie
            }
        });
    }
    
}

export class QueueStatusService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns QueueStatusResource Success
     * @throws ApiError
     */
    public getApiV3QueueStatus(): CancelablePromise<GetApiV3QueueStatusResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/queue/status'
        });
    }
    
}

export class ReleaseService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3Release(data: PostApiV3ReleaseData = {}): CancelablePromise<PostApiV3ReleaseResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/release',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @returns ReleaseResource Success
     * @throws ApiError
     */
    public getApiV3Release(data: GetApiV3ReleaseData = {}): CancelablePromise<GetApiV3ReleaseResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/release',
            query: {
                movieId: data.movieId
            }
        });
    }
    
}

export class ReleaseProfileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ReleaseProfileResource Success
     * @throws ApiError
     */
    public postApiV3Releaseprofile(data: PostApiV3ReleaseprofileData = {}): CancelablePromise<PostApiV3ReleaseprofileResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/releaseprofile',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns ReleaseProfileResource Success
     * @throws ApiError
     */
    public getApiV3Releaseprofile(): CancelablePromise<GetApiV3ReleaseprofileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/releaseprofile'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3ReleaseprofileById(data: DeleteApiV3ReleaseprofileByIdData): CancelablePromise<DeleteApiV3ReleaseprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/releaseprofile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ReleaseProfileResource Success
     * @throws ApiError
     */
    public putApiV3ReleaseprofileById(data: PutApiV3ReleaseprofileByIdData): CancelablePromise<PutApiV3ReleaseprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/releaseprofile/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ReleaseProfileResource Success
     * @throws ApiError
     */
    public getApiV3ReleaseprofileById(data: GetApiV3ReleaseprofileByIdData): CancelablePromise<GetApiV3ReleaseprofileByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/releaseprofile/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class ReleasePushService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ReleaseResource Success
     * @throws ApiError
     */
    public postApiV3ReleasePush(data: PostApiV3ReleasePushData = {}): CancelablePromise<PostApiV3ReleasePushResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/release/push',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class RemotePathMappingService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RemotePathMappingResource Success
     * @throws ApiError
     */
    public postApiV3Remotepathmapping(data: PostApiV3RemotepathmappingData = {}): CancelablePromise<PostApiV3RemotepathmappingResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/remotepathmapping',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns RemotePathMappingResource Success
     * @throws ApiError
     */
    public getApiV3Remotepathmapping(): CancelablePromise<GetApiV3RemotepathmappingResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/remotepathmapping'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3RemotepathmappingById(data: DeleteApiV3RemotepathmappingByIdData): CancelablePromise<DeleteApiV3RemotepathmappingByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/remotepathmapping/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns RemotePathMappingResource Success
     * @throws ApiError
     */
    public putApiV3RemotepathmappingById(data: PutApiV3RemotepathmappingByIdData): CancelablePromise<PutApiV3RemotepathmappingByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/remotepathmapping/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns RemotePathMappingResource Success
     * @throws ApiError
     */
    public getApiV3RemotepathmappingById(data: GetApiV3RemotepathmappingByIdData): CancelablePromise<GetApiV3RemotepathmappingByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/remotepathmapping/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class RenameMovieService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.movieId
     * @returns RenameMovieResource Success
     * @throws ApiError
     */
    public getApiV3Rename(data: GetApiV3RenameData = {}): CancelablePromise<GetApiV3RenameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/rename',
            query: {
                movieId: data.movieId
            }
        });
    }
    
}

export class RootFolderService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RootFolderResource Success
     * @throws ApiError
     */
    public postApiV3Rootfolder(data: PostApiV3RootfolderData = {}): CancelablePromise<PostApiV3RootfolderResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/rootfolder',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns RootFolderResource Success
     * @throws ApiError
     */
    public getApiV3Rootfolder(): CancelablePromise<GetApiV3RootfolderResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/rootfolder'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3RootfolderById(data: DeleteApiV3RootfolderByIdData): CancelablePromise<DeleteApiV3RootfolderByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/rootfolder/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns RootFolderResource Success
     * @throws ApiError
     */
    public getApiV3RootfolderById(data: GetApiV3RootfolderByIdData): CancelablePromise<GetApiV3RootfolderByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/rootfolder/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class SystemService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns SystemResource Success
     * @throws ApiError
     */
    public getApiV3SystemStatus(): CancelablePromise<GetApiV3SystemStatusResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/system/status'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3SystemRoutes(): CancelablePromise<GetApiV3SystemRoutesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/system/routes'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3SystemRoutesDuplicate(): CancelablePromise<GetApiV3SystemRoutesDuplicateResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/system/routes/duplicate'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3SystemShutdown(): CancelablePromise<PostApiV3SystemShutdownResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/system/shutdown'
        });
    }
    
    /**
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiV3SystemRestart(): CancelablePromise<PostApiV3SystemRestartResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/system/restart'
        });
    }
    
}

export class TagService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns TagResource Success
     * @throws ApiError
     */
    public getApiV3Tag(): CancelablePromise<GetApiV3TagResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/tag'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TagResource Success
     * @throws ApiError
     */
    public postApiV3Tag(data: PostApiV3TagData = {}): CancelablePromise<PostApiV3TagResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v3/tag',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns TagResource Success
     * @throws ApiError
     */
    public putApiV3TagById(data: PutApiV3TagByIdData): CancelablePromise<PutApiV3TagByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/tag/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiV3TagById(data: DeleteApiV3TagByIdData): CancelablePromise<DeleteApiV3TagByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v3/tag/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns TagResource Success
     * @throws ApiError
     */
    public getApiV3TagById(data: GetApiV3TagByIdData): CancelablePromise<GetApiV3TagByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/tag/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class TagDetailsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns TagDetailsResource Success
     * @throws ApiError
     */
    public getApiV3TagDetail(): CancelablePromise<GetApiV3TagDetailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/tag/detail'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns TagDetailsResource Success
     * @throws ApiError
     */
    public getApiV3TagDetailById(data: GetApiV3TagDetailByIdData): CancelablePromise<GetApiV3TagDetailByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/tag/detail/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class TaskService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns TaskResource Success
     * @throws ApiError
     */
    public getApiV3SystemTask(): CancelablePromise<GetApiV3SystemTaskResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/system/task'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns TaskResource Success
     * @throws ApiError
     */
    public getApiV3SystemTaskById(data: GetApiV3SystemTaskByIdData): CancelablePromise<GetApiV3SystemTaskByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/system/task/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class UiConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UiConfigResource Success
     * @throws ApiError
     */
    public putApiV3ConfigUiById(data: PutApiV3ConfigUiByIdData): CancelablePromise<PutApiV3ConfigUiByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v3/config/ui/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns UiConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigUiById(data: GetApiV3ConfigUiByIdData): CancelablePromise<GetApiV3ConfigUiByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/ui/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @returns UiConfigResource Success
     * @throws ApiError
     */
    public getApiV3ConfigUi(): CancelablePromise<GetApiV3ConfigUiResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/config/ui'
        });
    }
    
}

export class UpdateService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns UpdateResource Success
     * @throws ApiError
     */
    public getApiV3Update(): CancelablePromise<GetApiV3UpdateResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/update'
        });
    }
    
}

export class UpdateLogFileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @returns LogFileResource Success
     * @throws ApiError
     */
    public getApiV3LogFileUpdate(): CancelablePromise<GetApiV3LogFileUpdateResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/log/file/update'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.filename
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiV3LogFileUpdateByFilename(data: GetApiV3LogFileUpdateByFilenameData): CancelablePromise<GetApiV3LogFileUpdateByFilenameResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v3/log/file/update/{filename}',
            path: {
                filename: data.filename
            }
        });
    }
    
}