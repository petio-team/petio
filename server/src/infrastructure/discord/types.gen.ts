// This file is auto-generated by @hey-api/openapi-ts

export type AccountResponse = {
    id: string;
    name?: string | null;
};

export type ActionRow = {
    type: 1;
    components: Array<(Button | ChannelSelect | InputText | MentionableSelect | RoleSelect | StringSelect | UserSelect)>;
};

export type AfkTimeouts = 60 | 300 | 900 | 1800 | 3600;

export type AllowedMentionTypes = "users" | "roles" | "everyone";

export type ApplicationCommandAttachmentOption = {
    type: 11;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandAttachmentOptionResponse = {
    type: 11;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandAutocompleteCallbackRequest = {
    type: 8;
    data: InteractionApplicationCommandAutocompleteCallbackIntegerData | InteractionApplicationCommandAutocompleteCallbackNumberData | InteractionApplicationCommandAutocompleteCallbackStringData;
};

export type ApplicationCommandBooleanOption = {
    type: 5;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandBooleanOptionResponse = {
    type: 5;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandChannelOption = {
    type: 7;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    channel_types?: Array<ChannelTypes> | null;
};

export type ApplicationCommandChannelOptionResponse = {
    type: 7;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    channel_types?: Array<ChannelTypes> | null;
};

export type ApplicationCommandCreateRequest = {
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    options?: Array<(ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandSubcommandGroupOption | ApplicationCommandSubcommandOption | ApplicationCommandUserOption)> | null;
    default_member_permissions?: number | null;
    dm_permission?: boolean | null;
    type?: null | ApplicationCommandType;
};

export type ApplicationCommandIntegerOption = {
    type: 4;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    autocomplete?: boolean | null;
    choices?: Array<ApplicationCommandOptionIntegerChoice> | null;
    min_value?: null | Int53Type;
    max_value?: null | Int53Type;
};

export type ApplicationCommandIntegerOptionResponse = {
    type: 4;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    autocomplete?: boolean | null;
    choices?: Array<ApplicationCommandOptionIntegerChoiceResponse> | null;
    min_value?: null | Int53Type;
    max_value?: null | Int53Type;
};

export type ApplicationCommandMentionableOption = {
    type: 9;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandMentionableOptionResponse = {
    type: 9;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandNumberOption = {
    type: 10;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    autocomplete?: boolean | null;
    choices?: Array<ApplicationCommandOptionNumberChoice> | null;
    min_value?: number | null;
    max_value?: number | null;
};

export type ApplicationCommandNumberOptionResponse = {
    type: 10;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    autocomplete?: boolean | null;
    choices?: Array<ApplicationCommandOptionNumberChoiceResponse> | null;
    min_value?: number | null;
    max_value?: number | null;
};

export type ApplicationCommandOptionIntegerChoice = {
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    value: Int53Type;
};

export type ApplicationCommandOptionIntegerChoiceResponse = {
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    value: Int53Type;
};

export type ApplicationCommandOptionNumberChoice = {
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    value: number;
};

export type ApplicationCommandOptionNumberChoiceResponse = {
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    value: number;
};

export type ApplicationCommandOptionStringChoice = {
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    value: string;
};

export type ApplicationCommandOptionStringChoiceResponse = {
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    value: string;
};

export type ApplicationCommandOptionType = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;

export type ApplicationCommandPatchRequestPartial = {
    name?: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    options?: Array<(ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandSubcommandGroupOption | ApplicationCommandSubcommandOption | ApplicationCommandUserOption)> | null;
    default_member_permissions?: number | null;
    dm_permission?: boolean | null;
};

export type ApplicationCommandPermission = {
    id: SnowflakeType;
    type: ApplicationCommandPermissionType;
    permission: boolean;
};

export type ApplicationCommandPermissionType = 1 | 2 | 3;

export type ApplicationCommandResponse = {
    id: SnowflakeType;
    application_id: SnowflakeType;
    version: SnowflakeType;
    default_member_permissions?: string | null;
    type: ApplicationCommandType;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    guild_id?: null | SnowflakeType;
    dm_permission?: boolean | null;
    options?: Array<(ApplicationCommandAttachmentOptionResponse | ApplicationCommandBooleanOptionResponse | ApplicationCommandChannelOptionResponse | ApplicationCommandIntegerOptionResponse | ApplicationCommandMentionableOptionResponse | ApplicationCommandNumberOptionResponse | ApplicationCommandRoleOptionResponse | ApplicationCommandStringOptionResponse | ApplicationCommandSubcommandGroupOptionResponse | ApplicationCommandSubcommandOptionResponse | ApplicationCommandUserOptionResponse)> | null;
    nsfw?: boolean | null;
};

export type ApplicationCommandRoleOption = {
    type: 8;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandRoleOptionResponse = {
    type: 8;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandStringOption = {
    type: 3;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    autocomplete?: boolean | null;
    min_length?: number | null;
    max_length?: number | null;
    choices?: Array<ApplicationCommandOptionStringChoice> | null;
};

export type ApplicationCommandStringOptionResponse = {
    type: 3;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    autocomplete?: boolean | null;
    choices?: Array<ApplicationCommandOptionStringChoiceResponse> | null;
    min_length?: number | null;
    max_length?: number | null;
};

export type ApplicationCommandSubcommandGroupOption = {
    type: 2;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    options?: Array<ApplicationCommandSubcommandOption> | null;
};

export type ApplicationCommandSubcommandGroupOptionResponse = {
    type: 2;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    options?: Array<ApplicationCommandSubcommandOptionResponse> | null;
};

export type ApplicationCommandSubcommandOption = {
    type: 1;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    options?: Array<(ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandUserOption)> | null;
};

export type ApplicationCommandSubcommandOptionResponse = {
    type: 1;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
    options?: Array<(ApplicationCommandAttachmentOptionResponse | ApplicationCommandBooleanOptionResponse | ApplicationCommandChannelOptionResponse | ApplicationCommandIntegerOptionResponse | ApplicationCommandMentionableOptionResponse | ApplicationCommandNumberOptionResponse | ApplicationCommandRoleOptionResponse | ApplicationCommandStringOptionResponse | ApplicationCommandUserOptionResponse)> | null;
};

export type ApplicationCommandType = 1 | 2 | 3;

export type ApplicationCommandUpdateRequest = {
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    options?: Array<(ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandSubcommandGroupOption | ApplicationCommandSubcommandOption | ApplicationCommandUserOption)> | null;
    default_member_permissions?: number | null;
    dm_permission?: boolean | null;
    type?: null | ApplicationCommandType;
    id?: null | SnowflakeType;
};

export type ApplicationCommandUserOption = {
    type: 6;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationCommandUserOptionResponse = {
    type: 6;
    name: string;
    name_localized?: string | null;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localized?: string | null;
    description_localizations?: {
        [key: string]: (string);
    } | null;
    required?: boolean | null;
};

export type ApplicationFormPartial = {
    description?: {
        default: string;
        localizations?: {
            [key: string]: (string);
        } | null;
    } | null;
    icon?: string | null;
    cover_image?: string | null;
    team_id?: null | SnowflakeType;
    flags?: number | null;
    interactions_endpoint_url?: string | null;
    max_participants?: number | null;
    type?: null | ApplicationTypes;
    tags?: Array<(string)> | null;
    custom_install_url?: string | null;
    install_params?: null | ApplicationOAuth2InstallParams;
    role_connections_verification_url?: string | null;
};

export type ApplicationIncomingWebhookResponse = {
    application_id?: null | SnowflakeType;
    avatar?: string | null;
    channel_id?: null | SnowflakeType;
    guild_id?: null | SnowflakeType;
    id: SnowflakeType;
    name: string;
    type: 3;
    user?: null | UserResponse;
};

export type ApplicationOAuth2InstallParams = {
    scopes?: Array<('applications.commands' | 'bot')> | null;
    permissions?: number | null;
};

export type ApplicationOAuth2InstallParamsResponse = {
    scopes: Array<('applications.commands' | 'bot')>;
    permissions: string;
};

export type ApplicationResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description: string;
    type?: null | ApplicationTypes;
    cover_image?: string | null;
    primary_sku_id?: null | SnowflakeType;
    bot?: null | UserResponse;
    slug?: string | null;
    guild_id?: null | SnowflakeType;
    rpc_origins?: Array<(string | null)> | null;
    bot_public?: boolean | null;
    bot_require_code_grant?: boolean | null;
    terms_of_service_url?: string | null;
    privacy_policy_url?: string | null;
    custom_install_url?: string | null;
    install_params?: null | ApplicationOAuth2InstallParamsResponse;
    verify_key: string;
    flags: number;
    max_participants?: number | null;
    tags?: Array<(string)> | null;
};

export type ApplicationRoleConnectionsMetadataItemRequest = {
    type: MetadataItemTypes;
    key: string;
    name: string;
    name_localizations?: {
        [key: string]: (string | null);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string | null);
    } | null;
};

export type ApplicationRoleConnectionsMetadataItemResponse = {
    type: MetadataItemTypes;
    key: string;
    name: string;
    name_localizations?: {
        [key: string]: (string);
    } | null;
    description: string;
    description_localizations?: {
        [key: string]: (string);
    } | null;
};

export type ApplicationTypes = 4;

export type ApplicationUserRoleConnectionResponse = {
    platform_name?: string | null;
    platform_username?: string | null;
    metadata?: {
        [key: string]: (string);
    } | null;
};

export type AuditLogActionTypes = 1 | 10 | 11 | 12 | 13 | 14 | 15 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 30 | 31 | 32 | 40 | 41 | 42 | 50 | 51 | 52 | 60 | 61 | 62 | 72 | 73 | 74 | 75 | 80 | 81 | 82 | 83 | 84 | 85 | 90 | 91 | 92 | 100 | 101 | 102 | 110 | 111 | 112 | 121 | 130 | 131 | 132 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 150 | 151 | 163 | 164 | 165 | 166 | 167 | 171 | 172 | 180 | 190 | 191 | 192 | 193;

export type AuditLogEntryResponse = {
    id: SnowflakeType;
    action_type: AuditLogActionTypes;
    user_id?: null | SnowflakeType;
    target_id?: null | SnowflakeType;
    changes?: Array<AuditLogObjectChangeResponse> | null;
    options?: {
        [key: string]: (string);
    } | null;
    reason?: string | null;
};

export type AuditLogObjectChangeResponse = {
    key?: string | null;
    new_value?: unknown;
    old_value?: unknown;
};

export type AutomodActionType = 1 | 2 | 3 | 4;

export type AutomodEventType = 1 | 2;

export type AutomodKeywordPresetType = 1 | 2 | 3;

export type AutomodTriggerType = 1 | 2 | 3 | 4 | 5;

export type AvailableLocalesEnum = "ar" | "bg" | "cs" | "da" | "de" | "el" | "en-GB" | "en-US" | "es-419" | "es-ES" | "fi" | "fr" | "he" | "hi" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "nl" | "no" | "pl" | "pt-BR" | "ro" | "ru" | "sv-SE" | "th" | "tr" | "uk" | "vi" | "zh-CN" | "zh-TW";

export type BaseCreateMessageCreateRequest = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    sticker_ids?: Array<SnowflakeType> | null;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    flags?: number | null;
    attachments?: Array<MessageAttachmentRequest> | null;
};

export type BasicApplicationResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description: string;
    type?: null | ApplicationTypes;
    cover_image?: string | null;
    primary_sku_id?: null | SnowflakeType;
    bot?: null | UserResponse;
};

export type BasicMessageResponse = {
    type: MessageType;
    channel_id: SnowflakeType;
    content: string;
    attachments: Array<MessageAttachmentResponse>;
    embeds: Array<MessageEmbedResponse>;
    timestamp: string;
    edited_timestamp?: string | null;
    flags: number;
    components: Array<(MessageComponentActionRowResponse | MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse)>;
    resolved?: null | ResolvedObjectsResponse;
    id: SnowflakeType;
    author: UserResponse;
    mentions: Array<UserResponse>;
    mention_roles: Array<SnowflakeType>;
    pinned: boolean;
    mention_everyone: boolean;
    tts: boolean;
    activity?: null | MessageActivityResponse;
    application?: null | BasicApplicationResponse;
    application_id?: null | SnowflakeType;
    interaction?: null | MessageInteractionResponse;
    nonce?: number | string | null;
    webhook_id?: null | SnowflakeType;
    message_reference?: null | MessageReferenceResponse;
    thread?: null | ThreadResponse;
    mention_channels?: Array<(null | MessageMentionChannelResponse)> | null;
    stickers?: Array<(GuildStickerResponse | StandardStickerResponse)> | null;
    sticker_items?: Array<MessageStickerItemResponse> | null;
    role_subscription_data?: null | MessageRoleSubscriptionDataResponse;
    purchase_notification?: null | PurchaseNotificationResponse;
    position?: number | null;
};

export type BlockMessageAction = {
    type: 1;
    metadata?: null | BlockMessageActionMetadata;
};

export type BlockMessageActionMetadata = {
    custom_message?: string | null;
};

export type BlockMessageActionMetadataResponse = {
    custom_message?: string | null;
};

export type BlockMessageActionResponse = {
    type: 1;
    metadata: BlockMessageActionMetadataResponse;
};

export type BotAccountPatchRequest = {
    username: string;
    avatar?: string | null;
};

export type BulkBanUsersResponse = {
    banned_users: Array<SnowflakeType>;
    failed_users: Array<SnowflakeType>;
};

export type Button = {
    type: 2;
    custom_id?: string | null;
    style: ButtonStyleTypes;
    label?: string | null;
    disabled?: boolean | null;
    emoji?: null | Emoji;
    url?: string | null;
};

export type ButtonStyleTypes = 1 | 2 | 3 | 4 | 5;

export type ChannelFollowerResponse = {
    channel_id: SnowflakeType;
    webhook_id: SnowflakeType;
};

export type ChannelFollowerWebhookResponse = {
    application_id?: null | SnowflakeType;
    avatar?: string | null;
    channel_id?: null | SnowflakeType;
    guild_id?: null | SnowflakeType;
    id: SnowflakeType;
    name: string;
    type: 2;
    user?: null | UserResponse;
    source_guild?: null | WebhookSourceGuildResponse;
    source_channel?: null | WebhookSourceChannelResponse;
};

export type ChannelPermissionOverwriteRequest = {
    id: SnowflakeType;
    type?: null | ChannelPermissionOverwrites;
    allow?: number | null;
    deny?: number | null;
};

export type ChannelPermissionOverwriteResponse = {
    id: SnowflakeType;
    type: ChannelPermissionOverwrites;
    allow: string;
    deny: string;
};

export type ChannelPermissionOverwrites = 0 | 1;

export type ChannelSelect = {
    type: 8;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    default_values?: Array<ChannelSelectDefaultValue> | null;
    channel_types?: Array<ChannelTypes> | null;
};

export type ChannelSelectDefaultValue = {
    type: 'channel';
    id: SnowflakeType;
};

export type ChannelTypes = 1 | 3 | 0 | 2 | 4 | 5 | 10 | 11 | 12 | 13 | 14 | 15;

export type CommandPermissionResponse = {
    id: SnowflakeType;
    type: ApplicationCommandPermissionType;
    permission: boolean;
};

export type CommandPermissionsResponse = {
    id: SnowflakeType;
    application_id: SnowflakeType;
    guild_id: SnowflakeType;
    permissions: Array<CommandPermissionResponse>;
};

export type ConnectedAccountGuildResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
};

export type ConnectedAccountIntegrationResponse = {
    id: string;
    type: IntegrationTypes;
    account: AccountResponse;
    guild: ConnectedAccountGuildResponse;
};

export type ConnectedAccountProviders = "battlenet" | "bungie" | "ebay" | "epicgames" | "facebook" | "github" | "instagram" | "leagueoflegends" | "paypal" | "playstation" | "reddit" | "riotgames" | "roblox" | "skype" | "spotify" | "steam" | "tiktok" | "twitch" | "twitter" | "xbox" | "youtube";

export type ConnectedAccountResponse = {
    id: string;
    name?: string | null;
    type: ConnectedAccountProviders;
    friend_sync: boolean;
    integrations?: Array<ConnectedAccountIntegrationResponse> | null;
    show_activity: boolean;
    two_way_link: boolean;
    verified: boolean;
    visibility: ConnectedAccountVisibility;
    revoked?: boolean | null;
};

export type ConnectedAccountVisibility = 0 | 1;

export type CreateEntitlementRequestData = {
    sku_id: SnowflakeType;
    owner_id: SnowflakeType;
    owner_type: EntitlementOwnerTypes;
};

export type CreateForumThreadRequest = {
    name: string;
    auto_archive_duration?: null | ThreadAutoArchiveDuration;
    rate_limit_per_user?: number | null;
    applied_tags?: Array<SnowflakeType> | null;
    message: BaseCreateMessageCreateRequest;
};

export type CreateGroupDMInviteRequest = {
    max_age?: number | null;
};

export type CreateGuildChannelRequest = {
    type?: null | 0 | 2 | 4 | 5 | 13 | 14 | 15;
    name: string;
    position?: number | null;
    topic?: string | null;
    bitrate?: number | null;
    user_limit?: number | null;
    nsfw?: boolean | null;
    rate_limit_per_user?: number | null;
    parent_id?: null | SnowflakeType;
    permission_overwrites?: Array<ChannelPermissionOverwriteRequest> | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
    default_auto_archive_duration?: null | ThreadAutoArchiveDuration;
    default_reaction_emoji?: null | UpdateDefaultReactionEmojiRequest;
    default_thread_rate_limit_per_user?: number | null;
    default_sort_order?: null | ThreadSortOrder;
    default_forum_layout?: null | ForumLayout;
    available_tags?: Array<(null | CreateOrUpdateThreadTagRequest)> | null;
};

export type CreateGuildInviteRequest = {
    max_age?: number | null;
    temporary?: boolean | null;
    max_uses?: number | null;
    unique?: boolean | null;
    target_user_id?: null | SnowflakeType;
    target_application_id?: null | SnowflakeType;
    target_type?: null | 1 | 2;
};

export type CreateGuildRequestChannelItem = {
    type?: null | 0 | 2 | 4;
    name: string;
    position?: number | null;
    topic?: string | null;
    bitrate?: number | null;
    user_limit?: number | null;
    nsfw?: boolean | null;
    rate_limit_per_user?: number | null;
    parent_id?: null | SnowflakeType;
    permission_overwrites?: Array<ChannelPermissionOverwriteRequest> | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
    default_auto_archive_duration?: null | ThreadAutoArchiveDuration;
    default_reaction_emoji?: null | UpdateDefaultReactionEmojiRequest;
    default_thread_rate_limit_per_user?: number | null;
    default_sort_order?: null | ThreadSortOrder;
    default_forum_layout?: null | ForumLayout;
    id?: null | SnowflakeType;
    available_tags?: Array<CreateOrUpdateThreadTagRequest> | null;
};

export type CreateGuildRequestRoleItem = {
    id: number;
    name?: string | null;
    permissions?: number | null;
    color?: number | null;
    hoist?: boolean | null;
    mentionable?: boolean | null;
    unicode_emoji?: string | null;
};

export type CreateMessageInteractionCallbackRequest = {
    type: 4 | 5;
    data?: null | IncomingWebhookInteractionRequest;
};

export type CreateOrUpdateThreadTagRequest = {
    name: string;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
    moderated?: boolean | null;
};

export type CreatePrivateChannelRequest = {
    recipient_id?: null | SnowflakeType;
    access_tokens?: Array<(string)> | null;
    nicks?: {
        [key: string]: (string | null);
    } | null;
};

export type CreateTextThreadWithMessageRequest = {
    name: string;
    auto_archive_duration?: null | ThreadAutoArchiveDuration;
    rate_limit_per_user?: number | null;
};

export type CreateTextThreadWithoutMessageRequest = {
    name: string;
    auto_archive_duration?: null | ThreadAutoArchiveDuration;
    rate_limit_per_user?: number | null;
    type?: null | 10 | 11 | 12;
    invitable?: boolean | null;
};

export type CreatedThreadResponse = {
    id: SnowflakeType;
    type: 10 | 11 | 12;
    last_message_id?: null | SnowflakeType;
    flags: number;
    last_pin_timestamp?: string | null;
    guild_id: SnowflakeType;
    name: string;
    parent_id?: null | SnowflakeType;
    rate_limit_per_user?: number | null;
    bitrate?: number | null;
    user_limit?: number | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
    permissions?: string | null;
    owner_id: SnowflakeType;
    thread_metadata?: null | ThreadMetadataResponse;
    message_count: number;
    member_count: number;
    total_message_sent: number;
    applied_tags?: Array<SnowflakeType> | null;
    member?: null | ThreadMemberResponse;
};

export type DefaultKeywordListTriggerMetadata = {
    allow_list?: Array<(string)> | null;
    presets?: Array<AutomodKeywordPresetType> | null;
};

export type DefaultKeywordListTriggerMetadataResponse = {
    allow_list: Array<(string)>;
    presets: Array<AutomodKeywordPresetType>;
};

export type DefaultKeywordListUpsertRequest = {
    name: string;
    event_type: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type: 4;
    trigger_metadata: DefaultKeywordListTriggerMetadata;
};

export type DefaultKeywordListUpsertRequestPartial = {
    name?: string;
    event_type?: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type?: 4;
    trigger_metadata?: DefaultKeywordListTriggerMetadata;
};

export type DefaultKeywordRuleResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    creator_id: SnowflakeType;
    name: string;
    event_type: AutomodEventType;
    actions: Array<(BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse)>;
    trigger_type: 4;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_metadata: DefaultKeywordListTriggerMetadataResponse;
};

export type DefaultReactionEmojiResponse = {
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
};

export type DiscordIntegrationResponse = {
    type: 'discord';
    name?: string | null;
    account?: null | AccountResponse;
    enabled?: boolean | null;
    id: SnowflakeType;
    application: IntegrationApplicationResponse;
    scopes: Array<('applications.commands' | 'bot' | 'webhook.incoming')>;
    user?: null | UserResponse;
};

export type Emoji = {
    id?: null | SnowflakeType;
    name: string;
    animated?: boolean | null;
};

export type EmojiResponse = {
    id: SnowflakeType;
    name: string;
    user?: null | UserResponse;
    roles: Array<SnowflakeType>;
    require_colons: boolean;
    managed: boolean;
    animated: boolean;
    available: boolean;
};

export type EntitlementOwnerTypes = number;

export type EntitlementResponse = {
    id: SnowflakeType;
    sku_id: SnowflakeType;
    application_id: SnowflakeType;
    user_id: SnowflakeType;
    guild_id?: null | SnowflakeType;
    deleted: boolean;
    starts_at?: string | null;
    ends_at?: string | null;
    type: EntitlementTypes;
    fulfilled_at?: string | null;
    fulfillment_status?: null | EntitlementTenantFulfillmentStatusResponse;
    consumed?: boolean | null;
};

export type EntitlementTenantFulfillmentStatusResponse = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;

export type EntitlementTypes = 8 | 10;

export type EntityMetadataExternal = {
    location: string;
};

export type EntityMetadataExternalResponse = {
    location: string;
};

export type EntityMetadataStageInstance = unknown;

export type EntityMetadataStageInstanceResponse = unknown;

export type EntityMetadataVoice = unknown;

export type EntityMetadataVoiceResponse = unknown;

export type ExternalConnectionIntegrationResponse = {
    type: 'twitch' | 'youtube';
    name?: string | null;
    account?: null | AccountResponse;
    enabled?: boolean | null;
    id: string;
    user: UserResponse;
    revoked?: boolean | null;
    expire_behavior?: null | IntegrationExpireBehaviorTypes;
    expire_grace_period?: null | IntegrationExpireGracePeriodTypes;
    subscriber_count?: number | null;
    synced_at?: string | null;
    role_id?: null | SnowflakeType;
    syncing?: boolean | null;
    enable_emoticons?: boolean | null;
};

export type ExternalScheduledEventCreateRequest = {
    name: string;
    description?: string | null;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    entity_type: 3;
    channel_id?: null | SnowflakeType;
    entity_metadata: EntityMetadataExternal;
};

export type ExternalScheduledEventPatchRequestPartial = {
    status?: null | GuildScheduledEventStatuses;
    name?: string;
    description?: string | null;
    image?: string | null;
    scheduled_start_time?: string;
    scheduled_end_time?: string | null;
    entity_type?: null | 3;
    privacy_level?: GuildScheduledEventPrivacyLevels;
    channel_id?: null | SnowflakeType;
    entity_metadata?: EntityMetadataExternal;
};

export type ExternalScheduledEventResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    name: string;
    description?: string | null;
    channel_id?: null | SnowflakeType;
    creator_id?: null | SnowflakeType;
    creator?: null | UserResponse;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    status: GuildScheduledEventStatuses;
    entity_type: 3;
    entity_id?: null | SnowflakeType;
    user_count?: number | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    user_rsvp?: null | ScheduledEventUserResponse;
    entity_metadata: EntityMetadataExternalResponse;
};

export type FlagToChannelAction = {
    type: 2;
    metadata: FlagToChannelActionMetadata;
};

export type FlagToChannelActionMetadata = {
    channel_id: SnowflakeType;
};

export type FlagToChannelActionMetadataResponse = {
    channel_id: SnowflakeType;
};

export type FlagToChannelActionResponse = {
    type: 2;
    metadata: FlagToChannelActionMetadataResponse;
};

export type ForumLayout = 0 | 1 | 2;

export type ForumTagResponse = {
    id: SnowflakeType;
    name: string;
    moderated: boolean;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
};

export type FriendInviteResponse = {
    type?: null | 2;
    code: string;
    inviter?: null | UserResponse;
    max_age?: number | null;
    created_at?: string | null;
    expires_at?: string | null;
    friends_count?: number | null;
    channel?: null | InviteChannelResponse;
    is_contact?: boolean | null;
    uses?: number | null;
    max_uses?: number | null;
    flags?: number | null;
};

export type GatewayBotResponse = {
    url: string;
    session_start_limit: GatewayBotSessionStartLimitResponse;
    shards: number;
};

export type GatewayBotSessionStartLimitResponse = {
    max_concurrency: number;
    remaining: number;
    reset_after: number;
    total: number;
};

export type GatewayResponse = {
    url: string;
};

export type GithubAuthor = {
    username?: string | null;
    name: string;
};

export type GithubCheckApp = {
    name: string;
};

export type GithubCheckPullRequest = {
    number: number;
};

export type GithubCheckRun = {
    conclusion?: string | null;
    name: string;
    html_url: string;
    check_suite: GithubCheckSuite;
    details_url?: string | null;
    output?: null | GithubCheckRunOutput;
    pull_requests?: Array<GithubCheckPullRequest> | null;
};

export type GithubCheckRunOutput = {
    title?: string | null;
    summary?: string | null;
};

export type GithubCheckSuite = {
    conclusion?: string | null;
    head_branch?: string | null;
    head_sha: string;
    pull_requests?: Array<GithubCheckPullRequest> | null;
    app: GithubCheckApp;
};

export type GithubComment = {
    id: number;
    html_url: string;
    user: GithubUser;
    commit_id?: string | null;
    body: string;
};

export type GithubCommit = {
    id: string;
    url: string;
    message: string;
    author: GithubAuthor;
};

export type GithubDiscussion = {
    title: string;
    number: number;
    html_url: string;
    answer_html_url?: string | null;
    body?: string | null;
    user: GithubUser;
};

export type GithubIssue = {
    id: number;
    number: number;
    html_url: string;
    user: GithubUser;
    title: string;
    body?: string | null;
    pull_request?: unknown;
};

export type GithubRelease = {
    id: number;
    tag_name: string;
    html_url: string;
    author: GithubUser;
};

export type GithubRepository = {
    id: number;
    html_url: string;
    name: string;
    full_name: string;
};

export type GithubReview = {
    user: GithubUser;
    body?: string | null;
    html_url: string;
    state: string;
};

export type GithubUser = {
    id: number;
    login: string;
    html_url: string;
    avatar_url: string;
};

export type GithubWebhook = {
    action?: string | null;
    ref?: string | null;
    ref_type?: string | null;
    comment?: null | GithubComment;
    issue?: null | GithubIssue;
    pull_request?: null | GithubIssue;
    repository?: null | GithubRepository;
    forkee?: null | GithubRepository;
    sender: GithubUser;
    member?: null | GithubUser;
    release?: null | GithubRelease;
    head_commit?: null | GithubCommit;
    commits?: Array<GithubCommit> | null;
    forced?: boolean | null;
    compare?: string | null;
    review?: null | GithubReview;
    check_run?: null | GithubCheckRun;
    check_suite?: null | GithubCheckSuite;
    discussion?: null | GithubDiscussion;
    answer?: null | GithubComment;
};

export type GroupDMInviteResponse = {
    type?: null | 1;
    code: string;
    inviter?: null | UserResponse;
    max_age?: number | null;
    created_at?: string | null;
    expires_at?: string | null;
    channel?: null | InviteChannelResponse;
    approximate_member_count?: number | null;
};

export type GuildAuditLogResponse = {
    audit_log_entries: Array<AuditLogEntryResponse>;
    users: Array<UserResponse>;
    integrations: Array<(PartialDiscordIntegrationResponse | PartialExternalConnectionIntegrationResponse | PartialGuildSubscriptionIntegrationResponse)>;
    webhooks: Array<(ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse)>;
    guild_scheduled_events: Array<(ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse)>;
    threads: Array<ThreadResponse>;
    application_commands: Array<ApplicationCommandResponse>;
    auto_moderation_rules: Array<(DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse | null)>;
};

export type GuildBanResponse = {
    user: UserResponse;
    reason?: string | null;
};

export type GuildChannelResponse = {
    id: SnowflakeType;
    type: 0 | 2 | 4 | 5 | 13 | 14 | 15;
    last_message_id?: null | SnowflakeType;
    flags: number;
    last_pin_timestamp?: string | null;
    guild_id: SnowflakeType;
    name: string;
    parent_id?: null | SnowflakeType;
    rate_limit_per_user?: number | null;
    bitrate?: number | null;
    user_limit?: number | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
    permissions?: string | null;
    topic?: string | null;
    default_auto_archive_duration?: null | ThreadAutoArchiveDuration;
    default_thread_rate_limit_per_user?: number | null;
    position: number;
    permission_overwrites?: Array<ChannelPermissionOverwriteResponse> | null;
    nsfw?: boolean | null;
    available_tags?: Array<ForumTagResponse> | null;
    default_reaction_emoji?: null | DefaultReactionEmojiResponse;
    default_sort_order?: null | ThreadSortOrder;
    default_forum_layout?: null | ForumLayout;
};

export type GuildCreateRequest = {
    description?: string | null;
    name: string;
    region?: string | null;
    icon?: string | null;
    verification_level?: null | VerificationLevels;
    default_message_notifications?: null | UserNotificationSettings;
    explicit_content_filter?: null | GuildExplicitContentFilterTypes;
    preferred_locale?: null | AvailableLocalesEnum;
    afk_timeout?: null | AfkTimeouts;
    roles?: Array<CreateGuildRequestRoleItem> | null;
    channels?: Array<CreateGuildRequestChannelItem> | null;
    afk_channel_id?: null | SnowflakeType;
    system_channel_id?: null | SnowflakeType;
    system_channel_flags?: number | null;
};

export type GuildExplicitContentFilterTypes = 0 | 1 | 2;

export type GuildFeatures = "ANIMATED_BANNER" | "ANIMATED_ICON" | "APPLICATION_COMMAND_PERMISSIONS_V2" | "AUTO_MODERATION" | "BANNER" | "COMMUNITY" | "CREATOR_MONETIZABLE_PROVISIONAL" | "CREATOR_STORE_PAGE" | "DEVELOPER_SUPPORT_SERVER" | "DISCOVERABLE" | "FEATURABLE" | "INVITES_DISABLED" | "INVITE_SPLASH" | "MEMBER_VERIFICATION_GATE_ENABLED" | "MORE_STICKERS" | "NEWS" | "PARTNERED" | "PREVIEW_ENABLED" | "RAID_ALERTS_DISABLED" | "ROLE_ICONS" | "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE" | "ROLE_SUBSCRIPTIONS_ENABLED" | "TICKETED_EVENTS_ENABLED" | "VANITY_URL" | "VERIFIED" | "VIP_REGIONS" | "WELCOME_SCREEN_ENABLED";

export type GuildHomeSettingsResponse = {
    guild_id: SnowflakeType;
    enabled: boolean;
    welcome_message?: null | WelcomeMessageResponse;
    new_member_actions?: Array<(null | NewMemberActionResponse)> | null;
    resource_channels?: Array<(null | ResourceChannelResponse)> | null;
};

export type GuildIncomingWebhookResponse = {
    application_id?: null | SnowflakeType;
    avatar?: string | null;
    channel_id?: null | SnowflakeType;
    guild_id?: null | SnowflakeType;
    id: SnowflakeType;
    name: string;
    type: 1;
    user?: null | UserResponse;
    token?: string | null;
    url?: string | null;
};

export type GuildInviteResponse = {
    type?: null | 0;
    code: string;
    inviter?: null | UserResponse;
    max_age?: number | null;
    created_at?: string | null;
    expires_at?: string | null;
    is_contact?: boolean | null;
    flags?: number | null;
    guild?: null | InviteGuildResponse;
    guild_id?: null | SnowflakeType;
    channel?: null | InviteChannelResponse;
    stage_instance?: null | InviteStageInstanceResponse;
    target_type?: null | InviteTargetTypes;
    target_user?: null | UserResponse;
    target_application?: null | InviteApplicationResponse;
    guild_scheduled_event?: null | ScheduledEventResponse;
    uses?: number | null;
    max_uses?: number | null;
    temporary?: boolean | null;
    approximate_member_count?: number | null;
    approximate_presence_count?: number | null;
};

export type GuildMFALevel = 0 | 1;

export type GuildMFALevelResponse = {
    level: GuildMFALevel;
};

export type GuildMemberResponse = {
    avatar?: string | null;
    avatar_decoration_data?: null | UserAvatarDecorationResponse;
    communication_disabled_until?: string | null;
    flags: number;
    joined_at: string;
    nick?: string | null;
    pending: boolean;
    premium_since?: string | null;
    roles: Array<SnowflakeType>;
    user: UserResponse;
    mute: boolean;
    deaf: boolean;
};

export type GuildNSFWContentLevel = 0 | 1 | 2 | 3;

export type GuildOnboardingMode = 0 | 1;

export type GuildOnboardingResponse = {
    guild_id: SnowflakeType;
    prompts: Array<OnboardingPromptResponse>;
    default_channel_ids: Array<SnowflakeType>;
    enabled: boolean;
};

export type GuildPatchRequestPartial = {
    name?: string;
    description?: string | null;
    region?: string | null;
    icon?: string | null;
    verification_level?: null | VerificationLevels;
    default_message_notifications?: null | UserNotificationSettings;
    explicit_content_filter?: null | GuildExplicitContentFilterTypes;
    preferred_locale?: null | AvailableLocalesEnum;
    afk_timeout?: null | AfkTimeouts;
    afk_channel_id?: null | SnowflakeType;
    system_channel_id?: null | SnowflakeType;
    owner_id?: SnowflakeType;
    splash?: string | null;
    banner?: string | null;
    system_channel_flags?: number | null;
    features?: Array<(string | null)> | null;
    discovery_splash?: string | null;
    home_header?: string | null;
    rules_channel_id?: null | SnowflakeType;
    safety_alerts_channel_id?: null | SnowflakeType;
    public_updates_channel_id?: null | SnowflakeType;
    premium_progress_bar_enabled?: boolean | null;
};

export type GuildPreviewResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description?: string | null;
    home_header?: string | null;
    splash?: string | null;
    discovery_splash?: string | null;
    features: Array<GuildFeatures>;
    approximate_member_count: number;
    approximate_presence_count: number;
    emojis: Array<EmojiResponse>;
    stickers: Array<GuildStickerResponse>;
};

export type GuildProductPurchaseResponse = {
    listing_id: SnowflakeType;
    product_name: string;
};

export type GuildPruneResponse = {
    pruned?: number | null;
};

export type GuildResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description?: string | null;
    home_header?: string | null;
    splash?: string | null;
    discovery_splash?: string | null;
    features: Array<GuildFeatures>;
    banner?: string | null;
    owner_id: SnowflakeType;
    application_id?: null | SnowflakeType;
    region: string;
    afk_channel_id?: null | SnowflakeType;
    afk_timeout: AfkTimeouts;
    system_channel_id?: null | SnowflakeType;
    system_channel_flags: number;
    widget_enabled: boolean;
    widget_channel_id?: null | SnowflakeType;
    verification_level: VerificationLevels;
    roles: Array<GuildRoleResponse>;
    default_message_notifications: UserNotificationSettings;
    mfa_level: GuildMFALevel;
    explicit_content_filter: GuildExplicitContentFilterTypes;
    max_presences?: number | null;
    max_members?: number | null;
    max_stage_video_channel_users?: number | null;
    max_video_channel_users?: number | null;
    vanity_url_code?: string | null;
    premium_tier: PremiumGuildTiers;
    premium_subscription_count: number;
    preferred_locale: AvailableLocalesEnum;
    rules_channel_id?: null | SnowflakeType;
    safety_alerts_channel_id?: null | SnowflakeType;
    public_updates_channel_id?: null | SnowflakeType;
    premium_progress_bar_enabled: boolean;
    nsfw: boolean;
    nsfw_level: GuildNSFWContentLevel;
    emojis: Array<EmojiResponse>;
    stickers: Array<GuildStickerResponse>;
};

export type GuildRoleResponse = {
    id: SnowflakeType;
    name: string;
    description?: string | null;
    permissions: string;
    position: number;
    color: number;
    hoist: boolean;
    managed: boolean;
    mentionable: boolean;
    icon?: string | null;
    unicode_emoji?: string | null;
    tags?: null | GuildRoleTagsResponse;
};

export type GuildRoleTagsResponse = {
    premium_subscriber?: null;
    bot_id?: null | SnowflakeType;
    integration_id?: null | SnowflakeType;
    subscription_listing_id?: null | SnowflakeType;
    available_for_purchase?: null;
    guild_connections?: null;
};

export type GuildScheduledEventEntityTypes = 0 | 1 | 2 | 3;

export type GuildScheduledEventPrivacyLevels = 2;

export type GuildScheduledEventStatuses = 1 | 2 | 3 | 4;

export type GuildStickerResponse = {
    id: SnowflakeType;
    name: string;
    tags: string;
    type: 2;
    format_type?: null | StickerFormatTypes;
    description?: string | null;
    available: boolean;
    guild_id: SnowflakeType;
    user?: null | UserResponse;
};

export type GuildSubscriptionIntegrationResponse = {
    type: 'guild_subscription';
    name?: string | null;
    account?: null | AccountResponse;
    enabled?: boolean | null;
    id: SnowflakeType;
};

export type GuildTemplateChannelResponse = {
    id?: number | null;
    type: 0 | 2 | 4;
    name?: string | null;
    position?: number | null;
    topic?: string | null;
    bitrate: number;
    user_limit: number;
    nsfw: boolean;
    rate_limit_per_user: number;
    parent_id?: null | SnowflakeType;
    default_auto_archive_duration?: null | ThreadAutoArchiveDuration;
    permission_overwrites: Array<(null | ChannelPermissionOverwriteResponse)>;
    available_tags?: Array<GuildTemplateChannelTags> | null;
    template: string;
    default_reaction_emoji?: null | DefaultReactionEmojiResponse;
    default_thread_rate_limit_per_user?: number | null;
    default_sort_order?: null | ThreadSortOrder;
    default_forum_layout?: null | ForumLayout;
    icon_emoji?: null | IconEmojiResponse;
    theme_color?: number | null;
};

export type GuildTemplateChannelTags = {
    name: string;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
    moderated?: boolean | null;
};

export type GuildTemplateResponse = {
    code: string;
    name: string;
    description?: string | null;
    usage_count: number;
    creator_id: SnowflakeType;
    creator?: null | UserResponse;
    created_at: string;
    updated_at: string;
    source_guild_id: SnowflakeType;
    serialized_source_guild: GuildTemplateSnapshotResponse;
    is_dirty?: boolean | null;
};

export type GuildTemplateRoleResponse = {
    id: number;
    name: string;
    permissions: string;
    color: number;
    hoist: boolean;
    mentionable: boolean;
    icon?: string | null;
    unicode_emoji?: string | null;
};

export type GuildTemplateSnapshotResponse = {
    name: string;
    description?: string | null;
    region?: string | null;
    verification_level: VerificationLevels;
    default_message_notifications: UserNotificationSettings;
    explicit_content_filter: GuildExplicitContentFilterTypes;
    preferred_locale: AvailableLocalesEnum;
    afk_channel_id?: null | SnowflakeType;
    afk_timeout: AfkTimeouts;
    system_channel_id?: null | SnowflakeType;
    system_channel_flags: number;
    roles: Array<GuildTemplateRoleResponse>;
    channels: Array<GuildTemplateChannelResponse>;
};

export type GuildWelcomeChannel = {
    channel_id: SnowflakeType;
    description: string;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
};

export type GuildWelcomeScreenChannelResponse = {
    channel_id: SnowflakeType;
    description: string;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
};

export type GuildWelcomeScreenResponse = {
    description?: string | null;
    welcome_channels: Array<GuildWelcomeScreenChannelResponse>;
};

export type GuildWithCountsResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description?: string | null;
    home_header?: string | null;
    splash?: string | null;
    discovery_splash?: string | null;
    features: Array<GuildFeatures>;
    banner?: string | null;
    owner_id: SnowflakeType;
    application_id?: null | SnowflakeType;
    region: string;
    afk_channel_id?: null | SnowflakeType;
    afk_timeout: AfkTimeouts;
    system_channel_id?: null | SnowflakeType;
    system_channel_flags: number;
    widget_enabled: boolean;
    widget_channel_id?: null | SnowflakeType;
    verification_level: VerificationLevels;
    roles: Array<GuildRoleResponse>;
    default_message_notifications: UserNotificationSettings;
    mfa_level: GuildMFALevel;
    explicit_content_filter: GuildExplicitContentFilterTypes;
    max_presences?: number | null;
    max_members?: number | null;
    max_stage_video_channel_users?: number | null;
    max_video_channel_users?: number | null;
    vanity_url_code?: string | null;
    premium_tier: PremiumGuildTiers;
    premium_subscription_count: number;
    preferred_locale: AvailableLocalesEnum;
    rules_channel_id?: null | SnowflakeType;
    safety_alerts_channel_id?: null | SnowflakeType;
    public_updates_channel_id?: null | SnowflakeType;
    premium_progress_bar_enabled: boolean;
    nsfw: boolean;
    nsfw_level: GuildNSFWContentLevel;
    emojis: Array<EmojiResponse>;
    stickers: Array<GuildStickerResponse>;
    approximate_member_count?: number | null;
    approximate_presence_count?: number | null;
};

export type IconEmojiResponse = unknown;

export type IncomingWebhookInteractionRequest = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    attachments?: Array<MessageAttachmentRequest> | null;
    tts?: boolean | null;
    flags?: number | null;
};

export type IncomingWebhookRequestPartial = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    attachments?: Array<MessageAttachmentRequest> | null;
    tts?: boolean | null;
    flags?: number | null;
    username?: string | null;
    avatar_url?: string | null;
    thread_name?: string | null;
    applied_tags?: Array<SnowflakeType> | null;
};

export type IncomingWebhookUpdateForInteractionCallbackRequestPartial = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    attachments?: Array<MessageAttachmentRequest> | null;
    flags?: number | null;
};

export type IncomingWebhookUpdateRequestPartial = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    attachments?: Array<MessageAttachmentRequest> | null;
    flags?: number | null;
};

export type InputText = {
    type: 4;
    custom_id: string;
    style: TextStyleTypes;
    label: string;
    value?: string | null;
    placeholder?: string | null;
    required?: boolean | null;
    min_length?: number | null;
    max_length?: number | null;
};

export type Int53Type = number;

export type IntegrationApplicationResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description: string;
    type?: null | ApplicationTypes;
    cover_image?: string | null;
    primary_sku_id?: null | SnowflakeType;
    bot?: null | UserResponse;
};

export type IntegrationExpireBehaviorTypes = 0 | 1;

export type IntegrationExpireGracePeriodTypes = 1 | 3 | 7 | 14 | 30;

export type IntegrationTypes = "discord" | "twitch" | "youtube" | "guild_subscription";

export type InteractionApplicationCommandAutocompleteCallbackIntegerData = {
    choices?: Array<(null | ApplicationCommandOptionIntegerChoice)> | null;
};

export type InteractionApplicationCommandAutocompleteCallbackNumberData = {
    choices?: Array<(null | ApplicationCommandOptionNumberChoice)> | null;
};

export type InteractionApplicationCommandAutocompleteCallbackStringData = {
    choices?: Array<(null | ApplicationCommandOptionStringChoice)> | null;
};

export type InteractionCallbackTypes = 1 | 4 | 5 | 6 | 7 | 8 | 9;

export type InteractionTypes = 1 | 2 | 3 | 4 | 5;

export type InviteApplicationResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description: string;
    type?: null | ApplicationTypes;
    cover_image?: string | null;
    primary_sku_id?: null | SnowflakeType;
    bot?: null | UserResponse;
    slug?: string | null;
    guild_id?: null | SnowflakeType;
    rpc_origins?: Array<(string | null)> | null;
    bot_public?: boolean | null;
    bot_require_code_grant?: boolean | null;
    terms_of_service_url?: string | null;
    privacy_policy_url?: string | null;
    custom_install_url?: string | null;
    install_params?: null | ApplicationOAuth2InstallParamsResponse;
    verify_key: string;
    flags: number;
    max_participants?: number | null;
    tags?: Array<(string)> | null;
};

export type InviteChannelRecipientResponse = {
    username: string;
};

export type InviteChannelResponse = {
    id: SnowflakeType;
    type: ChannelTypes;
    name?: string | null;
    icon?: string | null;
    recipients?: Array<InviteChannelRecipientResponse> | null;
};

export type InviteGuildResponse = {
    id: SnowflakeType;
    name: string;
    splash?: string | null;
    banner?: string | null;
    description?: string | null;
    icon?: string | null;
    features: Array<GuildFeatures>;
    verification_level?: null | VerificationLevels;
    vanity_url_code?: string | null;
    nsfw_level?: null | GuildNSFWContentLevel;
    nsfw?: boolean | null;
    premium_subscription_count?: number | null;
};

export type InviteStageInstanceResponse = {
    topic: string;
    participant_count?: number | null;
    speaker_count?: number | null;
    members?: Array<GuildMemberResponse> | null;
};

export type InviteTargetTypes = 1 | 2 | 3;

export type InviteTypes = 0 | 1 | 2;

export type KeywordRuleResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    creator_id: SnowflakeType;
    name: string;
    event_type: AutomodEventType;
    actions: Array<(BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse)>;
    trigger_type: 1;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_metadata: KeywordTriggerMetadataResponse;
};

export type KeywordTriggerMetadata = {
    keyword_filter?: Array<(string)> | null;
    regex_patterns?: Array<(string)> | null;
    allow_list?: Array<(string)> | null;
};

export type KeywordTriggerMetadataResponse = {
    keyword_filter: Array<(string)>;
    regex_patterns: Array<(string)>;
    allow_list: Array<(string)>;
};

export type KeywordUpsertRequest = {
    name: string;
    event_type: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type: 1;
    trigger_metadata?: null | KeywordTriggerMetadata;
};

export type KeywordUpsertRequestPartial = {
    name?: string;
    event_type?: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type?: 1;
    trigger_metadata?: null | KeywordTriggerMetadata;
};

export type MLSpamRuleResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    creator_id: SnowflakeType;
    name: string;
    event_type: AutomodEventType;
    actions: Array<(BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse)>;
    trigger_type: 3;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_metadata: MLSpamTriggerMetadataResponse;
};

export type MLSpamTriggerMetadata = unknown;

export type MLSpamTriggerMetadataResponse = unknown;

export type MLSpamUpsertRequest = {
    name: string;
    event_type: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type: 3;
    trigger_metadata?: null | MLSpamTriggerMetadata;
};

export type MLSpamUpsertRequestPartial = {
    name?: string;
    event_type?: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type?: 3;
    trigger_metadata?: null | MLSpamTriggerMetadata;
};

export type MentionSpamRuleResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    creator_id: SnowflakeType;
    name: string;
    event_type: AutomodEventType;
    actions: Array<(BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse)>;
    trigger_type: 5;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_metadata: MentionSpamTriggerMetadataResponse;
};

export type MentionSpamTriggerMetadata = {
    mention_total_limit: number;
    mention_raid_protection_enabled?: boolean | null;
};

export type MentionSpamTriggerMetadataResponse = {
    mention_total_limit: number;
};

export type MentionSpamUpsertRequest = {
    name: string;
    event_type: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type: 5;
    trigger_metadata?: null | MentionSpamTriggerMetadata;
};

export type MentionSpamUpsertRequestPartial = {
    name?: string;
    event_type?: AutomodEventType;
    actions?: Array<(BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction)> | null;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_type?: 5;
    trigger_metadata?: null | MentionSpamTriggerMetadata;
};

export type MentionableSelect = {
    type: 7;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    default_values?: Array<(RoleSelectDefaultValue | UserSelectDefaultValue)> | null;
};

export type MessageActivityResponse = unknown;

export type MessageAllowedMentionsRequest = {
    parse?: Array<(null | AllowedMentionTypes)> | null;
    users?: Array<(null | SnowflakeType)> | null;
    roles?: Array<(null | SnowflakeType)> | null;
    replied_user?: boolean | null;
};

export type MessageAttachmentRequest = {
    id: SnowflakeType;
    filename?: string | null;
    description?: string | null;
    is_remix?: boolean | null;
};

export type MessageAttachmentResponse = {
    id: SnowflakeType;
    filename: string;
    size: number;
    url: string;
    proxy_url: string;
    width?: number | null;
    height?: number | null;
    duration_secs?: number | null;
    waveform?: string | null;
    description?: string | null;
    content_type?: string | null;
    ephemeral?: boolean | null;
    title?: string | null;
    application?: null | ApplicationResponse;
    clip_created_at?: string | null;
    clip_participants?: Array<UserResponse> | null;
};

export type MessageComponentActionRowResponse = {
    type: 1;
    components?: Array<(MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse)> | null;
};

export type MessageComponentButtonResponse = {
    type: 2;
    custom_id?: string | null;
    style: ButtonStyleTypes;
    label?: string | null;
    disabled?: boolean | null;
    emoji?: null | MessageComponentEmojiResponse;
    url?: string | null;
};

export type MessageComponentChannelSelectResponse = {
    type: 8;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    channel_types?: Array<ChannelTypes> | null;
};

export type MessageComponentEmojiResponse = {
    id?: null | SnowflakeType;
    name: string;
    animated?: boolean | null;
};

export type MessageComponentInputTextResponse = {
    type: 4;
    custom_id: string;
    style: TextStyleTypes;
    label?: string | null;
    value?: string | null;
    placeholder?: string | null;
    required?: boolean | null;
    min_length?: number | null;
    max_length?: number | null;
};

export type MessageComponentMentionableSelectResponse = {
    type: 7;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
};

export type MessageComponentRoleSelectResponse = {
    type: 6;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
};

export type MessageComponentStringSelectResponse = {
    type: 3;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    options?: Array<(null | SelectOptionResponse)> | null;
};

export type MessageComponentTypes = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;

export type MessageComponentUserSelectResponse = {
    type: 5;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
};

export type MessageCreateRequest = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    sticker_ids?: Array<SnowflakeType> | null;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    flags?: number | null;
    attachments?: Array<MessageAttachmentRequest> | null;
    message_reference?: null | MessageReferenceRequest;
    nonce?: number | string | null;
    tts?: boolean | null;
};

export type MessageEditRequestPartial = {
    content?: string | null;
    embeds?: Array<RichEmbed> | null;
    flags?: number | null;
    allowed_mentions?: null | MessageAllowedMentionsRequest;
    sticker_ids?: Array<SnowflakeType> | null;
    components?: Array<(ActionRow | Button | ChannelSelect | MentionableSelect | RoleSelect | StringSelect | UserSelect)> | null;
    attachments?: Array<MessageAttachmentRequest> | null;
};

export type MessageEmbedAuthorResponse = {
    name: string;
    url?: string | null;
    icon_url?: string | null;
    proxy_icon_url?: string | null;
};

export type MessageEmbedFieldResponse = {
    name: string;
    value: string;
    inline: boolean;
};

export type MessageEmbedFooterResponse = {
    text: string;
    icon_url?: string | null;
    proxy_icon_url?: string | null;
};

export type MessageEmbedImageResponse = {
    url?: string | null;
    proxy_url?: string | null;
    width?: null | UInt32Type;
    height?: null | UInt32Type;
    placeholder?: string | null;
    placeholder_version?: null | UInt32Type;
};

export type MessageEmbedProviderResponse = {
    name: string;
    url?: string | null;
};

export type MessageEmbedResponse = {
    type: string;
    url?: string | null;
    title?: string | null;
    description?: string | null;
    color?: number | null;
    timestamp?: string | null;
    fields?: Array<MessageEmbedFieldResponse> | null;
    author?: null | MessageEmbedAuthorResponse;
    provider?: null | MessageEmbedProviderResponse;
    image?: null | MessageEmbedImageResponse;
    thumbnail?: null | MessageEmbedImageResponse;
    video?: null | MessageEmbedVideoResponse;
    footer?: null | MessageEmbedFooterResponse;
};

export type MessageEmbedVideoResponse = {
    url?: string | null;
    proxy_url?: string | null;
    width?: null | UInt32Type;
    height?: null | UInt32Type;
    placeholder?: string | null;
    placeholder_version?: null | UInt32Type;
};

export type MessageInteractionResponse = {
    id: SnowflakeType;
    type: InteractionTypes;
    name: string;
    user?: null | UserResponse;
    name_localized?: string | null;
};

export type MessageMentionChannelResponse = {
    id: SnowflakeType;
    name: string;
    type: ChannelTypes;
    guild_id: SnowflakeType;
};

export type MessageReactionCountDetailsResponse = {
    burst: number;
    normal: number;
};

export type MessageReactionEmojiResponse = {
    id?: null | SnowflakeType;
    name?: string | null;
    animated?: boolean | null;
};

export type MessageReactionResponse = {
    emoji: MessageReactionEmojiResponse;
    count: number;
    count_details: MessageReactionCountDetailsResponse;
    burst_colors: Array<(string)>;
    me_burst: boolean;
    me: boolean;
};

export type MessageReferenceRequest = {
    guild_id?: null | SnowflakeType;
    channel_id?: null | SnowflakeType;
    message_id: SnowflakeType;
    fail_if_not_exists?: boolean | null;
    type?: null | MessageReferenceType;
};

export type MessageReferenceResponse = {
    channel_id: SnowflakeType;
    message_id?: null | SnowflakeType;
    guild_id?: null | SnowflakeType;
};

export type MessageReferenceType = 0;

export type MessageResponse = {
    type: MessageType;
    channel_id: SnowflakeType;
    content: string;
    attachments: Array<MessageAttachmentResponse>;
    embeds: Array<MessageEmbedResponse>;
    timestamp: string;
    edited_timestamp?: string | null;
    flags: number;
    components: Array<(MessageComponentActionRowResponse | MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse)>;
    resolved?: null | ResolvedObjectsResponse;
    id: SnowflakeType;
    author: UserResponse;
    mentions: Array<UserResponse>;
    mention_roles: Array<SnowflakeType>;
    pinned: boolean;
    mention_everyone: boolean;
    tts: boolean;
    activity?: null | MessageActivityResponse;
    application?: null | BasicApplicationResponse;
    application_id?: null | SnowflakeType;
    interaction?: null | MessageInteractionResponse;
    nonce?: number | string | null;
    webhook_id?: null | SnowflakeType;
    message_reference?: null | MessageReferenceResponse;
    thread?: null | ThreadResponse;
    mention_channels?: Array<(null | MessageMentionChannelResponse)> | null;
    stickers?: Array<(GuildStickerResponse | StandardStickerResponse)> | null;
    sticker_items?: Array<MessageStickerItemResponse> | null;
    role_subscription_data?: null | MessageRoleSubscriptionDataResponse;
    purchase_notification?: null | PurchaseNotificationResponse;
    position?: number | null;
    reactions?: Array<MessageReactionResponse> | null;
    referenced_message?: null | BasicMessageResponse;
};

export type MessageRoleSubscriptionDataResponse = {
    role_subscription_listing_id: SnowflakeType;
    tier_name: string;
    total_months_subscribed: number;
    is_renewal: boolean;
};

export type MessageStickerItemResponse = {
    id: SnowflakeType;
    name: string;
    format_type: StickerFormatTypes;
};

export type MessageType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 31 | 32;

export type MetadataItemTypes = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;

export type ModalInteractionCallbackData = {
    custom_id: string;
    title: string;
    components: Array<(ActionRow | InputText)>;
};

export type ModalInteractionCallbackRequest = {
    type: 9;
    data: ModalInteractionCallbackData;
};

export type MyGuildResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    owner: boolean;
    permissions: string;
    features: Array<GuildFeatures>;
    approximate_member_count?: number | null;
    approximate_presence_count?: number | null;
};

export type NewMemberActionResponse = {
    channel_id: SnowflakeType;
    action_type: NewMemberActionType;
    title: string;
    description: string;
    emoji?: null | SettingsEmojiResponse;
    icon?: string | null;
};

export type NewMemberActionType = 0 | 1;

export type OAuth2GetAuthorizationResponse = {
    application: ApplicationResponse;
    expires: string;
    scopes: Array<OAuth2Scopes>;
    user?: null | UserResponse;
};

export type OAuth2GetKeys = {
    keys: Array<OAuth2Key>;
};

export type OAuth2Key = {
    kty: string;
    use: string;
    kid: string;
    n: string;
    e: string;
    alg: string;
};

export type OAuth2Scopes = "identify" | "email" | "connections" | "guilds" | "guilds.join" | "guilds.members.read" | "gdm.join" | "bot" | "rpc" | "rpc.notifications.read" | "rpc.voice.read" | "rpc.voice.write" | "rpc.video.read" | "rpc.video.write" | "rpc.screenshare.read" | "rpc.screenshare.write" | "rpc.activities.write" | "webhook.incoming" | "messages.read" | "applications.builds.upload" | "applications.builds.read" | "applications.commands" | "applications.commands.permissions.update" | "applications.commands.update" | "applications.store.update" | "applications.entitlements" | "activities.read" | "activities.write" | "relationships.read" | "voice" | "dm_channels.read" | "role_connections.write" | "openid";

export type OnboardingPromptOptionRequest = {
    id?: null | SnowflakeType;
    title: string;
    description?: string | null;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
    emoji_animated?: boolean | null;
    role_ids?: Array<SnowflakeType> | null;
    channel_ids?: Array<SnowflakeType> | null;
};

export type OnboardingPromptOptionResponse = {
    id: SnowflakeType;
    title: string;
    description: string;
    emoji: SettingsEmojiResponse;
    role_ids: Array<SnowflakeType>;
    channel_ids: Array<SnowflakeType>;
};

export type OnboardingPromptResponse = {
    id: SnowflakeType;
    title: string;
    options: Array<OnboardingPromptOptionResponse>;
    single_select: boolean;
    required: boolean;
    in_onboarding: boolean;
    type: OnboardingPromptType;
};

export type OnboardingPromptType = 0 | 1;

export type PartialDiscordIntegrationResponse = {
    id: SnowflakeType;
    type: 'discord';
    name?: string | null;
    account?: null | AccountResponse;
    application_id: SnowflakeType;
};

export type PartialExternalConnectionIntegrationResponse = {
    id: SnowflakeType;
    type: 'twitch' | 'youtube';
    name?: string | null;
    account?: null | AccountResponse;
};

export type PartialGuildSubscriptionIntegrationResponse = {
    id: SnowflakeType;
    type: 'guild_subscription';
    name?: string | null;
    account?: null | AccountResponse;
};

export type PongInteractionCallbackRequest = {
    type: 1;
};

export type PremiumGuildTiers = 0 | 1 | 2 | 3;

export type PremiumTypes = 0 | 1 | 2 | 3;

export type PrivateApplicationResponse = {
    id: SnowflakeType;
    name: string;
    icon?: string | null;
    description: string;
    type?: null | ApplicationTypes;
    cover_image?: string | null;
    primary_sku_id?: null | SnowflakeType;
    bot?: null | UserResponse;
    slug?: string | null;
    guild_id?: null | SnowflakeType;
    rpc_origins?: Array<(string | null)> | null;
    bot_public?: boolean | null;
    bot_require_code_grant?: boolean | null;
    terms_of_service_url?: string | null;
    privacy_policy_url?: string | null;
    custom_install_url?: string | null;
    install_params?: null | ApplicationOAuth2InstallParamsResponse;
    verify_key: string;
    flags: number;
    max_participants?: number | null;
    tags?: Array<(string)> | null;
    redirect_uris: Array<(string | null)>;
    interactions_endpoint_url?: string | null;
    role_connections_verification_url?: string | null;
    owner: UserResponse;
    approximate_guild_count?: number | null;
    team?: null | TeamResponse;
};

export type PrivateChannelRequestPartial = {
    name?: string | null;
    icon?: string | null;
};

export type PrivateChannelResponse = {
    id: SnowflakeType;
    type: 1;
    last_message_id?: null | SnowflakeType;
    flags: number;
    last_pin_timestamp?: string | null;
    recipients: Array<UserResponse>;
};

export type PrivateGroupChannelResponse = {
    id: SnowflakeType;
    type: 3;
    last_message_id?: null | SnowflakeType;
    flags: number;
    last_pin_timestamp?: string | null;
    recipients: Array<UserResponse>;
    name?: string | null;
    icon?: string | null;
    owner_id?: null | SnowflakeType;
    managed?: boolean | null;
    application_id?: null | SnowflakeType;
};

export type PrivateGuildMemberResponse = {
    avatar?: string | null;
    avatar_decoration_data?: null | UserAvatarDecorationResponse;
    communication_disabled_until?: string | null;
    flags: number;
    joined_at: string;
    nick?: string | null;
    pending: boolean;
    premium_since?: string | null;
    roles: Array<SnowflakeType>;
    user: UserResponse;
    mute: boolean;
    deaf: boolean;
    banner?: string | null;
};

export type PurchaseNotificationResponse = {
    type: PurchaseType;
    guild_product_purchase?: null | GuildProductPurchaseResponse;
};

export type PurchaseType = 0;

export type QuarantineUserAction = {
    type: 4;
    metadata?: null | QuarantineUserActionMetadata;
};

export type QuarantineUserActionMetadata = unknown;

export type QuarantineUserActionMetadataResponse = unknown;

export type QuarantineUserActionResponse = {
    type: 4;
    metadata: QuarantineUserActionMetadataResponse;
};

export type ResolvedObjectsResponse = {
    users: {
        [key: string]: UserResponse;
    };
    members: {
        [key: string]: GuildMemberResponse;
    };
    channels: {
        [key: string]: (GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse);
    };
    roles: {
        [key: string]: GuildRoleResponse;
    };
};

export type ResourceChannelResponse = {
    channel_id: SnowflakeType;
    title: string;
    emoji?: null | SettingsEmojiResponse;
    icon?: string | null;
    description: string;
};

export type RichEmbed = {
    type?: string | null;
    url?: string | null;
    title?: string | null;
    color?: number | null;
    timestamp?: string | null;
    description?: string | null;
    author?: null | RichEmbedAuthor;
    image?: null | RichEmbedImage;
    thumbnail?: null | RichEmbedThumbnail;
    footer?: null | RichEmbedFooter;
    fields?: Array<RichEmbedField> | null;
    provider?: null | RichEmbedProvider;
    video?: null | RichEmbedVideo;
};

export type RichEmbedAuthor = {
    name?: string | null;
    url?: string | null;
    icon_url?: string | null;
};

export type RichEmbedField = {
    name: string;
    value: string;
    inline?: boolean | null;
};

export type RichEmbedFooter = {
    text?: string | null;
    icon_url?: string | null;
};

export type RichEmbedImage = {
    url?: string | null;
    width?: number | null;
    height?: number | null;
    placeholder?: string | null;
    placeholder_version?: number | null;
};

export type RichEmbedProvider = {
    name?: string | null;
    url?: string | null;
};

export type RichEmbedThumbnail = {
    url?: string | null;
    width?: number | null;
    height?: number | null;
    placeholder?: string | null;
    placeholder_version?: number | null;
};

export type RichEmbedVideo = {
    url?: string | null;
    width?: number | null;
    height?: number | null;
    placeholder?: string | null;
    placeholder_version?: number | null;
};

export type RoleSelect = {
    type: 6;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    default_values?: Array<RoleSelectDefaultValue> | null;
};

export type RoleSelectDefaultValue = {
    type: 'role';
    id: SnowflakeType;
};

export type ScheduledEventResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    name: string;
    description?: string | null;
    channel_id?: null | SnowflakeType;
    creator_id?: null | SnowflakeType;
    creator?: null | UserResponse;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    status: GuildScheduledEventStatuses;
    entity_type: GuildScheduledEventEntityTypes;
    entity_id?: null | SnowflakeType;
    user_count?: number | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    user_rsvp?: null | ScheduledEventUserResponse;
};

export type ScheduledEventUserResponse = {
    guild_scheduled_event_id: SnowflakeType;
    user_id: SnowflakeType;
    user?: null | UserResponse;
    member?: null | GuildMemberResponse;
};

export type SelectOption = {
    label: string;
    value: string;
    description?: string | null;
    emoji?: null | Emoji;
    default?: boolean | null;
};

export type SelectOptionResponse = {
    label: string;
    value: string;
    description?: string | null;
    emoji?: null | MessageComponentEmojiResponse;
    default?: boolean | null;
};

export type SettingsEmojiResponse = {
    id?: null | SnowflakeType;
    name?: string | null;
    animated?: boolean | null;
};

export type SlackWebhook = {
    text?: string | null;
    username?: string | null;
    icon_url?: string | null;
    attachments?: Array<WebhookSlackEmbed> | null;
};

export type SnowflakeSelectDefaultValueTypes = "user" | "role" | "channel";

export type SnowflakeType = string;

export type SpamLinkRuleResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    creator_id: SnowflakeType;
    name: string;
    event_type: AutomodEventType;
    actions: Array<(BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse)>;
    trigger_type: 2;
    enabled?: boolean | null;
    exempt_roles?: Array<SnowflakeType> | null;
    exempt_channels?: Array<SnowflakeType> | null;
    trigger_metadata: SpamLinkTriggerMetadataResponse;
};

export type SpamLinkTriggerMetadataResponse = unknown;

export type StageInstanceResponse = {
    guild_id: SnowflakeType;
    channel_id: SnowflakeType;
    topic: string;
    privacy_level: StageInstancesPrivacyLevels;
    id: SnowflakeType;
    discoverable_disabled?: boolean | null;
    guild_scheduled_event_id?: null | SnowflakeType;
};

export type StageInstancesPrivacyLevels = 1 | 2;

export type StageScheduledEventCreateRequest = {
    name: string;
    description?: string | null;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    entity_type: 1;
    channel_id?: null | SnowflakeType;
    entity_metadata?: null | EntityMetadataStageInstance;
};

export type StageScheduledEventPatchRequestPartial = {
    status?: null | GuildScheduledEventStatuses;
    name?: string;
    description?: string | null;
    image?: string | null;
    scheduled_start_time?: string;
    scheduled_end_time?: string | null;
    entity_type?: null | 1;
    privacy_level?: GuildScheduledEventPrivacyLevels;
    channel_id?: null | SnowflakeType;
    entity_metadata?: null | EntityMetadataStageInstance;
};

export type StageScheduledEventResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    name: string;
    description?: string | null;
    channel_id?: null | SnowflakeType;
    creator_id?: null | SnowflakeType;
    creator?: null | UserResponse;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    status: GuildScheduledEventStatuses;
    entity_type: 1;
    entity_id?: null | SnowflakeType;
    user_count?: number | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    user_rsvp?: null | ScheduledEventUserResponse;
    entity_metadata?: null | EntityMetadataStageInstanceResponse;
};

export type StandardStickerResponse = {
    id: SnowflakeType;
    name: string;
    tags: string;
    type: 1;
    format_type?: null | StickerFormatTypes;
    description?: string | null;
    pack_id: SnowflakeType;
    sort_value: number;
};

export type StickerFormatTypes = 1 | 2 | 3 | 4;

export type StickerPackCollectionResponse = {
    sticker_packs: Array<StickerPackResponse>;
};

export type StickerPackResponse = {
    id: SnowflakeType;
    sku_id: SnowflakeType;
    name: string;
    description?: string | null;
    stickers: Array<StandardStickerResponse>;
    cover_sticker_id?: null | SnowflakeType;
    banner_asset_id?: null | SnowflakeType;
};

export type StickerTypes = 1 | 2;

export type StringSelect = {
    type: 3;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    options: Array<SelectOption>;
};

export type TeamMemberResponse = {
    user: UserResponse;
    team_id: SnowflakeType;
    membership_state: TeamMembershipStates;
};

export type TeamMembershipStates = 1 | 2;

export type TeamResponse = {
    id: SnowflakeType;
    icon?: string | null;
    name: string;
    owner_user_id: SnowflakeType;
    members: Array<TeamMemberResponse>;
};

export type TextStyleTypes = 1 | 2;

export type ThreadAutoArchiveDuration = 60 | 1440 | 4320 | 10080;

export type ThreadMemberResponse = {
    id: SnowflakeType;
    user_id: SnowflakeType;
    join_timestamp: string;
    flags: number;
    member?: null | GuildMemberResponse;
};

export type ThreadMetadataResponse = {
    archived: boolean;
    archive_timestamp?: string | null;
    auto_archive_duration: ThreadAutoArchiveDuration;
    locked: boolean;
    create_timestamp?: string | null;
    invitable?: boolean | null;
};

export type ThreadResponse = {
    id: SnowflakeType;
    type: 10 | 11 | 12;
    last_message_id?: null | SnowflakeType;
    flags: number;
    last_pin_timestamp?: string | null;
    guild_id: SnowflakeType;
    name: string;
    parent_id?: null | SnowflakeType;
    rate_limit_per_user?: number | null;
    bitrate?: number | null;
    user_limit?: number | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
    permissions?: string | null;
    owner_id: SnowflakeType;
    thread_metadata?: null | ThreadMetadataResponse;
    message_count: number;
    member_count: number;
    total_message_sent: number;
    applied_tags?: Array<SnowflakeType> | null;
    member?: null | ThreadMemberResponse;
};

export type ThreadSortOrder = 0 | 1;

export type ThreadsResponse = {
    threads: Array<ThreadResponse>;
    members: Array<ThreadMemberResponse>;
    has_more?: boolean | null;
};

export type TypingIndicatorResponse = unknown;

export type UInt32Type = number;

export type UpdateDefaultReactionEmojiRequest = {
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
};

export type UpdateGuildChannelRequestPartial = {
    type?: null | 0 | 2 | 4 | 5 | 13 | 14 | 15;
    name?: string;
    position?: number | null;
    topic?: string | null;
    bitrate?: number | null;
    user_limit?: number | null;
    nsfw?: boolean | null;
    rate_limit_per_user?: number | null;
    parent_id?: null | SnowflakeType;
    permission_overwrites?: Array<ChannelPermissionOverwriteRequest> | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
    default_auto_archive_duration?: null | ThreadAutoArchiveDuration;
    default_reaction_emoji?: null | UpdateDefaultReactionEmojiRequest;
    default_thread_rate_limit_per_user?: number | null;
    default_sort_order?: null | ThreadSortOrder;
    default_forum_layout?: null | ForumLayout;
    flags?: number | null;
    available_tags?: Array<UpdateThreadTagRequest> | null;
};

export type UpdateGuildOnboardingRequest = {
    prompts?: Array<UpdateOnboardingPromptRequest> | null;
    enabled?: boolean | null;
    default_channel_ids?: Array<SnowflakeType> | null;
    mode?: null | GuildOnboardingMode;
};

export type UpdateMessageInteractionCallbackRequest = {
    type: 6 | 7;
    data?: null | IncomingWebhookUpdateForInteractionCallbackRequestPartial;
};

export type UpdateOnboardingPromptRequest = {
    title: string;
    options: Array<OnboardingPromptOptionRequest>;
    single_select?: boolean | null;
    required?: boolean | null;
    in_onboarding?: boolean | null;
    type?: null | OnboardingPromptType;
    id: SnowflakeType;
};

export type UpdateThreadRequestPartial = {
    name?: string | null;
    archived?: boolean | null;
    locked?: boolean | null;
    invitable?: boolean | null;
    auto_archive_duration?: null | ThreadAutoArchiveDuration;
    rate_limit_per_user?: number | null;
    flags?: number | null;
    applied_tags?: Array<SnowflakeType> | null;
    bitrate?: number | null;
    user_limit?: number | null;
    rtc_region?: string | null;
    video_quality_mode?: null | VideoQualityModes;
};

export type UpdateThreadTagRequest = {
    name: string;
    emoji_id?: null | SnowflakeType;
    emoji_name?: string | null;
    moderated?: boolean | null;
    id?: null | SnowflakeType;
};

export type UserAvatarDecorationResponse = unknown;

export type UserCommunicationDisabledAction = {
    type: 3;
    metadata: UserCommunicationDisabledActionMetadata;
};

export type UserCommunicationDisabledActionMetadata = {
    duration_seconds?: number | null;
};

export type UserCommunicationDisabledActionMetadataResponse = {
    duration_seconds: number;
};

export type UserCommunicationDisabledActionResponse = {
    type: 3;
    metadata: UserCommunicationDisabledActionMetadataResponse;
};

export type UserGuildOnboardingResponse = {
    guild_id: SnowflakeType;
    prompts: Array<OnboardingPromptResponse>;
    default_channel_ids: Array<SnowflakeType>;
    enabled: boolean;
};

export type UserNotificationSettings = 0 | 1;

export type UserPIIResponse = {
    id: SnowflakeType;
    username: string;
    avatar?: string | null;
    discriminator: string;
    public_flags: number;
    flags: Int53Type;
    bot?: boolean | null;
    system?: boolean | null;
    banner?: string | null;
    accent_color?: number | null;
    global_name?: string | null;
    mfa_enabled: boolean;
    locale: AvailableLocalesEnum;
    premium_type?: null | PremiumTypes;
    email?: string | null;
    verified?: boolean | null;
};

export type UserResponse = {
    id: SnowflakeType;
    username: string;
    avatar?: string | null;
    discriminator: string;
    public_flags: number;
    flags: Int53Type;
    bot?: boolean | null;
    system?: boolean | null;
    banner?: string | null;
    accent_color?: number | null;
    global_name?: string | null;
};

export type UserSelect = {
    type: 5;
    custom_id: string;
    placeholder?: string | null;
    min_values?: number | null;
    max_values?: number | null;
    disabled?: boolean | null;
    default_values?: Array<UserSelectDefaultValue> | null;
};

export type UserSelectDefaultValue = {
    type: 'user';
    id: SnowflakeType;
};

export type VanityURLErrorResponse = {
    message: string;
    code: number;
};

export type VanityURLResponse = {
    code?: string | null;
    uses: number;
    error?: null | VanityURLErrorResponse;
};

export type VerificationLevels = 0 | 1 | 2 | 3 | 4;

export type VideoQualityModes = 1 | 2;

export type VoiceRegionResponse = {
    id: string;
    name: string;
    custom: boolean;
    deprecated: boolean;
    optimal: boolean;
};

export type VoiceScheduledEventCreateRequest = {
    name: string;
    description?: string | null;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    entity_type: 2;
    channel_id?: null | SnowflakeType;
    entity_metadata?: null | EntityMetadataVoice;
};

export type VoiceScheduledEventPatchRequestPartial = {
    status?: null | GuildScheduledEventStatuses;
    name?: string;
    description?: string | null;
    image?: string | null;
    scheduled_start_time?: string;
    scheduled_end_time?: string | null;
    entity_type?: null | 2;
    privacy_level?: GuildScheduledEventPrivacyLevels;
    channel_id?: null | SnowflakeType;
    entity_metadata?: null | EntityMetadataVoice;
};

export type VoiceScheduledEventResponse = {
    id: SnowflakeType;
    guild_id: SnowflakeType;
    name: string;
    description?: string | null;
    channel_id?: null | SnowflakeType;
    creator_id?: null | SnowflakeType;
    creator?: null | UserResponse;
    image?: string | null;
    scheduled_start_time: string;
    scheduled_end_time?: string | null;
    status: GuildScheduledEventStatuses;
    entity_type: 2;
    entity_id?: null | SnowflakeType;
    user_count?: number | null;
    privacy_level: GuildScheduledEventPrivacyLevels;
    user_rsvp?: null | ScheduledEventUserResponse;
    entity_metadata?: null | EntityMetadataVoiceResponse;
};

export type WebhookSlackEmbed = {
    title?: string | null;
    title_link?: string | null;
    text?: string | null;
    color?: string | null;
    ts?: number | null;
    pretext?: string | null;
    footer?: string | null;
    footer_icon?: string | null;
    author_name?: string | null;
    author_link?: string | null;
    author_icon?: string | null;
    image_url?: string | null;
    thumb_url?: string | null;
    fields?: Array<WebhookSlackEmbedField> | null;
};

export type WebhookSlackEmbedField = {
    name?: string | null;
    value?: string | null;
    inline?: boolean | null;
};

export type WebhookSourceChannelResponse = {
    id: SnowflakeType;
    name: string;
};

export type WebhookSourceGuildResponse = {
    id: SnowflakeType;
    icon?: string | null;
    name: string;
};

export type WebhookTypes = 1 | 2 | 3;

export type WelcomeMessageResponse = {
    author_ids: Array<SnowflakeType>;
    message: string;
};

export type WelcomeScreenPatchRequestPartial = {
    description?: string | null;
    welcome_channels?: Array<GuildWelcomeChannel> | null;
    enabled?: boolean | null;
};

export type WidgetActivity = {
    name: string;
};

export type WidgetChannel = {
    id: SnowflakeType;
    name: string;
    position: number;
};

export type WidgetImageStyles = "shield" | "banner1" | "banner2" | "banner3" | "banner4";

export type WidgetMember = {
    id: string;
    username: string;
    discriminator: WidgetUserDiscriminator;
    avatar?: null;
    status: string;
    avatar_url: string;
    activity?: null | WidgetActivity;
    deaf?: boolean | null;
    mute?: boolean | null;
    self_deaf?: boolean | null;
    self_mute?: boolean | null;
    suppress?: boolean | null;
    channel_id?: null | SnowflakeType;
};

export type WidgetResponse = {
    id: SnowflakeType;
    name: string;
    instant_invite?: string | null;
    channels: Array<WidgetChannel>;
    members: Array<WidgetMember>;
    presence_count: number;
};

export type WidgetSettingsResponse = {
    enabled: boolean;
    channel_id?: null | SnowflakeType;
};

export type WidgetUserDiscriminator = "0000";

/**
 * A single error, either for an API response or a specific field.
 */
export type Error = {
    /**
     * Discord internal error code. See error code reference
     */
    code: number;
    /**
     * Human-readable error message
     */
    message: string;
};

export type InnerErrors = {
    /**
     * The list of errors for this field
     */
    _errors: Array<Error>;
};

export type ErrorDetails = {
    [key: string]: ErrorDetails;
} | InnerErrors;

/**
 * Errors object returned by the Discord API
 */
export type ErrorResponse = Error & {
    errors?: ErrorDetails;
};

export type GetMyOauth2ApplicationResponse = PrivateApplicationResponse;

export type ListMyConnectionsResponse = Array<ConnectedAccountResponse> | null;

export type CreateDmData = {
    requestBody: CreatePrivateChannelRequest;
};

export type CreateDmResponse = PrivateChannelResponse | PrivateGroupChannelResponse;

export type ListMyGuildsData = {
    after?: SnowflakeType;
    before?: SnowflakeType;
    limit?: number;
    withCounts?: boolean;
};

export type ListMyGuildsResponse = Array<MyGuildResponse> | null;

export type GetMyApplicationResponse = PrivateApplicationResponse;

export type UpdateMyApplicationData = {
    requestBody: ApplicationFormPartial;
};

export type UpdateMyApplicationResponse = PrivateApplicationResponse;

export type GetBotGatewayResponse = GatewayBotResponse;

export type GetPublicKeysResponse = OAuth2GetKeys;

export type GetMyOauth2AuthorizationResponse = OAuth2GetAuthorizationResponse;

export type ListVoiceRegionsResponse = Array<VoiceRegionResponse> | null;

export type GetMyUserResponse = UserPIIResponse;

export type UpdateMyUserData = {
    requestBody: BotAccountPatchRequest;
};

export type UpdateMyUserResponse = UserPIIResponse;

export type CreateStageInstanceData = {
    requestBody: {
        topic: string;
        channel_id: SnowflakeType;
        privacy_level?: null | StageInstancesPrivacyLevels;
        guild_scheduled_event_id?: null | SnowflakeType;
        send_start_notification?: boolean | null;
    };
};

export type CreateStageInstanceResponse = StageInstanceResponse;

export type ListStickerPacksResponse = StickerPackCollectionResponse;

export type GetGatewayResponse = GatewayResponse;

export type CreateGuildData = {
    requestBody: GuildCreateRequest;
};

export type CreateGuildResponse = GuildResponse;

export type ListMyPrivateArchivedThreadsData = {
    before?: SnowflakeType;
    channelId: SnowflakeType;
    limit?: number;
};

export type ListMyPrivateArchivedThreadsResponse = ThreadsResponse;

export type ListGuildApplicationCommandPermissionsData = {
    applicationId: SnowflakeType;
    guildId: SnowflakeType;
};

export type ListGuildApplicationCommandPermissionsResponse = Array<CommandPermissionsResponse>;

export type GetGuildApplicationCommandPermissionsData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
    guildId: SnowflakeType;
};

export type GetGuildApplicationCommandPermissionsResponse = CommandPermissionsResponse;

export type SetGuildApplicationCommandPermissionsData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
    guildId: SnowflakeType;
    requestBody: {
        permissions?: Array<ApplicationCommandPermission> | null;
    };
};

export type SetGuildApplicationCommandPermissionsResponse = CommandPermissionsResponse;

export type AddMyMessageReactionData = {
    channelId: SnowflakeType;
    emojiName: string;
    messageId: SnowflakeType;
};

export type AddMyMessageReactionResponse = void;

export type DeleteMyMessageReactionData = {
    channelId: SnowflakeType;
    emojiName: string;
    messageId: SnowflakeType;
};

export type DeleteMyMessageReactionResponse = void;

export type ListPrivateArchivedThreadsData = {
    before?: string;
    channelId: SnowflakeType;
    limit?: number;
};

export type ListPrivateArchivedThreadsResponse = ThreadsResponse;

export type ListPublicArchivedThreadsData = {
    before?: string;
    channelId: SnowflakeType;
    limit?: number;
};

export type ListPublicArchivedThreadsResponse = ThreadsResponse;

export type GetApplicationUserRoleConnectionData = {
    applicationId: SnowflakeType;
};

export type GetApplicationUserRoleConnectionResponse = ApplicationUserRoleConnectionResponse;

export type UpdateApplicationUserRoleConnectionData = {
    applicationId: SnowflakeType;
    requestBody: {
        platform_name?: string | null;
        platform_username?: string | null;
        metadata?: {
            [key: string]: (string);
        } | null;
    };
};

export type UpdateApplicationUserRoleConnectionResponse = ApplicationUserRoleConnectionResponse;

export type GetMyGuildMemberData = {
    guildId: SnowflakeType;
};

export type GetMyGuildMemberResponse = PrivateGuildMemberResponse;

export type GetApplicationRoleConnectionsMetadataData = {
    applicationId: SnowflakeType;
};

export type GetApplicationRoleConnectionsMetadataResponse = Array<ApplicationRoleConnectionsMetadataItemResponse> | null;

export type UpdateApplicationRoleConnectionsMetadataData = {
    applicationId: SnowflakeType;
    requestBody: Array<ApplicationRoleConnectionsMetadataItemRequest> | null;
};

export type UpdateApplicationRoleConnectionsMetadataResponse = Array<ApplicationRoleConnectionsMetadataItemResponse> | null;

export type ConsumeEntitlementData = {
    applicationId: SnowflakeType;
    entitlementId: SnowflakeType;
};

export type ConsumeEntitlementResponse = void;

export type GetGuildApplicationCommandData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
    guildId: SnowflakeType;
};

export type GetGuildApplicationCommandResponse = ApplicationCommandResponse;

export type DeleteGuildApplicationCommandData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
    guildId: SnowflakeType;
};

export type DeleteGuildApplicationCommandResponse = void;

export type UpdateGuildApplicationCommandData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
    guildId: SnowflakeType;
    requestBody: ApplicationCommandPatchRequestPartial;
};

export type UpdateGuildApplicationCommandResponse = ApplicationCommandResponse;

export type ListGuildApplicationCommandsData = {
    applicationId: SnowflakeType;
    guildId: SnowflakeType;
    withLocalizations?: boolean;
};

export type ListGuildApplicationCommandsResponse = Array<ApplicationCommandResponse> | null;

export type BulkSetGuildApplicationCommandsData = {
    applicationId: SnowflakeType;
    guildId: SnowflakeType;
    requestBody: Array<ApplicationCommandUpdateRequest> | null;
};

export type BulkSetGuildApplicationCommandsResponse = Array<ApplicationCommandResponse> | null;

export type CreateGuildApplicationCommandData = {
    applicationId: SnowflakeType;
    guildId: SnowflakeType;
    requestBody: ApplicationCommandCreateRequest;
};

export type CreateGuildApplicationCommandResponse = ApplicationCommandResponse;

export type JoinThreadData = {
    channelId: SnowflakeType;
};

export type JoinThreadResponse = void;

export type LeaveThreadData = {
    channelId: SnowflakeType;
};

export type LeaveThreadResponse = void;

export type BulkDeleteMessagesData = {
    channelId: SnowflakeType;
    requestBody: {
        messages: Array<SnowflakeType>;
    };
};

export type BulkDeleteMessagesResponse = void;

export type DeleteUserMessageReactionData = {
    channelId: SnowflakeType;
    emojiName: string;
    messageId: SnowflakeType;
    userId: SnowflakeType;
};

export type DeleteUserMessageReactionResponse = void;

export type ListMessageReactionsByEmojiData = {
    after?: SnowflakeType;
    channelId: SnowflakeType;
    emojiName: string;
    limit?: number;
    messageId: SnowflakeType;
};

export type ListMessageReactionsByEmojiResponse = Array<UserResponse>;

export type DeleteAllMessageReactionsByEmojiData = {
    channelId: SnowflakeType;
    emojiName: string;
    messageId: SnowflakeType;
};

export type DeleteAllMessageReactionsByEmojiResponse = void;

export type DeleteAllMessageReactionsData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
};

export type DeleteAllMessageReactionsResponse = void;

export type CrosspostMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
};

export type CrosspostMessageResponse = MessageResponse;

export type CreateThreadFromMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
    requestBody: CreateTextThreadWithMessageRequest;
};

export type CreateThreadFromMessageResponse = ThreadResponse;

export type GetOriginalWebhookMessageData = {
    threadId?: SnowflakeType;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type GetOriginalWebhookMessageResponse = MessageResponse;

export type DeleteOriginalWebhookMessageData = {
    threadId?: SnowflakeType;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type DeleteOriginalWebhookMessageResponse = void;

export type UpdateOriginalWebhookMessageData = {
    requestBody: IncomingWebhookUpdateRequestPartial;
    threadId?: SnowflakeType;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type UpdateOriginalWebhookMessageResponse = MessageResponse;

export type ListGuildScheduledEventUsersData = {
    after?: SnowflakeType;
    before?: SnowflakeType;
    guildId: SnowflakeType;
    guildScheduledEventId: SnowflakeType;
    limit?: number;
    withMember?: boolean;
};

export type ListGuildScheduledEventUsersResponse = Array<ScheduledEventUserResponse> | null;

export type GetAutoModerationRuleData = {
    guildId: SnowflakeType;
    ruleId: SnowflakeType;
};

export type GetAutoModerationRuleResponse = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;

export type DeleteAutoModerationRuleData = {
    guildId: SnowflakeType;
    ruleId: SnowflakeType;
};

export type DeleteAutoModerationRuleResponse = void;

export type UpdateAutoModerationRuleData = {
    guildId: SnowflakeType;
    requestBody: DefaultKeywordListUpsertRequestPartial | KeywordUpsertRequestPartial | MLSpamUpsertRequestPartial | MentionSpamUpsertRequestPartial;
    ruleId: SnowflakeType;
};

export type UpdateAutoModerationRuleResponse = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;

export type ListAutoModerationRulesData = {
    guildId: SnowflakeType;
};

export type ListAutoModerationRulesResponse = Array<(DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse | null)> | null;

export type CreateAutoModerationRuleData = {
    guildId: SnowflakeType;
    requestBody: DefaultKeywordListUpsertRequest | KeywordUpsertRequest | MLSpamUpsertRequest | MentionSpamUpsertRequest;
};

export type CreateAutoModerationRuleResponse = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;

export type UpdateSelfVoiceStateData = {
    guildId: SnowflakeType;
    requestBody: {
        request_to_speak_timestamp?: string | null;
        suppress?: boolean | null;
        channel_id?: null | SnowflakeType;
    };
};

export type UpdateSelfVoiceStateResponse = void;

export type SearchGuildMembersData = {
    guildId: SnowflakeType;
    limit: number;
    query: string;
};

export type SearchGuildMembersResponse = Array<GuildMemberResponse>;

export type GetActiveGuildThreadsData = {
    guildId: SnowflakeType;
};

export type GetActiveGuildThreadsResponse = ThreadsResponse;

export type UpdateMyGuildMemberData = {
    guildId: SnowflakeType;
    requestBody: {
        nick?: string | null;
    };
};

export type UpdateMyGuildMemberResponse = PrivateGuildMemberResponse;

export type AddGuildMemberRoleData = {
    guildId: SnowflakeType;
    roleId: SnowflakeType;
    userId: SnowflakeType;
};

export type AddGuildMemberRoleResponse = void;

export type DeleteGuildMemberRoleData = {
    guildId: SnowflakeType;
    roleId: SnowflakeType;
    userId: SnowflakeType;
};

export type DeleteGuildMemberRoleResponse = void;

export type LeaveGuildData = {
    guildId: SnowflakeType;
};

export type LeaveGuildResponse = void;

export type GetEntitlementData = {
    applicationId: SnowflakeType;
    entitlementId: SnowflakeType;
};

export type GetEntitlementResponse = EntitlementResponse;

export type DeleteEntitlementData = {
    applicationId: SnowflakeType;
    entitlementId: SnowflakeType;
};

export type DeleteEntitlementResponse = void;

export type GetEntitlementsData = {
    after?: SnowflakeType;
    applicationId: SnowflakeType;
    before?: SnowflakeType;
    excludeEnded?: boolean;
    guildId?: SnowflakeType;
    limit?: number;
    onlyActive?: boolean;
    skuIds: string | Array<(null | SnowflakeType)>;
    userId?: SnowflakeType;
};

export type GetEntitlementsResponse = Array<(null | EntitlementResponse)>;

export type CreateEntitlementData = {
    applicationId: SnowflakeType;
    requestBody: CreateEntitlementRequestData;
};

export type CreateEntitlementResponse = EntitlementResponse;

export type GetApplicationCommandData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
};

export type GetApplicationCommandResponse = ApplicationCommandResponse;

export type DeleteApplicationCommandData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
};

export type DeleteApplicationCommandResponse = void;

export type UpdateApplicationCommandData = {
    applicationId: SnowflakeType;
    commandId: SnowflakeType;
    requestBody: ApplicationCommandPatchRequestPartial;
};

export type UpdateApplicationCommandResponse = ApplicationCommandResponse;

export type ListApplicationCommandsData = {
    applicationId: SnowflakeType;
    withLocalizations?: boolean;
};

export type ListApplicationCommandsResponse = Array<ApplicationCommandResponse> | null;

export type BulkSetApplicationCommandsData = {
    applicationId: SnowflakeType;
    requestBody: Array<ApplicationCommandUpdateRequest> | null;
};

export type BulkSetApplicationCommandsResponse = Array<ApplicationCommandResponse> | null;

export type CreateApplicationCommandData = {
    applicationId: SnowflakeType;
    requestBody: ApplicationCommandCreateRequest;
};

export type CreateApplicationCommandResponse = ApplicationCommandResponse;

export type CreateInteractionResponseData = {
    interactionId: SnowflakeType;
    interactionToken: string;
    requestBody: ApplicationCommandAutocompleteCallbackRequest | CreateMessageInteractionCallbackRequest | ModalInteractionCallbackRequest | PongInteractionCallbackRequest | UpdateMessageInteractionCallbackRequest;
};

export type CreateInteractionResponseResponse = void;

export type GetThreadMemberData = {
    channelId: SnowflakeType;
    userId: SnowflakeType;
    withMember?: boolean;
};

export type GetThreadMemberResponse = ThreadMemberResponse;

export type AddThreadMemberData = {
    channelId: SnowflakeType;
    userId: SnowflakeType;
};

export type AddThreadMemberResponse = void;

export type DeleteThreadMemberData = {
    channelId: SnowflakeType;
    userId: SnowflakeType;
};

export type DeleteThreadMemberResponse = void;

export type ListThreadMembersData = {
    after?: SnowflakeType;
    channelId: SnowflakeType;
    limit?: number;
    withMember?: boolean;
};

export type ListThreadMembersResponse = Array<ThreadMemberResponse>;

export type SetChannelPermissionOverwriteData = {
    channelId: SnowflakeType;
    overwriteId: SnowflakeType;
    requestBody: {
        type?: null | ChannelPermissionOverwrites;
        allow?: number | null;
        deny?: number | null;
    };
};

export type SetChannelPermissionOverwriteResponse = void;

export type DeleteChannelPermissionOverwriteData = {
    channelId: SnowflakeType;
    overwriteId: SnowflakeType;
};

export type DeleteChannelPermissionOverwriteResponse = void;

export type AddGroupDmUserData = {
    channelId: SnowflakeType;
    requestBody: {
        access_token?: string | null;
        nick?: string | null;
    };
    userId: SnowflakeType;
};

export type AddGroupDmUserResponse = PrivateChannelResponse | PrivateGroupChannelResponse | void;

export type DeleteGroupDmUserData = {
    channelId: SnowflakeType;
    userId: SnowflakeType;
};

export type DeleteGroupDmUserResponse = void;

export type FollowChannelData = {
    channelId: SnowflakeType;
    requestBody: {
        webhook_channel_id: SnowflakeType;
    };
};

export type FollowChannelResponse = ChannelFollowerResponse;

export type GetMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
};

export type GetMessageResponse = MessageResponse;

export type DeleteMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
};

export type DeleteMessageResponse = void;

export type UpdateMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
    requestBody: MessageEditRequestPartial;
};

export type UpdateMessageResponse = MessageResponse;

export type ListMessagesData = {
    after?: SnowflakeType;
    around?: SnowflakeType;
    before?: SnowflakeType;
    channelId: SnowflakeType;
    limit?: number;
};

export type ListMessagesResponse = Array<MessageResponse> | null;

export type CreateMessageData = {
    channelId: SnowflakeType;
    requestBody: MessageCreateRequest;
};

export type CreateMessageResponse = MessageResponse;

export type ListChannelWebhooksData = {
    channelId: SnowflakeType;
};

export type ListChannelWebhooksResponse = Array<(ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse)> | null;

export type CreateWebhookData = {
    channelId: SnowflakeType;
    requestBody: {
        name: string;
        avatar?: string | null;
    };
};

export type CreateWebhookResponse = GuildIncomingWebhookResponse;

export type ListChannelInvitesData = {
    channelId: SnowflakeType;
};

export type ListChannelInvitesResponse = Array<(FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse)> | null;

export type CreateChannelInviteData = {
    channelId: SnowflakeType;
    requestBody: CreateGroupDMInviteRequest | CreateGuildInviteRequest;
};

export type CreateChannelInviteResponse = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse | void;

export type CreateThreadData = {
    channelId: SnowflakeType;
    requestBody: CreateForumThreadRequest | CreateTextThreadWithoutMessageRequest;
};

export type CreateThreadResponse = CreatedThreadResponse;

export type TriggerTypingIndicatorData = {
    channelId: SnowflakeType;
};

export type TriggerTypingIndicatorResponse = TypingIndicatorResponse | void;

export type PinMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
};

export type PinMessageResponse = void;

export type UnpinMessageData = {
    channelId: SnowflakeType;
    messageId: SnowflakeType;
};

export type UnpinMessageResponse = void;

export type ListPinnedMessagesData = {
    channelId: SnowflakeType;
};

export type ListPinnedMessagesResponse = Array<MessageResponse> | null;

export type GetWebhookMessageData = {
    messageId: SnowflakeType;
    threadId?: SnowflakeType;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type GetWebhookMessageResponse = MessageResponse;

export type DeleteWebhookMessageData = {
    messageId: SnowflakeType;
    threadId?: SnowflakeType;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type DeleteWebhookMessageResponse = void;

export type UpdateWebhookMessageData = {
    messageId: SnowflakeType;
    requestBody: IncomingWebhookUpdateRequestPartial;
    threadId?: SnowflakeType;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type UpdateWebhookMessageResponse = MessageResponse;

export type ExecuteGithubCompatibleWebhookData = {
    requestBody: GithubWebhook;
    threadId?: SnowflakeType;
    wait?: boolean;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type ExecuteGithubCompatibleWebhookResponse = void;

export type ExecuteSlackCompatibleWebhookData = {
    requestBody: SlackWebhook;
    threadId?: SnowflakeType;
    wait?: boolean;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type ExecuteSlackCompatibleWebhookResponse = string | null;

export type GetGuildTemplateData = {
    code: string;
};

export type GetGuildTemplateResponse = GuildTemplateResponse;

export type CreateGuildFromTemplateData = {
    code: string;
    requestBody: {
        name: string;
        icon?: string | null;
    };
};

export type CreateGuildFromTemplateResponse = GuildResponse;

export type GetGuildNewMemberWelcomeData = {
    guildId: SnowflakeType;
};

export type GetGuildNewMemberWelcomeResponse = GuildHomeSettingsResponse | void;

export type GetGuildScheduledEventData = {
    guildId: SnowflakeType;
    guildScheduledEventId: SnowflakeType;
    withUserCount?: boolean;
};

export type GetGuildScheduledEventResponse = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type DeleteGuildScheduledEventData = {
    guildId: SnowflakeType;
    guildScheduledEventId: SnowflakeType;
};

export type DeleteGuildScheduledEventResponse = void;

export type UpdateGuildScheduledEventData = {
    guildId: SnowflakeType;
    guildScheduledEventId: SnowflakeType;
    requestBody: ExternalScheduledEventPatchRequestPartial | StageScheduledEventPatchRequestPartial | VoiceScheduledEventPatchRequestPartial;
};

export type UpdateGuildScheduledEventResponse = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type ListGuildScheduledEventsData = {
    guildId: SnowflakeType;
    withUserCount?: boolean;
};

export type ListGuildScheduledEventsResponse = Array<(ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse)> | null;

export type CreateGuildScheduledEventData = {
    guildId: SnowflakeType;
    requestBody: ExternalScheduledEventCreateRequest | StageScheduledEventCreateRequest | VoiceScheduledEventCreateRequest;
};

export type CreateGuildScheduledEventResponse = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type GetGuildWelcomeScreenData = {
    guildId: SnowflakeType;
};

export type GetGuildWelcomeScreenResponse = GuildWelcomeScreenResponse;

export type UpdateGuildWelcomeScreenData = {
    guildId: SnowflakeType;
    requestBody: WelcomeScreenPatchRequestPartial;
};

export type UpdateGuildWelcomeScreenResponse = GuildWelcomeScreenResponse;

export type UpdateVoiceStateData = {
    guildId: SnowflakeType;
    requestBody: {
        suppress?: boolean | null;
        channel_id?: null | SnowflakeType;
    };
    userId: SnowflakeType;
};

export type UpdateVoiceStateResponse = void;

export type DeleteGuildIntegrationData = {
    guildId: SnowflakeType;
    integrationId: SnowflakeType;
};

export type DeleteGuildIntegrationResponse = void;

export type ListGuildIntegrationsData = {
    guildId: SnowflakeType;
};

export type ListGuildIntegrationsResponse = Array<(DiscordIntegrationResponse | ExternalConnectionIntegrationResponse | GuildSubscriptionIntegrationResponse)> | null;

export type GetGuildWidgetData = {
    guildId: SnowflakeType;
};

export type GetGuildWidgetResponse = WidgetResponse;

export type GetGuildsOnboardingData = {
    guildId: SnowflakeType;
};

export type GetGuildsOnboardingResponse = UserGuildOnboardingResponse;

export type PutGuildsOnboardingData = {
    guildId: SnowflakeType;
    requestBody: UpdateGuildOnboardingRequest;
};

export type PutGuildsOnboardingResponse = GuildOnboardingResponse;

export type GetGuildVanityUrlData = {
    guildId: SnowflakeType;
};

export type GetGuildVanityUrlResponse = VanityURLResponse;

export type ListGuildAuditLogEntriesData = {
    actionType?: number;
    after?: SnowflakeType;
    before?: SnowflakeType;
    guildId: SnowflakeType;
    limit?: number;
    targetId?: SnowflakeType;
    userId?: SnowflakeType;
};

export type ListGuildAuditLogEntriesResponse = GuildAuditLogResponse;

export type GetGuildWidgetPngData = {
    guildId: SnowflakeType;
    style?: WidgetImageStyles;
};

export type GetGuildWidgetPngResponse = string;

export type SyncGuildTemplateData = {
    code: string;
    guildId: SnowflakeType;
};

export type SyncGuildTemplateResponse = GuildTemplateResponse;

export type DeleteGuildTemplateData = {
    code: string;
    guildId: SnowflakeType;
};

export type DeleteGuildTemplateResponse = GuildTemplateResponse;

export type UpdateGuildTemplateData = {
    code: string;
    guildId: SnowflakeType;
    requestBody: {
        name?: string;
        description?: string | null;
    };
};

export type UpdateGuildTemplateResponse = GuildTemplateResponse;

export type ListGuildTemplatesData = {
    guildId: SnowflakeType;
};

export type ListGuildTemplatesResponse = Array<GuildTemplateResponse> | null;

export type CreateGuildTemplateData = {
    guildId: SnowflakeType;
    requestBody: {
        name: string;
        description?: string | null;
    };
};

export type CreateGuildTemplateResponse = GuildTemplateResponse;

export type GetGuildStickerData = {
    guildId: SnowflakeType;
    stickerId: SnowflakeType;
};

export type GetGuildStickerResponse = GuildStickerResponse;

export type DeleteGuildStickerData = {
    guildId: SnowflakeType;
    stickerId: SnowflakeType;
};

export type DeleteGuildStickerResponse = void;

export type UpdateGuildStickerData = {
    guildId: SnowflakeType;
    requestBody: {
        name?: string;
        tags?: string;
        description?: string | null;
    };
    stickerId: SnowflakeType;
};

export type UpdateGuildStickerResponse = GuildStickerResponse;

export type BulkBanUsersFromGuildData = {
    guildId: SnowflakeType;
    requestBody: {
        user_ids: Array<SnowflakeType>;
        delete_message_seconds?: number | null;
    };
};

export type BulkBanUsersFromGuildResponse = BulkBanUsersResponse;

export type ListGuildStickersData = {
    guildId: SnowflakeType;
};

export type ListGuildStickersResponse = Array<GuildStickerResponse>;

export type CreateGuildStickerData = {
    formData: {
        name: string;
        tags: string;
        description?: string | null;
        file: string;
    };
    guildId: SnowflakeType;
};

export type CreateGuildStickerResponse = GuildStickerResponse;

export type GetGuildWebhooksData = {
    guildId: SnowflakeType;
};

export type GetGuildWebhooksResponse = Array<(ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse)> | null;

export type ListGuildChannelsData = {
    guildId: SnowflakeType;
};

export type ListGuildChannelsResponse = Array<(GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse)> | null;

export type CreateGuildChannelData = {
    guildId: SnowflakeType;
    requestBody: CreateGuildChannelRequest;
};

export type CreateGuildChannelResponse = GuildChannelResponse;

export type BulkUpdateGuildChannelsData = {
    guildId: SnowflakeType;
    requestBody: Array<{
        id?: SnowflakeType;
        position?: number | null;
        parent_id?: null | SnowflakeType;
        lock_permissions?: boolean | null;
    }>;
};

export type BulkUpdateGuildChannelsResponse = void;

export type GetGuildMemberData = {
    guildId: SnowflakeType;
    userId: SnowflakeType;
};

export type GetGuildMemberResponse = GuildMemberResponse;

export type AddGuildMemberData = {
    guildId: SnowflakeType;
    requestBody: {
        nick?: string | null;
        roles?: Array<(null | SnowflakeType)> | null;
        mute?: boolean | null;
        deaf?: boolean | null;
        access_token: string;
        flags?: number | null;
    };
    userId: SnowflakeType;
};

export type AddGuildMemberResponse = GuildMemberResponse | void;

export type DeleteGuildMemberData = {
    guildId: SnowflakeType;
    userId: SnowflakeType;
};

export type DeleteGuildMemberResponse = void;

export type UpdateGuildMemberData = {
    guildId: SnowflakeType;
    requestBody: {
        nick?: string | null;
        roles?: Array<(null | SnowflakeType)> | null;
        mute?: boolean | null;
        deaf?: boolean | null;
        channel_id?: null | SnowflakeType;
        communication_disabled_until?: string | null;
        flags?: number | null;
    };
    userId: SnowflakeType;
};

export type UpdateGuildMemberResponse = GuildMemberResponse | void;

export type ListGuildMembersData = {
    after?: number;
    guildId: SnowflakeType;
    limit?: number;
};

export type ListGuildMembersResponse = Array<GuildMemberResponse>;

export type GetGuildPreviewData = {
    guildId: SnowflakeType;
};

export type GetGuildPreviewResponse = GuildPreviewResponse;

export type ListGuildInvitesData = {
    guildId: SnowflakeType;
};

export type ListGuildInvitesResponse = Array<(FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse)> | null;

export type ListGuildVoiceRegionsData = {
    guildId: SnowflakeType;
};

export type ListGuildVoiceRegionsResponse = Array<VoiceRegionResponse> | null;

export type GetGuildEmojiData = {
    emojiId: SnowflakeType;
    guildId: SnowflakeType;
};

export type GetGuildEmojiResponse = EmojiResponse;

export type DeleteGuildEmojiData = {
    emojiId: SnowflakeType;
    guildId: SnowflakeType;
};

export type DeleteGuildEmojiResponse = void;

export type UpdateGuildEmojiData = {
    emojiId: SnowflakeType;
    guildId: SnowflakeType;
    requestBody: {
        name?: string;
        roles?: Array<(null | SnowflakeType)> | null;
    };
};

export type UpdateGuildEmojiResponse = EmojiResponse;

export type ListGuildEmojisData = {
    guildId: SnowflakeType;
};

export type ListGuildEmojisResponse = Array<EmojiResponse> | null;

export type CreateGuildEmojiData = {
    guildId: SnowflakeType;
    requestBody: {
        name: string;
        image: string;
        roles?: Array<(null | SnowflakeType)> | null;
    };
};

export type CreateGuildEmojiResponse = EmojiResponse;

export type GetGuildWidgetSettingsData = {
    guildId: SnowflakeType;
};

export type GetGuildWidgetSettingsResponse = WidgetSettingsResponse;

export type UpdateGuildWidgetSettingsData = {
    guildId: SnowflakeType;
    requestBody: {
        channel_id?: null | SnowflakeType;
        enabled?: boolean | null;
    };
};

export type UpdateGuildWidgetSettingsResponse = WidgetSettingsResponse;

export type DeleteGuildRoleData = {
    guildId: SnowflakeType;
    roleId: SnowflakeType;
};

export type DeleteGuildRoleResponse = void;

export type UpdateGuildRoleData = {
    guildId: SnowflakeType;
    requestBody: {
        name?: string | null;
        permissions?: number | null;
        color?: number | null;
        hoist?: boolean | null;
        mentionable?: boolean | null;
        icon?: string | null;
        unicode_emoji?: string | null;
    };
    roleId: SnowflakeType;
};

export type UpdateGuildRoleResponse = GuildRoleResponse;

export type ListGuildRolesData = {
    guildId: SnowflakeType;
};

export type ListGuildRolesResponse = Array<GuildRoleResponse>;

export type CreateGuildRoleData = {
    guildId: SnowflakeType;
    requestBody: {
        name?: string | null;
        permissions?: number | null;
        color?: number | null;
        hoist?: boolean | null;
        mentionable?: boolean | null;
        icon?: string | null;
        unicode_emoji?: string | null;
    };
};

export type CreateGuildRoleResponse = GuildRoleResponse;

export type BulkUpdateGuildRolesData = {
    guildId: SnowflakeType;
    requestBody: Array<{
        id?: null | SnowflakeType;
        position?: number | null;
    }>;
};

export type BulkUpdateGuildRolesResponse = Array<GuildRoleResponse>;

export type PreviewPruneGuildData = {
    days?: number;
    guildId: SnowflakeType;
    includeRoles?: string | Array<(null | SnowflakeType)>;
};

export type PreviewPruneGuildResponse = GuildPruneResponse;

export type PruneGuildData = {
    guildId: SnowflakeType;
    requestBody: {
        days?: number | null;
        compute_prune_count?: boolean | null;
        include_roles?: string | Array<(null | SnowflakeType)> | null;
    };
};

export type PruneGuildResponse = GuildPruneResponse;

export type GetGuildBanData = {
    guildId: SnowflakeType;
    userId: SnowflakeType;
};

export type GetGuildBanResponse = GuildBanResponse;

export type BanUserFromGuildData = {
    guildId: SnowflakeType;
    requestBody: {
        delete_message_seconds?: number | null;
        delete_message_days?: number | null;
    };
    userId: SnowflakeType;
};

export type BanUserFromGuildResponse = void;

export type UnbanUserFromGuildData = {
    guildId: SnowflakeType;
    userId: SnowflakeType;
};

export type UnbanUserFromGuildResponse = void;

export type ListGuildBansData = {
    after?: SnowflakeType;
    before?: SnowflakeType;
    guildId: SnowflakeType;
    limit?: number;
};

export type ListGuildBansResponse = Array<GuildBanResponse> | null;

export type SetGuildMfaLevelData = {
    guildId: SnowflakeType;
    requestBody: {
        level: GuildMFALevel;
    };
};

export type SetGuildMfaLevelResponse = GuildMFALevelResponse;

export type GetStageInstanceData = {
    channelId: SnowflakeType;
};

export type GetStageInstanceResponse = StageInstanceResponse;

export type DeleteStageInstanceData = {
    channelId: SnowflakeType;
};

export type DeleteStageInstanceResponse = void;

export type UpdateStageInstanceData = {
    channelId: SnowflakeType;
    requestBody: {
        topic?: string;
        privacy_level?: StageInstancesPrivacyLevels;
    };
};

export type UpdateStageInstanceResponse = StageInstanceResponse;

export type GetApplicationData = {
    applicationId: SnowflakeType;
};

export type GetApplicationResponse = PrivateApplicationResponse;

export type UpdateApplicationData = {
    applicationId: SnowflakeType;
    requestBody: ApplicationFormPartial;
};

export type UpdateApplicationResponse = PrivateApplicationResponse;

export type GetWebhookByTokenData = {
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type GetWebhookByTokenResponse = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type ExecuteWebhookData = {
    requestBody: IncomingWebhookRequestPartial | IncomingWebhookUpdateRequestPartial;
    threadId?: SnowflakeType;
    wait?: boolean;
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type ExecuteWebhookResponse = MessageResponse | void;

export type DeleteWebhookByTokenData = {
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type DeleteWebhookByTokenResponse = void;

export type UpdateWebhookByTokenData = {
    requestBody: {
        name?: string;
        avatar?: string | null;
    };
    webhookId: SnowflakeType;
    webhookToken: string;
};

export type UpdateWebhookByTokenResponse = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type GetStickerData = {
    stickerId: SnowflakeType;
};

export type GetStickerResponse = GuildStickerResponse | StandardStickerResponse;

export type GetWebhookData = {
    webhookId: SnowflakeType;
};

export type GetWebhookResponse = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type DeleteWebhookData = {
    webhookId: SnowflakeType;
};

export type DeleteWebhookResponse = void;

export type UpdateWebhookData = {
    requestBody: {
        name?: string;
        avatar?: string | null;
        channel_id?: null | SnowflakeType;
    };
    webhookId: SnowflakeType;
};

export type UpdateWebhookResponse = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type GetChannelData = {
    channelId: SnowflakeType;
};

export type GetChannelResponse = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type DeleteChannelData = {
    channelId: SnowflakeType;
};

export type DeleteChannelResponse = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type UpdateChannelData = {
    channelId: SnowflakeType;
    requestBody: PrivateChannelRequestPartial | UpdateGuildChannelRequestPartial | UpdateThreadRequestPartial;
};

export type UpdateChannelResponse = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type InviteResolveData = {
    code: string;
    guildScheduledEventId?: SnowflakeType;
    withCounts?: boolean;
};

export type InviteResolveResponse = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type InviteRevokeData = {
    code: string;
};

export type InviteRevokeResponse = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type GetGuildData = {
    guildId: SnowflakeType;
    withCounts?: boolean;
};

export type GetGuildResponse = GuildWithCountsResponse;

export type DeleteGuildData = {
    guildId: SnowflakeType;
};

export type DeleteGuildResponse = void;

export type UpdateGuildData = {
    guildId: SnowflakeType;
    requestBody: GuildPatchRequestPartial;
};

export type UpdateGuildResponse = GuildResponse;

export type GetUserData = {
    userId: SnowflakeType;
};

export type GetUserResponse = UserResponse;

export type $OpenApiTs = {
    '/oauth2/applications/@me': {
        get: {
            res: {
                /**
                 * 200 response for get_my_oauth2_application
                 */
                200: PrivateApplicationResponse;
            };
        };
    };
    '/users/@me/connections': {
        get: {
            res: {
                /**
                 * 200 response for list_my_connections
                 */
                200: Array<ConnectedAccountResponse> | null;
            };
        };
    };
    '/users/@me/channels': {
        post: {
            req: {
                requestBody: CreatePrivateChannelRequest;
            };
            res: {
                /**
                 * 200 response for create_dm
                 */
                200: PrivateChannelResponse | PrivateGroupChannelResponse;
            };
        };
    };
    '/users/@me/guilds': {
        get: {
            req: {
                after?: SnowflakeType;
                before?: SnowflakeType;
                limit?: number;
                withCounts?: boolean;
            };
            res: {
                /**
                 * 200 response for list_my_guilds
                 */
                200: Array<MyGuildResponse> | null;
            };
        };
    };
    '/applications/@me': {
        get: {
            res: {
                /**
                 * 200 response for get_my_application
                 */
                200: PrivateApplicationResponse;
            };
        };
        patch: {
            req: {
                requestBody: ApplicationFormPartial;
            };
            res: {
                /**
                 * 200 response for update_my_application
                 */
                200: PrivateApplicationResponse;
            };
        };
    };
    '/gateway/bot': {
        get: {
            res: {
                /**
                 * 200 response for get_bot_gateway
                 */
                200: GatewayBotResponse;
            };
        };
    };
    '/oauth2/keys': {
        get: {
            res: {
                /**
                 * 200 response for get_public_keys
                 */
                200: OAuth2GetKeys;
            };
        };
    };
    '/oauth2/@me': {
        get: {
            res: {
                /**
                 * 200 response for get_my_oauth2_authorization
                 */
                200: OAuth2GetAuthorizationResponse;
            };
        };
    };
    '/voice/regions': {
        get: {
            res: {
                /**
                 * 200 response for list_voice_regions
                 */
                200: Array<VoiceRegionResponse> | null;
            };
        };
    };
    '/users/@me': {
        get: {
            res: {
                /**
                 * 200 response for get_my_user
                 */
                200: UserPIIResponse;
            };
        };
        patch: {
            req: {
                requestBody: BotAccountPatchRequest;
            };
            res: {
                /**
                 * 200 response for update_my_user
                 */
                200: UserPIIResponse;
            };
        };
    };
    '/stage-instances': {
        post: {
            req: {
                requestBody: {
                    topic: string;
                    channel_id: SnowflakeType;
                    privacy_level?: null | StageInstancesPrivacyLevels;
                    guild_scheduled_event_id?: null | SnowflakeType;
                    send_start_notification?: boolean | null;
                };
            };
            res: {
                /**
                 * 200 response for create_stage_instance
                 */
                200: StageInstanceResponse;
            };
        };
    };
    '/sticker-packs': {
        get: {
            res: {
                /**
                 * 200 response for list_sticker_packs
                 */
                200: StickerPackCollectionResponse;
            };
        };
    };
    '/gateway': {
        get: {
            res: {
                /**
                 * 200 response for get_gateway
                 */
                200: GatewayResponse;
            };
        };
    };
    '/guilds': {
        post: {
            req: {
                requestBody: GuildCreateRequest;
            };
            res: {
                /**
                 * 201 response for create_guild
                 */
                201: GuildResponse;
            };
        };
    };
    '/channels/{channel_id}/users/@me/threads/archived/private': {
        get: {
            req: {
                before?: SnowflakeType;
                channelId: SnowflakeType;
                limit?: number;
            };
            res: {
                /**
                 * 200 response for list_my_private_archived_threads
                 */
                200: ThreadsResponse;
            };
        };
    };
    '/applications/{application_id}/guilds/{guild_id}/commands/permissions': {
        get: {
            req: {
                applicationId: SnowflakeType;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_application_command_permissions
                 */
                200: Array<CommandPermissionsResponse>;
            };
        };
    };
    '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions': {
        get: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_application_command_permissions
                 */
                200: CommandPermissionsResponse;
            };
        };
        put: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
                guildId: SnowflakeType;
                requestBody: {
                    permissions?: Array<ApplicationCommandPermission> | null;
                };
            };
            res: {
                /**
                 * 200 response for set_guild_application_command_permissions
                 */
                200: CommandPermissionsResponse;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me': {
        put: {
            req: {
                channelId: SnowflakeType;
                emojiName: string;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for add_my_message_reaction
                 */
                204: void;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                emojiName: string;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_my_message_reaction
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/threads/archived/private': {
        get: {
            req: {
                before?: string;
                channelId: SnowflakeType;
                limit?: number;
            };
            res: {
                /**
                 * 200 response for list_private_archived_threads
                 */
                200: ThreadsResponse;
            };
        };
    };
    '/channels/{channel_id}/threads/archived/public': {
        get: {
            req: {
                before?: string;
                channelId: SnowflakeType;
                limit?: number;
            };
            res: {
                /**
                 * 200 response for list_public_archived_threads
                 */
                200: ThreadsResponse;
            };
        };
    };
    '/users/@me/applications/{application_id}/role-connection': {
        get: {
            req: {
                applicationId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_application_user_role_connection
                 */
                200: ApplicationUserRoleConnectionResponse;
            };
        };
        put: {
            req: {
                applicationId: SnowflakeType;
                requestBody: {
                    platform_name?: string | null;
                    platform_username?: string | null;
                    metadata?: {
                        [key: string]: (string);
                    } | null;
                };
            };
            res: {
                /**
                 * 200 response for update_application_user_role_connection
                 */
                200: ApplicationUserRoleConnectionResponse;
            };
        };
    };
    '/users/@me/guilds/{guild_id}/member': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_my_guild_member
                 */
                200: PrivateGuildMemberResponse;
            };
        };
    };
    '/applications/{application_id}/role-connections/metadata': {
        get: {
            req: {
                applicationId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_application_role_connections_metadata
                 */
                200: Array<ApplicationRoleConnectionsMetadataItemResponse> | null;
            };
        };
        put: {
            req: {
                applicationId: SnowflakeType;
                requestBody: Array<ApplicationRoleConnectionsMetadataItemRequest> | null;
            };
            res: {
                /**
                 * 200 response for update_application_role_connections_metadata
                 */
                200: Array<ApplicationRoleConnectionsMetadataItemResponse> | null;
            };
        };
    };
    '/applications/{application_id}/entitlements/{entitlement_id}/consume': {
        post: {
            req: {
                applicationId: SnowflakeType;
                entitlementId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for consume_entitlement
                 */
                204: void;
            };
        };
    };
    '/applications/{application_id}/guilds/{guild_id}/commands/{command_id}': {
        get: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_application_command
                 */
                200: ApplicationCommandResponse;
            };
        };
        delete: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_application_command
                 */
                204: void;
            };
        };
        patch: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
                guildId: SnowflakeType;
                requestBody: ApplicationCommandPatchRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_guild_application_command
                 */
                200: ApplicationCommandResponse;
            };
        };
    };
    '/applications/{application_id}/guilds/{guild_id}/commands': {
        get: {
            req: {
                applicationId: SnowflakeType;
                guildId: SnowflakeType;
                withLocalizations?: boolean;
            };
            res: {
                /**
                 * 200 response for list_guild_application_commands
                 */
                200: Array<ApplicationCommandResponse> | null;
            };
        };
        put: {
            req: {
                applicationId: SnowflakeType;
                guildId: SnowflakeType;
                requestBody: Array<ApplicationCommandUpdateRequest> | null;
            };
            res: {
                /**
                 * 200 response for bulk_set_guild_application_commands
                 */
                200: Array<ApplicationCommandResponse> | null;
            };
        };
        post: {
            req: {
                applicationId: SnowflakeType;
                guildId: SnowflakeType;
                requestBody: ApplicationCommandCreateRequest;
            };
            res: {
                /**
                 * 200 response for create_guild_application_command
                 */
                200: ApplicationCommandResponse;
            };
        };
    };
    '/channels/{channel_id}/thread-members/@me': {
        put: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for join_thread
                 */
                204: void;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for leave_thread
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/messages/bulk-delete': {
        post: {
            req: {
                channelId: SnowflakeType;
                requestBody: {
                    messages: Array<SnowflakeType>;
                };
            };
            res: {
                /**
                 * 204 response for bulk_delete_messages
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/{user_id}': {
        delete: {
            req: {
                channelId: SnowflakeType;
                emojiName: string;
                messageId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_user_message_reaction
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}': {
        get: {
            req: {
                after?: SnowflakeType;
                channelId: SnowflakeType;
                emojiName: string;
                limit?: number;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_message_reactions_by_emoji
                 */
                200: Array<UserResponse>;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                emojiName: string;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_all_message_reactions_by_emoji
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}/reactions': {
        delete: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_all_message_reactions
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}/crosspost': {
        post: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for crosspost_message
                 */
                200: MessageResponse;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}/threads': {
        post: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
                requestBody: CreateTextThreadWithMessageRequest;
            };
            res: {
                /**
                 * 201 response for create_thread_from_message
                 */
                201: ThreadResponse;
            };
        };
    };
    '/webhooks/{webhook_id}/{webhook_token}/messages/@original': {
        get: {
            req: {
                threadId?: SnowflakeType;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for get_original_webhook_message
                 */
                200: MessageResponse;
            };
        };
        delete: {
            req: {
                threadId?: SnowflakeType;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 204 response for delete_original_webhook_message
                 */
                204: void;
            };
        };
        patch: {
            req: {
                requestBody: IncomingWebhookUpdateRequestPartial;
                threadId?: SnowflakeType;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for update_original_webhook_message
                 */
                200: MessageResponse;
            };
        };
    };
    '/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users': {
        get: {
            req: {
                after?: SnowflakeType;
                before?: SnowflakeType;
                guildId: SnowflakeType;
                guildScheduledEventId: SnowflakeType;
                limit?: number;
                withMember?: boolean;
            };
            res: {
                /**
                 * 200 response for list_guild_scheduled_event_users
                 */
                200: Array<ScheduledEventUserResponse> | null;
            };
        };
    };
    '/guilds/{guild_id}/auto-moderation/rules/{rule_id}': {
        get: {
            req: {
                guildId: SnowflakeType;
                ruleId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_auto_moderation_rule
                 */
                200: DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
                ruleId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_auto_moderation_rule
                 */
                204: void;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: DefaultKeywordListUpsertRequestPartial | KeywordUpsertRequestPartial | MLSpamUpsertRequestPartial | MentionSpamUpsertRequestPartial;
                ruleId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for update_auto_moderation_rule
                 */
                200: DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;
            };
        };
    };
    '/guilds/{guild_id}/auto-moderation/rules': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_auto_moderation_rules
                 */
                200: Array<(DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse | null)> | null;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: DefaultKeywordListUpsertRequest | KeywordUpsertRequest | MLSpamUpsertRequest | MentionSpamUpsertRequest;
            };
            res: {
                /**
                 * 200 response for create_auto_moderation_rule
                 */
                200: DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;
            };
        };
    };
    '/guilds/{guild_id}/voice-states/@me': {
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    request_to_speak_timestamp?: string | null;
                    suppress?: boolean | null;
                    channel_id?: null | SnowflakeType;
                };
            };
            res: {
                /**
                 * 204 response for update_self_voice_state
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/members/search': {
        get: {
            req: {
                guildId: SnowflakeType;
                limit: number;
                query: string;
            };
            res: {
                /**
                 * 200 response for search_guild_members
                 */
                200: Array<GuildMemberResponse>;
            };
        };
    };
    '/guilds/{guild_id}/threads/active': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_active_guild_threads
                 */
                200: ThreadsResponse;
            };
        };
    };
    '/guilds/{guild_id}/members/@me': {
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    nick?: string | null;
                };
            };
            res: {
                /**
                 * 200 response for update_my_guild_member
                 */
                200: PrivateGuildMemberResponse;
            };
        };
    };
    '/guilds/{guild_id}/members/{user_id}/roles/{role_id}': {
        put: {
            req: {
                guildId: SnowflakeType;
                roleId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for add_guild_member_role
                 */
                204: void;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
                roleId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_member_role
                 */
                204: void;
            };
        };
    };
    '/users/@me/guilds/{guild_id}': {
        delete: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for leave_guild
                 */
                204: void;
            };
        };
    };
    '/applications/{application_id}/entitlements/{entitlement_id}': {
        get: {
            req: {
                applicationId: SnowflakeType;
                entitlementId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_entitlement
                 */
                200: EntitlementResponse;
            };
        };
        delete: {
            req: {
                applicationId: SnowflakeType;
                entitlementId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_entitlement
                 */
                204: void;
            };
        };
    };
    '/applications/{application_id}/entitlements': {
        get: {
            req: {
                after?: SnowflakeType;
                applicationId: SnowflakeType;
                before?: SnowflakeType;
                excludeEnded?: boolean;
                guildId?: SnowflakeType;
                limit?: number;
                onlyActive?: boolean;
                skuIds: string | Array<(null | SnowflakeType)>;
                userId?: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_entitlements
                 */
                200: Array<(null | EntitlementResponse)>;
            };
        };
        post: {
            req: {
                applicationId: SnowflakeType;
                requestBody: CreateEntitlementRequestData;
            };
            res: {
                /**
                 * 200 response for create_entitlement
                 */
                200: EntitlementResponse;
            };
        };
    };
    '/applications/{application_id}/commands/{command_id}': {
        get: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_application_command
                 */
                200: ApplicationCommandResponse;
            };
        };
        delete: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_application_command
                 */
                204: void;
            };
        };
        patch: {
            req: {
                applicationId: SnowflakeType;
                commandId: SnowflakeType;
                requestBody: ApplicationCommandPatchRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_application_command
                 */
                200: ApplicationCommandResponse;
            };
        };
    };
    '/applications/{application_id}/commands': {
        get: {
            req: {
                applicationId: SnowflakeType;
                withLocalizations?: boolean;
            };
            res: {
                /**
                 * 200 response for list_application_commands
                 */
                200: Array<ApplicationCommandResponse> | null;
            };
        };
        put: {
            req: {
                applicationId: SnowflakeType;
                requestBody: Array<ApplicationCommandUpdateRequest> | null;
            };
            res: {
                /**
                 * 200 response for bulk_set_application_commands
                 */
                200: Array<ApplicationCommandResponse> | null;
            };
        };
        post: {
            req: {
                applicationId: SnowflakeType;
                requestBody: ApplicationCommandCreateRequest;
            };
            res: {
                /**
                 * 200 response for create_application_command
                 */
                200: ApplicationCommandResponse;
            };
        };
    };
    '/interactions/{interaction_id}/{interaction_token}/callback': {
        post: {
            req: {
                interactionId: SnowflakeType;
                interactionToken: string;
                requestBody: ApplicationCommandAutocompleteCallbackRequest | CreateMessageInteractionCallbackRequest | ModalInteractionCallbackRequest | PongInteractionCallbackRequest | UpdateMessageInteractionCallbackRequest;
            };
            res: {
                /**
                 * 204 response for create_interaction_response
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/thread-members/{user_id}': {
        get: {
            req: {
                channelId: SnowflakeType;
                userId: SnowflakeType;
                withMember?: boolean;
            };
            res: {
                /**
                 * 200 response for get_thread_member
                 */
                200: ThreadMemberResponse;
            };
        };
        put: {
            req: {
                channelId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for add_thread_member
                 */
                204: void;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_thread_member
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/thread-members': {
        get: {
            req: {
                after?: SnowflakeType;
                channelId: SnowflakeType;
                limit?: number;
                withMember?: boolean;
            };
            res: {
                /**
                 * 200 response for list_thread_members
                 */
                200: Array<ThreadMemberResponse>;
            };
        };
    };
    '/channels/{channel_id}/permissions/{overwrite_id}': {
        put: {
            req: {
                channelId: SnowflakeType;
                overwriteId: SnowflakeType;
                requestBody: {
                    type?: null | ChannelPermissionOverwrites;
                    allow?: number | null;
                    deny?: number | null;
                };
            };
            res: {
                /**
                 * 204 response for set_channel_permission_overwrite
                 */
                204: void;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                overwriteId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_channel_permission_overwrite
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/recipients/{user_id}': {
        put: {
            req: {
                channelId: SnowflakeType;
                requestBody: {
                    access_token?: string | null;
                    nick?: string | null;
                };
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 201 response for add_group_dm_user
                 */
                201: PrivateChannelResponse | PrivateGroupChannelResponse;
                /**
                 * 204 response for add_group_dm_user
                 */
                204: void;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_group_dm_user
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/followers': {
        post: {
            req: {
                channelId: SnowflakeType;
                requestBody: {
                    webhook_channel_id: SnowflakeType;
                };
            };
            res: {
                /**
                 * 200 response for follow_channel
                 */
                200: ChannelFollowerResponse;
            };
        };
    };
    '/channels/{channel_id}/messages/{message_id}': {
        get: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_message
                 */
                200: MessageResponse;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_message
                 */
                204: void;
            };
        };
        patch: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
                requestBody: MessageEditRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_message
                 */
                200: MessageResponse;
            };
        };
    };
    '/channels/{channel_id}/messages': {
        get: {
            req: {
                after?: SnowflakeType;
                around?: SnowflakeType;
                before?: SnowflakeType;
                channelId: SnowflakeType;
                limit?: number;
            };
            res: {
                /**
                 * 200 response for list_messages
                 */
                200: Array<MessageResponse> | null;
            };
        };
        post: {
            req: {
                channelId: SnowflakeType;
                requestBody: MessageCreateRequest;
            };
            res: {
                /**
                 * 200 response for create_message
                 */
                200: MessageResponse;
            };
        };
    };
    '/channels/{channel_id}/webhooks': {
        get: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_channel_webhooks
                 */
                200: Array<(ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse)> | null;
            };
        };
        post: {
            req: {
                channelId: SnowflakeType;
                requestBody: {
                    name: string;
                    avatar?: string | null;
                };
            };
            res: {
                /**
                 * 200 response for create_webhook
                 */
                200: GuildIncomingWebhookResponse;
            };
        };
    };
    '/channels/{channel_id}/invites': {
        get: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_channel_invites
                 */
                200: Array<(FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse)> | null;
            };
        };
        post: {
            req: {
                channelId: SnowflakeType;
                requestBody: CreateGroupDMInviteRequest | CreateGuildInviteRequest;
            };
            res: {
                /**
                 * 200 response for create_channel_invite
                 */
                200: FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;
                /**
                 * 204 response for create_channel_invite
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/threads': {
        post: {
            req: {
                channelId: SnowflakeType;
                requestBody: CreateForumThreadRequest | CreateTextThreadWithoutMessageRequest;
            };
            res: {
                /**
                 * 201 response for create_thread
                 */
                201: CreatedThreadResponse;
            };
        };
    };
    '/channels/{channel_id}/typing': {
        post: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for trigger_typing_indicator
                 */
                200: TypingIndicatorResponse;
                /**
                 * 204 response for trigger_typing_indicator
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/pins/{message_id}': {
        put: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for pin_message
                 */
                204: void;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
                messageId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for unpin_message
                 */
                204: void;
            };
        };
    };
    '/channels/{channel_id}/pins': {
        get: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_pinned_messages
                 */
                200: Array<MessageResponse> | null;
            };
        };
    };
    '/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}': {
        get: {
            req: {
                messageId: SnowflakeType;
                threadId?: SnowflakeType;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for get_webhook_message
                 */
                200: MessageResponse;
            };
        };
        delete: {
            req: {
                messageId: SnowflakeType;
                threadId?: SnowflakeType;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 204 response for delete_webhook_message
                 */
                204: void;
            };
        };
        patch: {
            req: {
                messageId: SnowflakeType;
                requestBody: IncomingWebhookUpdateRequestPartial;
                threadId?: SnowflakeType;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for update_webhook_message
                 */
                200: MessageResponse;
            };
        };
    };
    '/webhooks/{webhook_id}/{webhook_token}/github': {
        post: {
            req: {
                requestBody: GithubWebhook;
                threadId?: SnowflakeType;
                wait?: boolean;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 204 response for execute_github_compatible_webhook
                 */
                204: void;
            };
        };
    };
    '/webhooks/{webhook_id}/{webhook_token}/slack': {
        post: {
            req: {
                requestBody: SlackWebhook;
                threadId?: SnowflakeType;
                wait?: boolean;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for execute_slack_compatible_webhook
                 */
                200: string | null;
            };
        };
    };
    '/guilds/templates/{code}': {
        get: {
            req: {
                code: string;
            };
            res: {
                /**
                 * 200 response for get_guild_template
                 */
                200: GuildTemplateResponse;
            };
        };
        post: {
            req: {
                code: string;
                requestBody: {
                    name: string;
                    icon?: string | null;
                };
            };
            res: {
                /**
                 * 201 response for create_guild_from_template
                 */
                201: GuildResponse;
            };
        };
    };
    '/guilds/{guild_id}/new-member-welcome': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_new_member_welcome
                 */
                200: GuildHomeSettingsResponse;
                /**
                 * 204 response for get_guild_new_member_welcome
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}': {
        get: {
            req: {
                guildId: SnowflakeType;
                guildScheduledEventId: SnowflakeType;
                withUserCount?: boolean;
            };
            res: {
                /**
                 * 200 response for get_guild_scheduled_event
                 */
                200: ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
                guildScheduledEventId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_scheduled_event
                 */
                204: void;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                guildScheduledEventId: SnowflakeType;
                requestBody: ExternalScheduledEventPatchRequestPartial | StageScheduledEventPatchRequestPartial | VoiceScheduledEventPatchRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_guild_scheduled_event
                 */
                200: ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;
            };
        };
    };
    '/guilds/{guild_id}/scheduled-events': {
        get: {
            req: {
                guildId: SnowflakeType;
                withUserCount?: boolean;
            };
            res: {
                /**
                 * 200 response for list_guild_scheduled_events
                 */
                200: Array<(ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse)> | null;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: ExternalScheduledEventCreateRequest | StageScheduledEventCreateRequest | VoiceScheduledEventCreateRequest;
            };
            res: {
                /**
                 * 200 response for create_guild_scheduled_event
                 */
                200: ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;
            };
        };
    };
    '/guilds/{guild_id}/welcome-screen': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_welcome_screen
                 */
                200: GuildWelcomeScreenResponse;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: WelcomeScreenPatchRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_guild_welcome_screen
                 */
                200: GuildWelcomeScreenResponse;
            };
        };
    };
    '/guilds/{guild_id}/voice-states/{user_id}': {
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    suppress?: boolean | null;
                    channel_id?: null | SnowflakeType;
                };
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for update_voice_state
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/integrations/{integration_id}': {
        delete: {
            req: {
                guildId: SnowflakeType;
                integrationId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_integration
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/integrations': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_integrations
                 */
                200: Array<(DiscordIntegrationResponse | ExternalConnectionIntegrationResponse | GuildSubscriptionIntegrationResponse)> | null;
            };
        };
    };
    '/guilds/{guild_id}/widget.json': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_widget
                 */
                200: WidgetResponse;
            };
        };
    };
    '/guilds/{guild_id}/onboarding': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guilds_onboarding
                 */
                200: UserGuildOnboardingResponse;
            };
        };
        put: {
            req: {
                guildId: SnowflakeType;
                requestBody: UpdateGuildOnboardingRequest;
            };
            res: {
                /**
                 * 200 response for put_guilds_onboarding
                 */
                200: GuildOnboardingResponse;
            };
        };
    };
    '/guilds/{guild_id}/vanity-url': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_vanity_url
                 */
                200: VanityURLResponse;
            };
        };
    };
    '/guilds/{guild_id}/audit-logs': {
        get: {
            req: {
                actionType?: number;
                after?: SnowflakeType;
                before?: SnowflakeType;
                guildId: SnowflakeType;
                limit?: number;
                targetId?: SnowflakeType;
                userId?: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_audit_log_entries
                 */
                200: GuildAuditLogResponse;
            };
        };
    };
    '/guilds/{guild_id}/widget.png': {
        get: {
            req: {
                guildId: SnowflakeType;
                style?: WidgetImageStyles;
            };
            res: {
                /**
                 * 200 response for get_guild_widget_png
                 */
                200: string;
            };
        };
    };
    '/guilds/{guild_id}/templates/{code}': {
        put: {
            req: {
                code: string;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for sync_guild_template
                 */
                200: GuildTemplateResponse;
            };
        };
        delete: {
            req: {
                code: string;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for delete_guild_template
                 */
                200: GuildTemplateResponse;
            };
        };
        patch: {
            req: {
                code: string;
                guildId: SnowflakeType;
                requestBody: {
                    name?: string;
                    description?: string | null;
                };
            };
            res: {
                /**
                 * 200 response for update_guild_template
                 */
                200: GuildTemplateResponse;
            };
        };
    };
    '/guilds/{guild_id}/templates': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_templates
                 */
                200: Array<GuildTemplateResponse> | null;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    name: string;
                    description?: string | null;
                };
            };
            res: {
                /**
                 * 200 response for create_guild_template
                 */
                200: GuildTemplateResponse;
            };
        };
    };
    '/guilds/{guild_id}/stickers/{sticker_id}': {
        get: {
            req: {
                guildId: SnowflakeType;
                stickerId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_sticker
                 */
                200: GuildStickerResponse;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
                stickerId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_sticker
                 */
                204: void;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    name?: string;
                    tags?: string;
                    description?: string | null;
                };
                stickerId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for update_guild_sticker
                 */
                200: GuildStickerResponse;
            };
        };
    };
    '/guilds/{guild_id}/bulk-ban': {
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    user_ids: Array<SnowflakeType>;
                    delete_message_seconds?: number | null;
                };
            };
            res: {
                /**
                 * 200 response for bulk_ban_users_from_guild
                 */
                200: BulkBanUsersResponse;
            };
        };
    };
    '/guilds/{guild_id}/stickers': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_stickers
                 */
                200: Array<GuildStickerResponse>;
            };
        };
        post: {
            req: {
                formData: {
                    name: string;
                    tags: string;
                    description?: string | null;
                    file: string;
                };
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 201 response for create_guild_sticker
                 */
                201: GuildStickerResponse;
            };
        };
    };
    '/guilds/{guild_id}/webhooks': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_webhooks
                 */
                200: Array<(ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse)> | null;
            };
        };
    };
    '/guilds/{guild_id}/channels': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_channels
                 */
                200: Array<(GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse)> | null;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: CreateGuildChannelRequest;
            };
            res: {
                /**
                 * 201 response for create_guild_channel
                 */
                201: GuildChannelResponse;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: Array<{
                    id?: SnowflakeType;
                    position?: number | null;
                    parent_id?: null | SnowflakeType;
                    lock_permissions?: boolean | null;
                }>;
            };
            res: {
                /**
                 * 204 response for bulk_update_guild_channels
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/members/{user_id}': {
        get: {
            req: {
                guildId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_member
                 */
                200: GuildMemberResponse;
            };
        };
        put: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    nick?: string | null;
                    roles?: Array<(null | SnowflakeType)> | null;
                    mute?: boolean | null;
                    deaf?: boolean | null;
                    access_token: string;
                    flags?: number | null;
                };
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 201 response for add_guild_member
                 */
                201: GuildMemberResponse;
                /**
                 * 204 response for add_guild_member
                 */
                204: void;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_member
                 */
                204: void;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    nick?: string | null;
                    roles?: Array<(null | SnowflakeType)> | null;
                    mute?: boolean | null;
                    deaf?: boolean | null;
                    channel_id?: null | SnowflakeType;
                    communication_disabled_until?: string | null;
                    flags?: number | null;
                };
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for update_guild_member
                 */
                200: GuildMemberResponse;
                /**
                 * 204 response for update_guild_member
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/members': {
        get: {
            req: {
                after?: number;
                guildId: SnowflakeType;
                limit?: number;
            };
            res: {
                /**
                 * 200 response for list_guild_members
                 */
                200: Array<GuildMemberResponse>;
            };
        };
    };
    '/guilds/{guild_id}/preview': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_preview
                 */
                200: GuildPreviewResponse;
            };
        };
    };
    '/guilds/{guild_id}/invites': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_invites
                 */
                200: Array<(FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse)> | null;
            };
        };
    };
    '/guilds/{guild_id}/regions': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_voice_regions
                 */
                200: Array<VoiceRegionResponse> | null;
            };
        };
    };
    '/guilds/{guild_id}/emojis/{emoji_id}': {
        get: {
            req: {
                emojiId: SnowflakeType;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_emoji
                 */
                200: EmojiResponse;
            };
        };
        delete: {
            req: {
                emojiId: SnowflakeType;
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_emoji
                 */
                204: void;
            };
        };
        patch: {
            req: {
                emojiId: SnowflakeType;
                guildId: SnowflakeType;
                requestBody: {
                    name?: string;
                    roles?: Array<(null | SnowflakeType)> | null;
                };
            };
            res: {
                /**
                 * 200 response for update_guild_emoji
                 */
                200: EmojiResponse;
            };
        };
    };
    '/guilds/{guild_id}/emojis': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_emojis
                 */
                200: Array<EmojiResponse> | null;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    name: string;
                    image: string;
                    roles?: Array<(null | SnowflakeType)> | null;
                };
            };
            res: {
                /**
                 * 201 response for create_guild_emoji
                 */
                201: EmojiResponse;
            };
        };
    };
    '/guilds/{guild_id}/widget': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_widget_settings
                 */
                200: WidgetSettingsResponse;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    channel_id?: null | SnowflakeType;
                    enabled?: boolean | null;
                };
            };
            res: {
                /**
                 * 200 response for update_guild_widget_settings
                 */
                200: WidgetSettingsResponse;
            };
        };
    };
    '/guilds/{guild_id}/roles/{role_id}': {
        delete: {
            req: {
                guildId: SnowflakeType;
                roleId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild_role
                 */
                204: void;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    name?: string | null;
                    permissions?: number | null;
                    color?: number | null;
                    hoist?: boolean | null;
                    mentionable?: boolean | null;
                    icon?: string | null;
                    unicode_emoji?: string | null;
                };
                roleId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for update_guild_role
                 */
                200: GuildRoleResponse;
            };
        };
    };
    '/guilds/{guild_id}/roles': {
        get: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for list_guild_roles
                 */
                200: Array<GuildRoleResponse>;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    name?: string | null;
                    permissions?: number | null;
                    color?: number | null;
                    hoist?: boolean | null;
                    mentionable?: boolean | null;
                    icon?: string | null;
                    unicode_emoji?: string | null;
                };
            };
            res: {
                /**
                 * 200 response for create_guild_role
                 */
                200: GuildRoleResponse;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: Array<{
                    id?: null | SnowflakeType;
                    position?: number | null;
                }>;
            };
            res: {
                /**
                 * 200 response for bulk_update_guild_roles
                 */
                200: Array<GuildRoleResponse>;
            };
        };
    };
    '/guilds/{guild_id}/prune': {
        get: {
            req: {
                days?: number;
                guildId: SnowflakeType;
                includeRoles?: string | Array<(null | SnowflakeType)>;
            };
            res: {
                /**
                 * 200 response for preview_prune_guild
                 */
                200: GuildPruneResponse;
            };
        };
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    days?: number | null;
                    compute_prune_count?: boolean | null;
                    include_roles?: string | Array<(null | SnowflakeType)> | null;
                };
            };
            res: {
                /**
                 * 200 response for prune_guild
                 */
                200: GuildPruneResponse;
            };
        };
    };
    '/guilds/{guild_id}/bans/{user_id}': {
        get: {
            req: {
                guildId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_guild_ban
                 */
                200: GuildBanResponse;
            };
        };
        put: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    delete_message_seconds?: number | null;
                    delete_message_days?: number | null;
                };
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for ban_user_from_guild
                 */
                204: void;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for unban_user_from_guild
                 */
                204: void;
            };
        };
    };
    '/guilds/{guild_id}/bans': {
        get: {
            req: {
                after?: SnowflakeType;
                before?: SnowflakeType;
                guildId: SnowflakeType;
                limit?: number;
            };
            res: {
                /**
                 * 200 response for list_guild_bans
                 */
                200: Array<GuildBanResponse> | null;
            };
        };
    };
    '/guilds/{guild_id}/mfa': {
        post: {
            req: {
                guildId: SnowflakeType;
                requestBody: {
                    level: GuildMFALevel;
                };
            };
            res: {
                /**
                 * 200 response for set_guild_mfa_level
                 */
                200: GuildMFALevelResponse;
            };
        };
    };
    '/stage-instances/{channel_id}': {
        get: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_stage_instance
                 */
                200: StageInstanceResponse;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_stage_instance
                 */
                204: void;
            };
        };
        patch: {
            req: {
                channelId: SnowflakeType;
                requestBody: {
                    topic?: string;
                    privacy_level?: StageInstancesPrivacyLevels;
                };
            };
            res: {
                /**
                 * 200 response for update_stage_instance
                 */
                200: StageInstanceResponse;
            };
        };
    };
    '/applications/{application_id}': {
        get: {
            req: {
                applicationId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_application
                 */
                200: PrivateApplicationResponse;
            };
        };
        patch: {
            req: {
                applicationId: SnowflakeType;
                requestBody: ApplicationFormPartial;
            };
            res: {
                /**
                 * 200 response for update_application
                 */
                200: PrivateApplicationResponse;
            };
        };
    };
    '/webhooks/{webhook_id}/{webhook_token}': {
        get: {
            req: {
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for get_webhook_by_token
                 */
                200: ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;
            };
        };
        post: {
            req: {
                requestBody: IncomingWebhookRequestPartial | IncomingWebhookUpdateRequestPartial;
                threadId?: SnowflakeType;
                wait?: boolean;
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for execute_webhook
                 */
                200: MessageResponse;
                /**
                 * 204 response for execute_webhook
                 */
                204: void;
            };
        };
        delete: {
            req: {
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 204 response for delete_webhook_by_token
                 */
                204: void;
            };
        };
        patch: {
            req: {
                requestBody: {
                    name?: string;
                    avatar?: string | null;
                };
                webhookId: SnowflakeType;
                webhookToken: string;
            };
            res: {
                /**
                 * 200 response for update_webhook_by_token
                 */
                200: ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;
            };
        };
    };
    '/stickers/{sticker_id}': {
        get: {
            req: {
                stickerId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_sticker
                 */
                200: GuildStickerResponse | StandardStickerResponse;
            };
        };
    };
    '/webhooks/{webhook_id}': {
        get: {
            req: {
                webhookId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_webhook
                 */
                200: ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;
            };
        };
        delete: {
            req: {
                webhookId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_webhook
                 */
                204: void;
            };
        };
        patch: {
            req: {
                requestBody: {
                    name?: string;
                    avatar?: string | null;
                    channel_id?: null | SnowflakeType;
                };
                webhookId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for update_webhook
                 */
                200: ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;
            };
        };
    };
    '/channels/{channel_id}': {
        get: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_channel
                 */
                200: GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;
            };
        };
        delete: {
            req: {
                channelId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for delete_channel
                 */
                200: GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;
            };
        };
        patch: {
            req: {
                channelId: SnowflakeType;
                requestBody: PrivateChannelRequestPartial | UpdateGuildChannelRequestPartial | UpdateThreadRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_channel
                 */
                200: GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;
            };
        };
    };
    '/invites/{code}': {
        get: {
            req: {
                code: string;
                guildScheduledEventId?: SnowflakeType;
                withCounts?: boolean;
            };
            res: {
                /**
                 * 200 response for invite_resolve
                 */
                200: FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;
            };
        };
        delete: {
            req: {
                code: string;
            };
            res: {
                /**
                 * 200 response for invite_revoke
                 */
                200: FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;
            };
        };
    };
    '/guilds/{guild_id}': {
        get: {
            req: {
                guildId: SnowflakeType;
                withCounts?: boolean;
            };
            res: {
                /**
                 * 200 response for get_guild
                 */
                200: GuildWithCountsResponse;
            };
        };
        delete: {
            req: {
                guildId: SnowflakeType;
            };
            res: {
                /**
                 * 204 response for delete_guild
                 */
                204: void;
            };
        };
        patch: {
            req: {
                guildId: SnowflakeType;
                requestBody: GuildPatchRequestPartial;
            };
            res: {
                /**
                 * 200 response for update_guild
                 */
                200: GuildResponse;
            };
        };
    };
    '/users/{user_id}': {
        get: {
            req: {
                userId: SnowflakeType;
            };
            res: {
                /**
                 * 200 response for get_user
                 */
                200: UserResponse;
            };
        };
    };
};