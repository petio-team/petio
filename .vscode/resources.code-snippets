{
	"Generates a new resource entity": {
		"scope": "typescript",
		"prefix": "gre",
		"body": [
		  "import { nanoid } from 'napi-nanoid';",
		  "",
		  "import { BaseEntity } from '@/infra/entity/entity';",
		  "import {",
		  "  Create${1}Props,",
		  "  ${1}Props,",
		  "} from './types';",
		  "",
		  "/**",
		  " * Represents a ${1} entity.",
		  " */",
		  "export class ${1}Entity extends BaseEntity<${1}Props> {",
		  "  /**",
		  "   * Creates a new ${1} entity.",
		  "   * @param create - The properties to create the ${1} entity.",
		  "   * @returns The newly created ${1} entity.",
		  "   */",
		  "  static create(create: Create${1}Props): ${1}Entity {",
		  "    const id = nanoid();",
		  "    const props: ${1}Props = {",
		  "      ...create,",
		  "    };",
		  "    return new ${1}Entity({ id, props });",
		  "  }",
		  "",
		  "  /**",
		  "   * Validates the ${1} entity.",
		  "   */",
		  "  public validate(): void {}",
		  "}"
		],
		"description": "Generates a new resource entity"
	},
	"Generates a new resource mapper class": {
		"scope": "typescript",
		"prefix": "grm",
		"body": [
		  "import { Mapper } from \"@/infra/entity/mapper\";",
		  "import { Service } from \"diod\";",
		  "import { ${1}SchemaProps } from \"./schema\";",
		  "import { ${1}Entity } from \"./entity\";",
		  "",
		  "/**",
		  " * Mapper class for converting between ${1}Entity and ${1}SchemaProps.",
		  " */",
		  "@Service()",
		  "export class ${1}Mapper implements Mapper<${1}Entity, ${1}SchemaProps, any> {",
		  "  /**",
		  "   * Converts a ${1}Entity to a ${1}SchemaProps.",
		  "   * @param entity - The entity to convert.",
		  "   * @returns The converted entity.",
		  "   */",
		  "  toPeristence(entity: ${1}Entity): ${1}SchemaProps {",
		  "    const copy = entity.getProps();",
		  "    return {",
		  "      id: copy.id,",
		  "      // TODO: fill in the rest",
		  "      createdAt: copy.createdAt,",
		  "      updatedAt: copy.updatedAt,",
		  "    };",
		  "  }",
		  "",
		  "  /**",
		  "   * Converts a ${1}SchemaProps to a ${1}Entity.",
		  "   * @param record - The record to convert.",
		  "   * @returns The converted record.",
		  "   */",
		  "  toEntity(record: ${1}SchemaProps): ${1}Entity {",
		  "    return new ${1}Entity({",
		  "      id: record.id,",
		  "      props: {",
		  "        // TODO: fill in the rest",
		  "      },",
		  "      createdAt: record.createdAt,",
		  "      updatedAt: record.updatedAt,",
		  "    });",
		  "  }",
		  "",
		  "  /**",
		  "   * Converts a ${1}Entity to a response object.",
		  "   * @param entity - The entity to convert.",
		  "   * @returns The converted response.",
		  "   */",
		  "  toResponse(entity: ${1}Entity): any {",
		  "    const copy = entity.getProps();",
		  "    return {",
		  "      id: copy.id,",
		  "      // TODO: fill in the rest",
		  "      createdAt: copy.createdAt,",
		  "      updatedAt: copy.updatedAt,",
		  "    };",
		  "  }",
		  "}",
		  ""
		],
		"description": "Generates a new mapper class"
	},
	"Generates a new resource database repository": {
		"scope": "typescript",
		"prefix": "grdr",
		"body": [
		  "import { Service } from 'diod';",
		  "",
		  "import { MongooseBaseRepository } from '@/infra/database/base-repository';",
		  "import { MongooseDatabaseConnection } from '@/infra/database/connection';",
		  "import { ${1}Entity } from './entity';",
		  "import { ${1}Mapper } from './mapper';",
		  "import { ${1}Repository } from './repository';",
		  "import { ${1}Schema, ${1}SchemaProps } from './schema';",
		  "",
		  "/**",
		  " * Represents a repository for interacting with the ${1}Entity using Mongoose.",
		  "*/",
		  "@Service()",
		  "export class ${1}MongooseRepository",
		  "  extends MongooseBaseRepository<${1}Entity, ${1}SchemaProps>",
		  "  implements ${1}Repository",
		  "{",
		  "  /**",
		  "   * Represents a ${1}MongooseRepository instance.",
		  "",
		  "   * @param connection - The MongooseDatabaseConnection used to connect to the database.",
		  "   * @param mapper - The ${1}Mapper used to map between entity and schema.",
		  "   */",
		  "  constructor(",
		  "    connection: MongooseDatabaseConnection,",
		  "    mapper: ${1}Mapper,",
		  "  ) {",
		  "    const model = connection.getOrThrow().model(",
		  "      '${1}',",
		  "      ${1}Schema,",
		  "    );",
		  "    super(model, mapper);",
		  "  }",
		  "}",
		  ""
		],
		"description": "Generates a new mongoose database repository"
	},
	"Generates a new resource repository class": {
		"scope": "typescript",
		"prefix": "grr",
		"body": [
		  "import { MongooseRepository } from \"@/infra/database/repository\";",
		  "import { Service } from \"diod\";",
		  "import { ${1}Entity } from \"./entity\";",
		  "import { ${1}SchemaProps } from \"./schema\";",
		  "",
		  "/**",
		  " * Represents a repository for interacting with the ${1} entities.",
		  " * This class extends the `MongooseBaseRepository` class and provides specific functionality for the `${1}Entity` and `${1}Schema`.",
		  " */",
		  "@Service()",
		  "export abstract class ${1}Repository extends MongooseRepository<${1}Entity, ${1}SchemaProps> {}"
		],
		"description": "Generates a new abstract repository class"
	},
	"Generates a new resource container builder": {
		"scope": "typescript",
		"prefix": "grcb",
		"body": [
		  "import { ContainerBuilder } from 'diod';",
		  "",
		  "import { ${1}Mapper } from './mapper';",
		  "import { ${1}MongooseRepository } from './mongoose';",
		  "import { ${1}Repository } from './repository';",
		  "",
		  "export default (builder: ContainerBuilder) => {",
		  "  builder.registerAndUse(${1}Mapper).asSingleton().addTag('mapper');",
		  "  builder",
		  "    .register(${1}Repository)",
		  "    .useClass(${1}MongooseRepository)",
		  "    .asSingleton()",
		  "    .addTag('repository');",
		  "};",
		  ""
		],
		"description": "Generates a new resource container builder"
	},
	"Generates a new resource mongoose schema": {
		"scope": "typescript",
		"prefix": "grs",
		"body": [
		  "import { Schema } from 'mongoose';",
		  "",
		  "import { BaseEntityProps } from '@/infra/entity/entity';",
		  "",
		  "import { ${1}Props } from './types';",
		  "",
		  "/**",
		  " * Represents the properties of a ${1} schema.",
		  " */",
		  "export type ${1}SchemaProps = BaseEntityProps & ${1}Props;",
		  "",
		  "/**",
		  " * Represents the ${1} schema.",
		  " */",
		  "export const ${1}Schema = new Schema<${1}SchemaProps>({",
		  "  id: { type: String, required: true, unique: true, index: true },",
		  "  // TODO: fill in the rest",
		  "  createdAt: { type: Date, required: true },",
		  "  updatedAt: { type: Date, required: true },",
		  "});",
		  ""
		],
		"description": "Generates a new mongoose schema"
	},
	"Generates resource types": {
		"scope": "typescript",
		"prefix": "grt",
		"body": [
		  "import { Override } from '@/utils/override';",
		  "",
		  "/**",
		  " * Represents the properties of a ${1}.",
		  " */",
		  "export type ${1}Props = {",
		  "  // TODO: add fields",
		  "};",
		  "",
		  "/**",
		  " * Represents the properties for creating a ${1}.",
		  " */",
		  "export type Create${1}Props = Override<",
		  "  ${1}Props,",
		  "  {",
		  "    // TODO: add fields to override",
		  "  }",
		  ">;",
		  ""
		],
		"description": "Generates resource types"
	}
}
