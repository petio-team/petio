// This file is auto-generated by @hey-api/openapi-ts

export const $AddSeriesOptions = {
    type: 'object',
    properties: {
        ignoreEpisodesWithFiles: {
            type: 'boolean'
        },
        ignoreEpisodesWithoutFiles: {
            type: 'boolean'
        },
        monitor: {
            '$ref': '#/components/schemas/MonitorTypes'
        },
        searchForMissingEpisodes: {
            type: 'boolean'
        },
        searchForCutoffUnmetEpisodes: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $AlternateTitleResource = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        sceneSeasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        sceneOrigin: {
            type: 'string',
            nullable: true
        },
        comment: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ApplyTags = {
    enum: ['add', 'remove', 'replace'],
    type: 'string'
} as const;

export const $AuthenticationRequiredType = {
    enum: ['enabled', 'disabledForLocalAddresses'],
    type: 'string'
} as const;

export const $AuthenticationType = {
    enum: ['none', 'basic', 'forms', 'external'],
    type: 'string'
} as const;

export const $AutoTaggingResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        removeTagsAutomatically: {
            type: 'boolean'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        specifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AutoTaggingSpecificationSchema'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $AutoTaggingSpecificationSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        negate: {
            type: 'boolean'
        },
        required: {
            type: 'boolean'
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $BackupResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        path: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/BackupType'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        time: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $BackupType = {
    enum: ['scheduled', 'manual', 'update'],
    type: 'string'
} as const;

export const $BlocklistBulkResource = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $BlocklistResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        seriesId: {
            type: 'integer',
            format: 'int32'
        },
        episodeIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        sourceTitle: {
            type: 'string',
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        date: {
            type: 'string',
            format: 'date-time'
        },
        protocol: {
            '$ref': '#/components/schemas/DownloadProtocol'
        },
        indexer: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        series: {
            '$ref': '#/components/schemas/SeriesResource'
        }
    },
    additionalProperties: false
} as const;

export const $BlocklistResourcePagingResource = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        sortKey: {
            type: 'string',
            nullable: true
        },
        sortDirection: {
            '$ref': '#/components/schemas/SortDirection'
        },
        totalRecords: {
            type: 'integer',
            format: 'int32'
        },
        records: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BlocklistResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CertificateValidationType = {
    enum: ['enabled', 'disabledForLocalAddresses', 'disabled'],
    type: 'string'
} as const;

export const $Command = {
    type: 'object',
    properties: {
        sendUpdatesToClient: {
            type: 'boolean'
        },
        updateScheduledTask: {
            type: 'boolean',
            readOnly: true
        },
        completionMessage: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        requiresDiskAccess: {
            type: 'boolean',
            readOnly: true
        },
        isExclusive: {
            type: 'boolean',
            readOnly: true
        },
        isLongRunning: {
            type: 'boolean',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        lastExecutionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastStartTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        trigger: {
            '$ref': '#/components/schemas/CommandTrigger'
        },
        suppressMessages: {
            type: 'boolean'
        },
        clientUserAgent: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CommandPriority = {
    enum: ['normal', 'high', 'low'],
    type: 'string'
} as const;

export const $CommandResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        commandName: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        body: {
            '$ref': '#/components/schemas/Command'
        },
        priority: {
            '$ref': '#/components/schemas/CommandPriority'
        },
        status: {
            '$ref': '#/components/schemas/CommandStatus'
        },
        result: {
            '$ref': '#/components/schemas/CommandResult'
        },
        queued: {
            type: 'string',
            format: 'date-time'
        },
        started: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        ended: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        duration: {
            '$ref': '#/components/schemas/TimeSpan'
        },
        exception: {
            type: 'string',
            nullable: true
        },
        trigger: {
            '$ref': '#/components/schemas/CommandTrigger'
        },
        clientUserAgent: {
            type: 'string',
            nullable: true
        },
        stateChangeTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        sendUpdatesToClient: {
            type: 'boolean'
        },
        updateScheduledTask: {
            type: 'boolean'
        },
        lastExecutionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CommandResult = {
    enum: ['unknown', 'successful', 'unsuccessful'],
    type: 'string'
} as const;

export const $CommandStatus = {
    enum: ['queued', 'started', 'completed', 'failed', 'aborted', 'cancelled', 'orphaned'],
    type: 'string'
} as const;

export const $CommandTrigger = {
    enum: ['unspecified', 'manual', 'scheduled'],
    type: 'string'
} as const;

export const $CustomFilterResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        type: {
            type: 'string',
            nullable: true
        },
        label: {
            type: 'string',
            nullable: true
        },
        filters: {
            type: 'array',
            items: {
                type: 'object',
                additionalProperties: {}
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CustomFormatResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        includeCustomFormatWhenRenaming: {
            type: 'boolean',
            nullable: true
        },
        specifications: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatSpecificationSchema'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CustomFormatSpecificationSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        infoLink: {
            type: 'string',
            nullable: true
        },
        negate: {
            type: 'boolean'
        },
        required: {
            type: 'boolean'
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        },
        presets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatSpecificationSchema'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $DatabaseType = {
    enum: ['sqLite', 'postgreSQL'],
    type: 'string'
} as const;

export const $DelayProfileResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        enableUsenet: {
            type: 'boolean'
        },
        enableTorrent: {
            type: 'boolean'
        },
        preferredProtocol: {
            '$ref': '#/components/schemas/DownloadProtocol'
        },
        usenetDelay: {
            type: 'integer',
            format: 'int32'
        },
        torrentDelay: {
            type: 'integer',
            format: 'int32'
        },
        bypassIfHighestQuality: {
            type: 'boolean'
        },
        bypassIfAboveCustomFormatScore: {
            type: 'boolean'
        },
        minimumCustomFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        order: {
            type: 'integer',
            format: 'int32'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $DiskSpaceResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string',
            nullable: true
        },
        label: {
            type: 'string',
            nullable: true
        },
        freeSpace: {
            type: 'integer',
            format: 'int64'
        },
        totalSpace: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $DownloadClientBulkResource = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        tags: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        applyTags: {
            '$ref': '#/components/schemas/ApplyTags'
        },
        enable: {
            type: 'boolean',
            nullable: true
        },
        priority: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        removeCompletedDownloads: {
            type: 'boolean',
            nullable: true
        },
        removeFailedDownloads: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $DownloadClientConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        downloadClientWorkingFolders: {
            type: 'string',
            nullable: true
        },
        enableCompletedDownloadHandling: {
            type: 'boolean'
        },
        autoRedownloadFailed: {
            type: 'boolean'
        },
        autoRedownloadFailedFromInteractiveSearch: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $DownloadClientResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        configContract: {
            type: 'string',
            nullable: true
        },
        infoLink: {
            type: 'string',
            nullable: true
        },
        message: {
            '$ref': '#/components/schemas/ProviderMessage'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        presets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DownloadClientResource'
            },
            nullable: true
        },
        enable: {
            type: 'boolean'
        },
        protocol: {
            '$ref': '#/components/schemas/DownloadProtocol'
        },
        priority: {
            type: 'integer',
            format: 'int32'
        },
        removeCompletedDownloads: {
            type: 'boolean'
        },
        removeFailedDownloads: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $DownloadProtocol = {
    enum: ['unknown', 'usenet', 'torrent'],
    type: 'string'
} as const;

export const $EpisodeFileListResource = {
    type: 'object',
    properties: {
        episodeFileIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        sceneName: {
            type: 'string',
            nullable: true
        },
        releaseGroup: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EpisodeFileResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        seriesId: {
            type: 'integer',
            format: 'int32'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        relativePath: {
            type: 'string',
            nullable: true
        },
        path: {
            type: 'string',
            nullable: true
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        dateAdded: {
            type: 'string',
            format: 'date-time'
        },
        sceneName: {
            type: 'string',
            nullable: true
        },
        releaseGroup: {
            type: 'string',
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        indexerFlags: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        releaseType: {
            '$ref': '#/components/schemas/ReleaseType'
        },
        mediaInfo: {
            '$ref': '#/components/schemas/MediaInfoResource'
        },
        qualityCutoffNotMet: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $EpisodeHistoryEventType = {
    enum: ['unknown', 'grabbed', 'seriesFolderImported', 'downloadFolderImported', 'downloadFailed', 'episodeFileDeleted', 'episodeFileRenamed', 'downloadIgnored'],
    type: 'string'
} as const;

export const $EpisodeResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        seriesId: {
            type: 'integer',
            format: 'int32'
        },
        tvdbId: {
            type: 'integer',
            format: 'int32'
        },
        episodeFileId: {
            type: 'integer',
            format: 'int32'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        episodeNumber: {
            type: 'integer',
            format: 'int32'
        },
        title: {
            type: 'string',
            nullable: true
        },
        airDate: {
            type: 'string',
            nullable: true
        },
        airDateUtc: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        runtime: {
            type: 'integer',
            format: 'int32'
        },
        finaleType: {
            type: 'string',
            nullable: true
        },
        overview: {
            type: 'string',
            nullable: true
        },
        episodeFile: {
            '$ref': '#/components/schemas/EpisodeFileResource'
        },
        hasFile: {
            type: 'boolean'
        },
        monitored: {
            type: 'boolean'
        },
        absoluteEpisodeNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        sceneAbsoluteEpisodeNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        sceneEpisodeNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        sceneSeasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        unverifiedSceneNumbering: {
            type: 'boolean'
        },
        endTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        grabDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        seriesTitle: {
            type: 'string',
            nullable: true
        },
        series: {
            '$ref': '#/components/schemas/SeriesResource'
        },
        images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaCover'
            },
            nullable: true
        },
        grabbed: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $EpisodeResourcePagingResource = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        sortKey: {
            type: 'string',
            nullable: true
        },
        sortDirection: {
            '$ref': '#/components/schemas/SortDirection'
        },
        totalRecords: {
            type: 'integer',
            format: 'int32'
        },
        records: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EpisodeResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EpisodeTitleRequiredType = {
    enum: ['always', 'bulkSeasonReleases', 'never'],
    type: 'string'
} as const;

export const $EpisodesMonitoredResource = {
    type: 'object',
    properties: {
        episodeIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        monitored: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Field = {
    type: 'object',
    properties: {
        order: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        label: {
            type: 'string',
            nullable: true
        },
        unit: {
            type: 'string',
            nullable: true
        },
        helpText: {
            type: 'string',
            nullable: true
        },
        helpTextWarning: {
            type: 'string',
            nullable: true
        },
        helpLink: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        advanced: {
            type: 'boolean'
        },
        selectOptions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SelectOption'
            },
            nullable: true
        },
        selectOptionsProviderAction: {
            type: 'string',
            nullable: true
        },
        section: {
            type: 'string',
            nullable: true
        },
        hidden: {
            type: 'string',
            nullable: true
        },
        privacy: {
            '$ref': '#/components/schemas/PrivacyLevel'
        },
        placeholder: {
            type: 'string',
            nullable: true
        },
        isFloat: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $FileDateType = {
    enum: ['none', 'localAirDate', 'utcAirDate'],
    type: 'string'
} as const;

export const $HealthCheckResult = {
    enum: ['ok', 'notice', 'warning', 'error'],
    type: 'string'
} as const;

export const $HealthResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        source: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/HealthCheckResult'
        },
        message: {
            type: 'string',
            nullable: true
        },
        wikiUrl: {
            '$ref': '#/components/schemas/HttpUri'
        }
    },
    additionalProperties: false
} as const;

export const $HistoryResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        episodeId: {
            type: 'integer',
            format: 'int32'
        },
        seriesId: {
            type: 'integer',
            format: 'int32'
        },
        sourceTitle: {
            type: 'string',
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        qualityCutoffNotMet: {
            type: 'boolean'
        },
        date: {
            type: 'string',
            format: 'date-time'
        },
        downloadId: {
            type: 'string',
            nullable: true
        },
        eventType: {
            '$ref': '#/components/schemas/EpisodeHistoryEventType'
        },
        data: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        },
        episode: {
            '$ref': '#/components/schemas/EpisodeResource'
        },
        series: {
            '$ref': '#/components/schemas/SeriesResource'
        }
    },
    additionalProperties: false
} as const;

export const $HistoryResourcePagingResource = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        sortKey: {
            type: 'string',
            nullable: true
        },
        sortDirection: {
            '$ref': '#/components/schemas/SortDirection'
        },
        totalRecords: {
            type: 'integer',
            format: 'int32'
        },
        records: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/HistoryResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $HostConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        bindAddress: {
            type: 'string',
            nullable: true
        },
        port: {
            type: 'integer',
            format: 'int32'
        },
        sslPort: {
            type: 'integer',
            format: 'int32'
        },
        enableSsl: {
            type: 'boolean'
        },
        launchBrowser: {
            type: 'boolean'
        },
        authenticationMethod: {
            '$ref': '#/components/schemas/AuthenticationType'
        },
        authenticationRequired: {
            '$ref': '#/components/schemas/AuthenticationRequiredType'
        },
        analyticsEnabled: {
            type: 'boolean'
        },
        username: {
            type: 'string',
            nullable: true
        },
        password: {
            type: 'string',
            nullable: true
        },
        passwordConfirmation: {
            type: 'string',
            nullable: true
        },
        logLevel: {
            type: 'string',
            nullable: true
        },
        consoleLogLevel: {
            type: 'string',
            nullable: true
        },
        branch: {
            type: 'string',
            nullable: true
        },
        apiKey: {
            type: 'string',
            nullable: true
        },
        sslCertPath: {
            type: 'string',
            nullable: true
        },
        sslCertPassword: {
            type: 'string',
            nullable: true
        },
        urlBase: {
            type: 'string',
            nullable: true
        },
        instanceName: {
            type: 'string',
            nullable: true
        },
        applicationUrl: {
            type: 'string',
            nullable: true
        },
        updateAutomatically: {
            type: 'boolean'
        },
        updateMechanism: {
            '$ref': '#/components/schemas/UpdateMechanism'
        },
        updateScriptPath: {
            type: 'string',
            nullable: true
        },
        proxyEnabled: {
            type: 'boolean'
        },
        proxyType: {
            '$ref': '#/components/schemas/ProxyType'
        },
        proxyHostname: {
            type: 'string',
            nullable: true
        },
        proxyPort: {
            type: 'integer',
            format: 'int32'
        },
        proxyUsername: {
            type: 'string',
            nullable: true
        },
        proxyPassword: {
            type: 'string',
            nullable: true
        },
        proxyBypassFilter: {
            type: 'string',
            nullable: true
        },
        proxyBypassLocalAddresses: {
            type: 'boolean'
        },
        certificateValidation: {
            '$ref': '#/components/schemas/CertificateValidationType'
        },
        backupFolder: {
            type: 'string',
            nullable: true
        },
        backupInterval: {
            type: 'integer',
            format: 'int32'
        },
        backupRetention: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $HttpUri = {
    type: 'object',
    properties: {
        fullUri: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        scheme: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        host: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        port: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        path: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        query: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        fragment: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $ImportListBulkResource = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        tags: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        applyTags: {
            '$ref': '#/components/schemas/ApplyTags'
        },
        enableAutomaticAdd: {
            type: 'boolean',
            nullable: true
        },
        rootFolderPath: {
            type: 'string',
            nullable: true
        },
        qualityProfileId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ImportListConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        listSyncLevel: {
            '$ref': '#/components/schemas/ListSyncLevelType'
        },
        listSyncTag: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ImportListExclusionResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        tvdbId: {
            type: 'integer',
            format: 'int32'
        },
        title: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ImportListExclusionResourcePagingResource = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        sortKey: {
            type: 'string',
            nullable: true
        },
        sortDirection: {
            '$ref': '#/components/schemas/SortDirection'
        },
        totalRecords: {
            type: 'integer',
            format: 'int32'
        },
        records: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImportListExclusionResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ImportListResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        configContract: {
            type: 'string',
            nullable: true
        },
        infoLink: {
            type: 'string',
            nullable: true
        },
        message: {
            '$ref': '#/components/schemas/ProviderMessage'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        presets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImportListResource'
            },
            nullable: true
        },
        enableAutomaticAdd: {
            type: 'boolean'
        },
        searchForMissingEpisodes: {
            type: 'boolean'
        },
        shouldMonitor: {
            '$ref': '#/components/schemas/MonitorTypes'
        },
        monitorNewItems: {
            '$ref': '#/components/schemas/NewItemMonitorTypes'
        },
        rootFolderPath: {
            type: 'string',
            nullable: true
        },
        qualityProfileId: {
            type: 'integer',
            format: 'int32'
        },
        seriesType: {
            '$ref': '#/components/schemas/SeriesTypes'
        },
        seasonFolder: {
            type: 'boolean'
        },
        listType: {
            '$ref': '#/components/schemas/ImportListType'
        },
        listOrder: {
            type: 'integer',
            format: 'int32'
        },
        minRefreshInterval: {
            '$ref': '#/components/schemas/TimeSpan'
        }
    },
    additionalProperties: false
} as const;

export const $ImportListType = {
    enum: ['program', 'plex', 'trakt', 'simkl', 'other', 'advanced'],
    type: 'string'
} as const;

export const $IndexerBulkResource = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        tags: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        applyTags: {
            '$ref': '#/components/schemas/ApplyTags'
        },
        enableRss: {
            type: 'boolean',
            nullable: true
        },
        enableAutomaticSearch: {
            type: 'boolean',
            nullable: true
        },
        enableInteractiveSearch: {
            type: 'boolean',
            nullable: true
        },
        priority: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $IndexerConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        minimumAge: {
            type: 'integer',
            format: 'int32'
        },
        retention: {
            type: 'integer',
            format: 'int32'
        },
        maximumSize: {
            type: 'integer',
            format: 'int32'
        },
        rssSyncInterval: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $IndexerFlagResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        nameLower: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $IndexerResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        configContract: {
            type: 'string',
            nullable: true
        },
        infoLink: {
            type: 'string',
            nullable: true
        },
        message: {
            '$ref': '#/components/schemas/ProviderMessage'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        presets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IndexerResource'
            },
            nullable: true
        },
        enableRss: {
            type: 'boolean'
        },
        enableAutomaticSearch: {
            type: 'boolean'
        },
        enableInteractiveSearch: {
            type: 'boolean'
        },
        supportsRss: {
            type: 'boolean'
        },
        supportsSearch: {
            type: 'boolean'
        },
        protocol: {
            '$ref': '#/components/schemas/DownloadProtocol'
        },
        priority: {
            type: 'integer',
            format: 'int32'
        },
        seasonSearchMaximumSingleEpisodeAge: {
            type: 'integer',
            format: 'int32'
        },
        downloadClientId: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $Language = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LanguageProfileItemResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        language: {
            '$ref': '#/components/schemas/Language'
        },
        allowed: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $LanguageProfileResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        upgradeAllowed: {
            type: 'boolean'
        },
        cutoff: {
            '$ref': '#/components/schemas/Language'
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LanguageProfileItemResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LanguageResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        nameLower: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $ListSyncLevelType = {
    enum: ['disabled', 'logOnly', 'keepAndUnmonitor', 'keepAndTag'],
    type: 'string'
} as const;

export const $LocalizationLanguageResource = {
    type: 'object',
    properties: {
        identifier: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LocalizationResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        strings: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LogFileResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        filename: {
            type: 'string',
            nullable: true
        },
        lastWriteTime: {
            type: 'string',
            format: 'date-time'
        },
        contentsUrl: {
            type: 'string',
            nullable: true
        },
        downloadUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LogResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        time: {
            type: 'string',
            format: 'date-time'
        },
        exception: {
            type: 'string',
            nullable: true
        },
        exceptionType: {
            type: 'string',
            nullable: true
        },
        level: {
            type: 'string',
            nullable: true
        },
        logger: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        method: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LogResourcePagingResource = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        sortKey: {
            type: 'string',
            nullable: true
        },
        sortDirection: {
            '$ref': '#/components/schemas/SortDirection'
        },
        totalRecords: {
            type: 'integer',
            format: 'int32'
        },
        records: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LogResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ManualImportReprocessResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string',
            nullable: true
        },
        seriesId: {
            type: 'integer',
            format: 'int32'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        episodes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EpisodeResource'
            },
            nullable: true
        },
        episodeIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        releaseGroup: {
            type: 'string',
            nullable: true
        },
        downloadId: {
            type: 'string',
            nullable: true
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        indexerFlags: {
            type: 'integer',
            format: 'int32'
        },
        releaseType: {
            '$ref': '#/components/schemas/ReleaseType'
        },
        rejections: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rejection'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ManualImportResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string',
            nullable: true
        },
        relativePath: {
            type: 'string',
            nullable: true
        },
        folderName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        series: {
            '$ref': '#/components/schemas/SeriesResource'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        episodes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EpisodeResource'
            },
            nullable: true
        },
        episodeFileId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        releaseGroup: {
            type: 'string',
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        qualityWeight: {
            type: 'integer',
            format: 'int32'
        },
        downloadId: {
            type: 'string',
            nullable: true
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        indexerFlags: {
            type: 'integer',
            format: 'int32'
        },
        releaseType: {
            '$ref': '#/components/schemas/ReleaseType'
        },
        rejections: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Rejection'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $MediaCover = {
    type: 'object',
    properties: {
        coverType: {
            '$ref': '#/components/schemas/MediaCoverTypes'
        },
        url: {
            type: 'string',
            nullable: true
        },
        remoteUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $MediaCoverTypes = {
    enum: ['unknown', 'poster', 'banner', 'fanart', 'screenshot', 'headshot', 'clearlogo'],
    type: 'string'
} as const;

export const $MediaInfoResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        audioBitrate: {
            type: 'integer',
            format: 'int64'
        },
        audioChannels: {
            type: 'number',
            format: 'double'
        },
        audioCodec: {
            type: 'string',
            nullable: true
        },
        audioLanguages: {
            type: 'string',
            nullable: true
        },
        audioStreamCount: {
            type: 'integer',
            format: 'int32'
        },
        videoBitDepth: {
            type: 'integer',
            format: 'int32'
        },
        videoBitrate: {
            type: 'integer',
            format: 'int64'
        },
        videoCodec: {
            type: 'string',
            nullable: true
        },
        videoFps: {
            type: 'number',
            format: 'double'
        },
        videoDynamicRange: {
            type: 'string',
            nullable: true
        },
        videoDynamicRangeType: {
            type: 'string',
            nullable: true
        },
        resolution: {
            type: 'string',
            nullable: true
        },
        runTime: {
            type: 'string',
            nullable: true
        },
        scanType: {
            type: 'string',
            nullable: true
        },
        subtitles: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $MediaManagementConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        autoUnmonitorPreviouslyDownloadedEpisodes: {
            type: 'boolean'
        },
        recycleBin: {
            type: 'string',
            nullable: true
        },
        recycleBinCleanupDays: {
            type: 'integer',
            format: 'int32'
        },
        downloadPropersAndRepacks: {
            '$ref': '#/components/schemas/ProperDownloadTypes'
        },
        createEmptySeriesFolders: {
            type: 'boolean'
        },
        deleteEmptyFolders: {
            type: 'boolean'
        },
        fileDate: {
            '$ref': '#/components/schemas/FileDateType'
        },
        rescanAfterRefresh: {
            '$ref': '#/components/schemas/RescanAfterRefreshType'
        },
        setPermissionsLinux: {
            type: 'boolean'
        },
        chmodFolder: {
            type: 'string',
            nullable: true
        },
        chownGroup: {
            type: 'string',
            nullable: true
        },
        episodeTitleRequired: {
            '$ref': '#/components/schemas/EpisodeTitleRequiredType'
        },
        skipFreeSpaceCheckWhenImporting: {
            type: 'boolean'
        },
        minimumFreeSpaceWhenImporting: {
            type: 'integer',
            format: 'int32'
        },
        copyUsingHardlinks: {
            type: 'boolean'
        },
        useScriptImport: {
            type: 'boolean'
        },
        scriptImportPath: {
            type: 'string',
            nullable: true
        },
        importExtraFiles: {
            type: 'boolean'
        },
        extraFileExtensions: {
            type: 'string',
            nullable: true
        },
        enableMediaInfo: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $MetadataResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        configContract: {
            type: 'string',
            nullable: true
        },
        infoLink: {
            type: 'string',
            nullable: true
        },
        message: {
            '$ref': '#/components/schemas/ProviderMessage'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        presets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetadataResource'
            },
            nullable: true
        },
        enable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $MonitorTypes = {
    enum: ['unknown', 'all', 'future', 'missing', 'existing', 'firstSeason', 'lastSeason', 'latestSeason', 'pilot', 'recent', 'monitorSpecials', 'unmonitorSpecials', 'none', 'skip'],
    type: 'string'
} as const;

export const $MonitoringOptions = {
    type: 'object',
    properties: {
        ignoreEpisodesWithFiles: {
            type: 'boolean'
        },
        ignoreEpisodesWithoutFiles: {
            type: 'boolean'
        },
        monitor: {
            '$ref': '#/components/schemas/MonitorTypes'
        }
    },
    additionalProperties: false
} as const;

export const $NamingConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        renameEpisodes: {
            type: 'boolean'
        },
        replaceIllegalCharacters: {
            type: 'boolean'
        },
        colonReplacementFormat: {
            type: 'integer',
            format: 'int32'
        },
        multiEpisodeStyle: {
            type: 'integer',
            format: 'int32'
        },
        standardEpisodeFormat: {
            type: 'string',
            nullable: true
        },
        dailyEpisodeFormat: {
            type: 'string',
            nullable: true
        },
        animeEpisodeFormat: {
            type: 'string',
            nullable: true
        },
        seriesFolderFormat: {
            type: 'string',
            nullable: true
        },
        seasonFolderFormat: {
            type: 'string',
            nullable: true
        },
        specialsFolderFormat: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $NewItemMonitorTypes = {
    enum: ['all', 'none'],
    type: 'string'
} as const;

export const $NotificationResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        fields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Field'
            },
            nullable: true
        },
        implementationName: {
            type: 'string',
            nullable: true
        },
        implementation: {
            type: 'string',
            nullable: true
        },
        configContract: {
            type: 'string',
            nullable: true
        },
        infoLink: {
            type: 'string',
            nullable: true
        },
        message: {
            '$ref': '#/components/schemas/ProviderMessage'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        presets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NotificationResource'
            },
            nullable: true
        },
        link: {
            type: 'string',
            nullable: true
        },
        onGrab: {
            type: 'boolean'
        },
        onDownload: {
            type: 'boolean'
        },
        onUpgrade: {
            type: 'boolean'
        },
        onRename: {
            type: 'boolean'
        },
        onSeriesAdd: {
            type: 'boolean'
        },
        onSeriesDelete: {
            type: 'boolean'
        },
        onEpisodeFileDelete: {
            type: 'boolean'
        },
        onEpisodeFileDeleteForUpgrade: {
            type: 'boolean'
        },
        onHealthIssue: {
            type: 'boolean'
        },
        onHealthRestored: {
            type: 'boolean'
        },
        onApplicationUpdate: {
            type: 'boolean'
        },
        onManualInteractionRequired: {
            type: 'boolean'
        },
        supportsOnGrab: {
            type: 'boolean'
        },
        supportsOnDownload: {
            type: 'boolean'
        },
        supportsOnUpgrade: {
            type: 'boolean'
        },
        supportsOnRename: {
            type: 'boolean'
        },
        supportsOnSeriesAdd: {
            type: 'boolean'
        },
        supportsOnSeriesDelete: {
            type: 'boolean'
        },
        supportsOnEpisodeFileDelete: {
            type: 'boolean'
        },
        supportsOnEpisodeFileDeleteForUpgrade: {
            type: 'boolean'
        },
        supportsOnHealthIssue: {
            type: 'boolean'
        },
        supportsOnHealthRestored: {
            type: 'boolean'
        },
        supportsOnApplicationUpdate: {
            type: 'boolean'
        },
        supportsOnManualInteractionRequired: {
            type: 'boolean'
        },
        includeHealthWarnings: {
            type: 'boolean'
        },
        testCommand: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ParseResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        title: {
            type: 'string',
            nullable: true
        },
        parsedEpisodeInfo: {
            '$ref': '#/components/schemas/ParsedEpisodeInfo'
        },
        series: {
            '$ref': '#/components/schemas/SeriesResource'
        },
        episodes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EpisodeResource'
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ParsedEpisodeInfo = {
    type: 'object',
    properties: {
        releaseTitle: {
            type: 'string',
            nullable: true
        },
        seriesTitle: {
            type: 'string',
            nullable: true
        },
        seriesTitleInfo: {
            '$ref': '#/components/schemas/SeriesTitleInfo'
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        episodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        absoluteEpisodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        specialAbsoluteEpisodeNumbers: {
            type: 'array',
            items: {
                type: 'number',
                format: 'double'
            },
            nullable: true
        },
        airDate: {
            type: 'string',
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        fullSeason: {
            type: 'boolean'
        },
        isPartialSeason: {
            type: 'boolean'
        },
        isMultiSeason: {
            type: 'boolean'
        },
        isSeasonExtra: {
            type: 'boolean'
        },
        isSplitEpisode: {
            type: 'boolean'
        },
        isMiniSeries: {
            type: 'boolean'
        },
        special: {
            type: 'boolean'
        },
        releaseGroup: {
            type: 'string',
            nullable: true
        },
        releaseHash: {
            type: 'string',
            nullable: true
        },
        seasonPart: {
            type: 'integer',
            format: 'int32'
        },
        releaseTokens: {
            type: 'string',
            nullable: true
        },
        dailyPart: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isDaily: {
            type: 'boolean',
            readOnly: true
        },
        isAbsoluteNumbering: {
            type: 'boolean',
            readOnly: true
        },
        isPossibleSpecialEpisode: {
            type: 'boolean',
            readOnly: true
        },
        isPossibleSceneSeasonSpecial: {
            type: 'boolean',
            readOnly: true
        },
        releaseType: {
            '$ref': '#/components/schemas/ReleaseType'
        }
    },
    additionalProperties: false
} as const;

export const $PingResource = {
    type: 'object',
    properties: {
        status: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $PrivacyLevel = {
    enum: ['normal', 'password', 'apiKey', 'userName'],
    type: 'string'
} as const;

export const $ProfileFormatItemResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        format: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        score: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ProperDownloadTypes = {
    enum: ['preferAndUpgrade', 'doNotUpgrade', 'doNotPrefer'],
    type: 'string'
} as const;

export const $ProviderMessage = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/ProviderMessageType'
        }
    },
    additionalProperties: false
} as const;

export const $ProviderMessageType = {
    enum: ['info', 'warning', 'error'],
    type: 'string'
} as const;

export const $ProxyType = {
    enum: ['http', 'socks4', 'socks5'],
    type: 'string'
} as const;

export const $Quality = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        source: {
            '$ref': '#/components/schemas/QualitySource'
        },
        resolution: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $QualityDefinitionResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        quality: {
            '$ref': '#/components/schemas/Quality'
        },
        title: {
            type: 'string',
            nullable: true
        },
        weight: {
            type: 'integer',
            format: 'int32'
        },
        minSize: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        maxSize: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        preferredSize: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $QualityModel = {
    type: 'object',
    properties: {
        quality: {
            '$ref': '#/components/schemas/Quality'
        },
        revision: {
            '$ref': '#/components/schemas/Revision'
        }
    },
    additionalProperties: false
} as const;

export const $QualityProfileQualityItemResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/Quality'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QualityProfileQualityItemResource'
            },
            nullable: true
        },
        allowed: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $QualityProfileResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        upgradeAllowed: {
            type: 'boolean'
        },
        cutoff: {
            type: 'integer',
            format: 'int32'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QualityProfileQualityItemResource'
            },
            nullable: true
        },
        minFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        cutoffFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        formatItems: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProfileFormatItemResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $QualitySource = {
    enum: ['unknown', 'television', 'televisionRaw', 'web', 'webRip', 'dvd', 'bluray', 'blurayRaw'],
    type: 'string'
} as const;

export const $QueueBulkResource = {
    type: 'object',
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $QueueResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        seriesId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        episodeId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        series: {
            '$ref': '#/components/schemas/SeriesResource'
        },
        episode: {
            '$ref': '#/components/schemas/EpisodeResource'
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string',
            nullable: true
        },
        sizeleft: {
            type: 'number',
            format: 'double'
        },
        timeleft: {
            '$ref': '#/components/schemas/TimeSpan'
        },
        estimatedCompletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        added: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        status: {
            type: 'string',
            nullable: true
        },
        trackedDownloadStatus: {
            '$ref': '#/components/schemas/TrackedDownloadStatus'
        },
        trackedDownloadState: {
            '$ref': '#/components/schemas/TrackedDownloadState'
        },
        statusMessages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TrackedDownloadStatusMessage'
            },
            nullable: true
        },
        errorMessage: {
            type: 'string',
            nullable: true
        },
        downloadId: {
            type: 'string',
            nullable: true
        },
        protocol: {
            '$ref': '#/components/schemas/DownloadProtocol'
        },
        downloadClient: {
            type: 'string',
            nullable: true
        },
        downloadClientHasPostImportCategory: {
            type: 'boolean'
        },
        indexer: {
            type: 'string',
            nullable: true
        },
        outputPath: {
            type: 'string',
            nullable: true
        },
        episodeHasFile: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $QueueResourcePagingResource = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        },
        sortKey: {
            type: 'string',
            nullable: true
        },
        sortDirection: {
            '$ref': '#/components/schemas/SortDirection'
        },
        totalRecords: {
            type: 'integer',
            format: 'int32'
        },
        records: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QueueResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $QueueStatusResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        totalCount: {
            type: 'integer',
            format: 'int32'
        },
        count: {
            type: 'integer',
            format: 'int32'
        },
        unknownCount: {
            type: 'integer',
            format: 'int32'
        },
        errors: {
            type: 'boolean'
        },
        warnings: {
            type: 'boolean'
        },
        unknownErrors: {
            type: 'boolean'
        },
        unknownWarnings: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Ratings = {
    type: 'object',
    properties: {
        votes: {
            type: 'integer',
            format: 'int32'
        },
        value: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $Rejection = {
    type: 'object',
    properties: {
        reason: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/RejectionType'
        }
    },
    additionalProperties: false
} as const;

export const $RejectionType = {
    enum: ['permanent', 'temporary'],
    type: 'string'
} as const;

export const $ReleaseEpisodeResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        episodeNumber: {
            type: 'integer',
            format: 'int32'
        },
        absoluteEpisodeNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ReleaseProfileResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        enabled: {
            type: 'boolean'
        },
        required: {
            nullable: true
        },
        ignored: {
            nullable: true
        },
        indexerId: {
            type: 'integer',
            format: 'int32'
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ReleaseResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        guid: {
            type: 'string',
            nullable: true
        },
        quality: {
            '$ref': '#/components/schemas/QualityModel'
        },
        qualityWeight: {
            type: 'integer',
            format: 'int32'
        },
        age: {
            type: 'integer',
            format: 'int32'
        },
        ageHours: {
            type: 'number',
            format: 'double'
        },
        ageMinutes: {
            type: 'number',
            format: 'double'
        },
        size: {
            type: 'integer',
            format: 'int64'
        },
        indexerId: {
            type: 'integer',
            format: 'int32'
        },
        indexer: {
            type: 'string',
            nullable: true
        },
        releaseGroup: {
            type: 'string',
            nullable: true
        },
        subGroup: {
            type: 'string',
            nullable: true
        },
        releaseHash: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        fullSeason: {
            type: 'boolean'
        },
        sceneSource: {
            type: 'boolean'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        languages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Language'
            },
            nullable: true
        },
        languageWeight: {
            type: 'integer',
            format: 'int32'
        },
        airDate: {
            type: 'string',
            nullable: true
        },
        seriesTitle: {
            type: 'string',
            nullable: true
        },
        episodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        absoluteEpisodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        mappedSeasonNumber: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        mappedEpisodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        mappedAbsoluteEpisodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        mappedSeriesId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        mappedEpisodeInfo: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReleaseEpisodeResource'
            },
            nullable: true
        },
        approved: {
            type: 'boolean'
        },
        temporarilyRejected: {
            type: 'boolean'
        },
        rejected: {
            type: 'boolean'
        },
        tvdbId: {
            type: 'integer',
            format: 'int32'
        },
        tvRageId: {
            type: 'integer',
            format: 'int32'
        },
        rejections: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        publishDate: {
            type: 'string',
            format: 'date-time'
        },
        commentUrl: {
            type: 'string',
            nullable: true
        },
        downloadUrl: {
            type: 'string',
            nullable: true
        },
        infoUrl: {
            type: 'string',
            nullable: true
        },
        episodeRequested: {
            type: 'boolean'
        },
        downloadAllowed: {
            type: 'boolean'
        },
        releaseWeight: {
            type: 'integer',
            format: 'int32'
        },
        customFormats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomFormatResource'
            },
            nullable: true
        },
        customFormatScore: {
            type: 'integer',
            format: 'int32'
        },
        sceneMapping: {
            '$ref': '#/components/schemas/AlternateTitleResource'
        },
        magnetUrl: {
            type: 'string',
            nullable: true
        },
        infoHash: {
            type: 'string',
            nullable: true
        },
        seeders: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        leechers: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        protocol: {
            '$ref': '#/components/schemas/DownloadProtocol'
        },
        indexerFlags: {
            type: 'integer',
            format: 'int32'
        },
        isDaily: {
            type: 'boolean'
        },
        isAbsoluteNumbering: {
            type: 'boolean'
        },
        isPossibleSpecialEpisode: {
            type: 'boolean'
        },
        special: {
            type: 'boolean'
        },
        seriesId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        episodeId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        episodeIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        downloadClientId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        downloadClient: {
            type: 'string',
            nullable: true
        },
        shouldOverride: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ReleaseType = {
    enum: ['unknown', 'singleEpisode', 'multiEpisode', 'seasonPack'],
    type: 'string'
} as const;

export const $RemotePathMappingResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        host: {
            type: 'string',
            nullable: true
        },
        remotePath: {
            type: 'string',
            nullable: true
        },
        localPath: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RenameEpisodeResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        seriesId: {
            type: 'integer',
            format: 'int32'
        },
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        episodeNumbers: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        episodeFileId: {
            type: 'integer',
            format: 'int32'
        },
        existingPath: {
            type: 'string',
            nullable: true
        },
        newPath: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RescanAfterRefreshType = {
    enum: ['always', 'afterManual', 'never'],
    type: 'string'
} as const;

export const $Revision = {
    type: 'object',
    properties: {
        version: {
            type: 'integer',
            format: 'int32'
        },
        real: {
            type: 'integer',
            format: 'int32'
        },
        isRepack: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $RootFolderResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string',
            nullable: true
        },
        accessible: {
            type: 'boolean'
        },
        freeSpace: {
            type: 'integer',
            format: 'int64',
            nullable: true
        },
        unmappedFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UnmappedFolder'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RuntimeMode = {
    enum: ['console', 'service', 'tray'],
    type: 'string'
} as const;

export const $SeasonPassResource = {
    type: 'object',
    properties: {
        series: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeasonPassSeriesResource'
            },
            nullable: true
        },
        monitoringOptions: {
            '$ref': '#/components/schemas/MonitoringOptions'
        }
    },
    additionalProperties: false
} as const;

export const $SeasonPassSeriesResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        monitored: {
            type: 'boolean',
            nullable: true
        },
        seasons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeasonResource'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SeasonResource = {
    type: 'object',
    properties: {
        seasonNumber: {
            type: 'integer',
            format: 'int32'
        },
        monitored: {
            type: 'boolean'
        },
        statistics: {
            '$ref': '#/components/schemas/SeasonStatisticsResource'
        },
        images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaCover'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SeasonStatisticsResource = {
    type: 'object',
    properties: {
        nextAiring: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        previousAiring: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        episodeFileCount: {
            type: 'integer',
            format: 'int32'
        },
        episodeCount: {
            type: 'integer',
            format: 'int32'
        },
        totalEpisodeCount: {
            type: 'integer',
            format: 'int32'
        },
        sizeOnDisk: {
            type: 'integer',
            format: 'int64'
        },
        releaseGroups: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        percentOfEpisodes: {
            type: 'number',
            format: 'double',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $SelectOption = {
    type: 'object',
    properties: {
        value: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        order: {
            type: 'integer',
            format: 'int32'
        },
        hint: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SeriesEditorResource = {
    type: 'object',
    properties: {
        seriesIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        monitored: {
            type: 'boolean',
            nullable: true
        },
        monitorNewItems: {
            '$ref': '#/components/schemas/NewItemMonitorTypes'
        },
        qualityProfileId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        seriesType: {
            '$ref': '#/components/schemas/SeriesTypes'
        },
        seasonFolder: {
            type: 'boolean',
            nullable: true
        },
        rootFolderPath: {
            type: 'string',
            nullable: true
        },
        tags: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        applyTags: {
            '$ref': '#/components/schemas/ApplyTags'
        },
        moveFiles: {
            type: 'boolean'
        },
        deleteFiles: {
            type: 'boolean'
        },
        addImportListExclusion: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $SeriesResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        title: {
            type: 'string',
            nullable: true
        },
        alternateTitles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternateTitleResource'
            },
            nullable: true
        },
        sortTitle: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/SeriesStatusType'
        },
        ended: {
            type: 'boolean',
            readOnly: true
        },
        profileName: {
            type: 'string',
            nullable: true
        },
        overview: {
            type: 'string',
            nullable: true
        },
        nextAiring: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        previousAiring: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        network: {
            type: 'string',
            nullable: true
        },
        airTime: {
            type: 'string',
            nullable: true
        },
        images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MediaCover'
            },
            nullable: true
        },
        originalLanguage: {
            '$ref': '#/components/schemas/Language'
        },
        remotePoster: {
            type: 'string',
            nullable: true
        },
        seasons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeasonResource'
            },
            nullable: true
        },
        year: {
            type: 'integer',
            format: 'int32'
        },
        path: {
            type: 'string',
            nullable: true
        },
        qualityProfileId: {
            type: 'integer',
            format: 'int32'
        },
        seasonFolder: {
            type: 'boolean'
        },
        monitored: {
            type: 'boolean'
        },
        monitorNewItems: {
            '$ref': '#/components/schemas/NewItemMonitorTypes'
        },
        useSceneNumbering: {
            type: 'boolean'
        },
        runtime: {
            type: 'integer',
            format: 'int32'
        },
        tvdbId: {
            type: 'integer',
            format: 'int32'
        },
        tvRageId: {
            type: 'integer',
            format: 'int32'
        },
        tvMazeId: {
            type: 'integer',
            format: 'int32'
        },
        firstAired: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastAired: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        seriesType: {
            '$ref': '#/components/schemas/SeriesTypes'
        },
        cleanTitle: {
            type: 'string',
            nullable: true
        },
        imdbId: {
            type: 'string',
            nullable: true
        },
        titleSlug: {
            type: 'string',
            nullable: true
        },
        rootFolderPath: {
            type: 'string',
            nullable: true
        },
        folder: {
            type: 'string',
            nullable: true
        },
        certification: {
            type: 'string',
            nullable: true
        },
        genres: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        tags: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        added: {
            type: 'string',
            format: 'date-time'
        },
        addOptions: {
            '$ref': '#/components/schemas/AddSeriesOptions'
        },
        ratings: {
            '$ref': '#/components/schemas/Ratings'
        },
        statistics: {
            '$ref': '#/components/schemas/SeriesStatisticsResource'
        },
        episodesChanged: {
            type: 'boolean',
            nullable: true
        },
        languageProfileId: {
            type: 'integer',
            format: 'int32',
            readOnly: true,
            deprecated: true
        }
    },
    additionalProperties: false
} as const;

export const $SeriesStatisticsResource = {
    type: 'object',
    properties: {
        seasonCount: {
            type: 'integer',
            format: 'int32'
        },
        episodeFileCount: {
            type: 'integer',
            format: 'int32'
        },
        episodeCount: {
            type: 'integer',
            format: 'int32'
        },
        totalEpisodeCount: {
            type: 'integer',
            format: 'int32'
        },
        sizeOnDisk: {
            type: 'integer',
            format: 'int64'
        },
        releaseGroups: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        percentOfEpisodes: {
            type: 'number',
            format: 'double',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $SeriesStatusType = {
    enum: ['continuing', 'ended', 'upcoming', 'deleted'],
    type: 'string'
} as const;

export const $SeriesTitleInfo = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        },
        titleWithoutYear: {
            type: 'string',
            nullable: true
        },
        year: {
            type: 'integer',
            format: 'int32'
        },
        allTitles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SeriesTypes = {
    enum: ['standard', 'daily', 'anime'],
    type: 'string'
} as const;

export const $SortDirection = {
    enum: ['default', 'ascending', 'descending'],
    type: 'string'
} as const;

export const $SystemResource = {
    type: 'object',
    properties: {
        appName: {
            type: 'string',
            nullable: true
        },
        instanceName: {
            type: 'string',
            nullable: true
        },
        version: {
            type: 'string',
            nullable: true
        },
        buildTime: {
            type: 'string',
            format: 'date-time'
        },
        isDebug: {
            type: 'boolean'
        },
        isProduction: {
            type: 'boolean'
        },
        isAdmin: {
            type: 'boolean'
        },
        isUserInteractive: {
            type: 'boolean'
        },
        startupPath: {
            type: 'string',
            nullable: true
        },
        appData: {
            type: 'string',
            nullable: true
        },
        osName: {
            type: 'string',
            nullable: true
        },
        osVersion: {
            type: 'string',
            nullable: true
        },
        isNetCore: {
            type: 'boolean'
        },
        isLinux: {
            type: 'boolean'
        },
        isOsx: {
            type: 'boolean'
        },
        isWindows: {
            type: 'boolean'
        },
        isDocker: {
            type: 'boolean'
        },
        mode: {
            '$ref': '#/components/schemas/RuntimeMode'
        },
        branch: {
            type: 'string',
            nullable: true
        },
        authentication: {
            '$ref': '#/components/schemas/AuthenticationType'
        },
        sqliteVersion: {
            '$ref': '#/components/schemas/Version'
        },
        migrationVersion: {
            type: 'integer',
            format: 'int32'
        },
        urlBase: {
            type: 'string',
            nullable: true
        },
        runtimeVersion: {
            '$ref': '#/components/schemas/Version'
        },
        runtimeName: {
            type: 'string',
            nullable: true
        },
        startTime: {
            type: 'string',
            format: 'date-time'
        },
        packageVersion: {
            type: 'string',
            nullable: true
        },
        packageAuthor: {
            type: 'string',
            nullable: true
        },
        packageUpdateMechanism: {
            '$ref': '#/components/schemas/UpdateMechanism'
        },
        packageUpdateMechanismMessage: {
            type: 'string',
            nullable: true
        },
        databaseVersion: {
            '$ref': '#/components/schemas/Version'
        },
        databaseType: {
            '$ref': '#/components/schemas/DatabaseType'
        }
    },
    additionalProperties: false
} as const;

export const $TagDetailsResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'string',
            nullable: true
        },
        delayProfileIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        importListIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        notificationIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        restrictionIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        indexerIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        downloadClientIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        autoTagIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        seriesIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TagResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        label: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $TaskResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        taskName: {
            type: 'string',
            nullable: true
        },
        interval: {
            type: 'integer',
            format: 'int32'
        },
        lastExecution: {
            type: 'string',
            format: 'date-time'
        },
        lastStartTime: {
            type: 'string',
            format: 'date-time'
        },
        nextExecution: {
            type: 'string',
            format: 'date-time'
        },
        lastDuration: {
            '$ref': '#/components/schemas/TimeSpan'
        }
    },
    additionalProperties: false
} as const;

export const $TimeSpan = {
    type: 'object',
    properties: {
        ticks: {
            type: 'integer',
            format: 'int64'
        },
        days: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        hours: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        milliseconds: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        minutes: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        seconds: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        totalDays: {
            type: 'number',
            format: 'double',
            readOnly: true
        },
        totalHours: {
            type: 'number',
            format: 'double',
            readOnly: true
        },
        totalMilliseconds: {
            type: 'number',
            format: 'double',
            readOnly: true
        },
        totalMinutes: {
            type: 'number',
            format: 'double',
            readOnly: true
        },
        totalSeconds: {
            type: 'number',
            format: 'double',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $TrackedDownloadState = {
    enum: ['downloading', 'importPending', 'importing', 'imported', 'failedPending', 'failed', 'ignored'],
    type: 'string'
} as const;

export const $TrackedDownloadStatus = {
    enum: ['ok', 'warning', 'error'],
    type: 'string'
} as const;

export const $TrackedDownloadStatusMessage = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        },
        messages: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UiConfigResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        firstDayOfWeek: {
            type: 'integer',
            format: 'int32'
        },
        calendarWeekColumnHeader: {
            type: 'string',
            nullable: true
        },
        shortDateFormat: {
            type: 'string',
            nullable: true
        },
        longDateFormat: {
            type: 'string',
            nullable: true
        },
        timeFormat: {
            type: 'string',
            nullable: true
        },
        showRelativeDates: {
            type: 'boolean'
        },
        enableColorImpairedMode: {
            type: 'boolean'
        },
        theme: {
            type: 'string',
            nullable: true
        },
        uiLanguage: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $UnmappedFolder = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        path: {
            type: 'string',
            nullable: true
        },
        relativePath: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UpdateChanges = {
    type: 'object',
    properties: {
        new: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        fixed: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UpdateMechanism = {
    enum: ['builtIn', 'script', 'external', 'apt', 'docker'],
    type: 'string'
} as const;

export const $UpdateResource = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        version: {
            '$ref': '#/components/schemas/Version'
        },
        branch: {
            type: 'string',
            nullable: true
        },
        releaseDate: {
            type: 'string',
            format: 'date-time'
        },
        fileName: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        installed: {
            type: 'boolean'
        },
        installedOn: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        installable: {
            type: 'boolean'
        },
        latest: {
            type: 'boolean'
        },
        changes: {
            '$ref': '#/components/schemas/UpdateChanges'
        },
        hash: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Version = {
    type: 'object',
    properties: {
        major: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        minor: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        build: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        revision: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        majorRevision: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        minorRevision: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;