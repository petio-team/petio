import { makeApi } from '@zodios/core';
import { z } from 'zod';

export const QueueSchema = z.object({
  page: z.number(),
  pageSize: z.number(),
  sortKey: z.string(),
  sortDirection: z.string(),
  filters: z
    .array(
      z.object({
        key: z.string(),
        value: z.string(),
      }),
    )
    .optional(),
  totalRecords: z.number(),
  records: z.array(
    z.object({
      id: z.number(),
      movieId: z.number(),
      movie: z
        .object({
          id: z.number(),
          title: z.string(),
          originalTitle: z.string(),
          originalLanguage: z.object({ id: z.number(), name: z.string() }),
          alternateTitles: z.array(
            z.object({
              id: z.number(),
              sourceType: z.string(),
              movieMetadataId: z.number(),
              title: z.string(),
              cleanTitle: z.string(),
              sourceId: z.number(),
              votes: z.number(),
              voteCount: z.number(),
              language: z.object({ id: z.number(), name: z.string() }),
            }),
          ),
          secondaryYear: z.number(),
          secondaryYearSourceId: z.number(),
          sortTitle: z.string(),
          sizeOnDisk: z.number(),
          status: z.string(),
          overview: z.string(),
          inCinemas: z.string(),
          physicalRelease: z.string(),
          digitalRelease: z.string(),
          physicalReleaseNote: z.string(),
          images: z.array(
            z.object({
              coverType: z.string(),
              url: z.string(),
              remoteUrl: z.string(),
            }),
          ),
          website: z.string(),
          remotePoster: z.string(),
          year: z.number(),
          hasFile: z.boolean(),
          youTubeTrailerId: z.string(),
          studio: z.string(),
          path: z.string(),
          qualityProfileId: z.number(),
          monitored: z.boolean(),
          minimumAvailability: z.string(),
          isAvailable: z.boolean(),
          folderName: z.string(),
          runtime: z.number(),
          cleanTitle: z.string(),
          imdbId: z.string(),
          tmdbId: z.number(),
          titleSlug: z.string(),
          rootFolderPath: z.string(),
          folder: z.string(),
          certification: z.string(),
          genres: z.array(z.string()),
          tags: z.array(z.number()),
          added: z.string(),
          addOptions: z.object({
            ignoreEpisodesWithFiles: z.boolean(),
            ignoreEpisodesWithoutFiles: z.boolean(),
            monitor: z.string(),
            searchForMovie: z.boolean(),
            addMethod: z.string(),
          }),
          ratings: z.object({
            imdb: z.object({
              votes: z.number(),
              value: z.number(),
              type: z.string(),
            }),
            tmdb: z.object({
              votes: z.number(),
              value: z.number(),
              type: z.string(),
            }),
            metacritic: z.object({
              votes: z.number(),
              value: z.number(),
              type: z.string(),
            }),
            rottenTomatoes: z.object({
              votes: z.number(),
              value: z.number(),
              type: z.string(),
            }),
          }),
          movieFile: z.object({
            id: z.number(),
            movieId: z.number(),
            relativePath: z.string(),
            path: z.string(),
            size: z.number(),
            dateAdded: z.string(),
            sceneName: z.string(),
            indexerFlags: z.number(),
            quality: z.object({
              quality: z.object({
                id: z.number(),
                name: z.string(),
                source: z.string(),
                resolution: z.number(),
                modifier: z.string(),
              }),
              revision: z.object({
                version: z.number(),
                real: z.number(),
                isRepack: z.boolean(),
              }),
              hardcodedSubs: z.string().optional(),
            }),
            customFormats: z.array(
              z.object({
                id: z.number(),
                name: z.string(),
                includeCustomFormatWhenRenaming: z.boolean(),
                specifications: z.array(
                  z.object({
                    id: z.number(),
                    name: z.string(),
                    implementation: z.string(),
                    implementationName: z.string(),
                    infoLink: z.string(),
                    negate: z.boolean(),
                    required: z.boolean(),
                    fields: z.array(
                      z.object({
                        order: z.number(),
                        name: z.string(),
                        label: z.string(),
                        unit: z.string(),
                        helpText: z.string(),
                        helpLink: z.string(),
                        type: z.string(),
                        advanced: z.boolean(),
                        selectOptions: z.array(
                          z.object({
                            value: z.number(),
                            name: z.string(),
                            order: z.number(),
                            hint: z.string(),
                            dividerAfter: z.boolean(),
                          }),
                        ),
                        selectOptionsProviderAction: z.string(),
                        section: z.string(),
                        hidden: z.string(),
                        placeholder: z.string(),
                      }),
                    ),
                    presets: z.array(z.null()),
                  }),
                ),
              }),
            ),
            mediaInfo: z.object({
              id: z.number(),
              audioBitrate: z.number(),
              audioChannels: z.number(),
              audioCodec: z.string(),
              audioLanguages: z.string(),
              audioStreamCount: z.number(),
              videoBitDepth: z.number(),
              videoBitrate: z.number(),
              videoCodec: z.string(),
              videoDynamicRangeType: z.string(),
              videoFps: z.number(),
              resolution: z.string(),
              runTime: z.string(),
              scanType: z.string(),
              subtitles: z.string(),
            }),
            originalFilePath: z.string(),
            qualityCutoffNotMet: z.boolean(),
            languages: z.array(z.object({ id: z.number(), name: z.string() })),
            releaseGroup: z.string(),
            edition: z.string(),
          }),
          collection: z.object({
            id: z.number(),
            title: z.string(),
            cleanTitle: z.string(),
            sortTitle: z.string(),
            tmdbId: z.number(),
            overview: z.string(),
            monitored: z.boolean(),
            qualityProfileId: z.number(),
            rootFolderPath: z.string(),
            searchOnAdd: z.boolean(),
            minimumAvailability: z.string(),
            lastInfoSync: z.string(),
            images: z.array(
              z.object({
                coverType: z.string(),
                url: z.string(),
                remoteUrl: z.string(),
              }),
            ),
            added: z.string(),
            movies: z.array(
              z.object({
                id: z.number(),
                tmdbId: z.number(),
                images: z.array(
                  z.object({
                    coverType: z.string(),
                    url: z.string(),
                    remoteUrl: z.string(),
                  }),
                ),
                genres: z.array(z.string()),
                inCinemas: z.string(),
                physicalRelease: z.string(),
                digitalRelease: z.string(),
                certification: z.string(),
                year: z.number(),
                ratings: z.object({
                  imdb: z.object({
                    votes: z.number(),
                    value: z.number(),
                    type: z.string(),
                  }),
                  tmdb: z.object({
                    votes: z.number(),
                    value: z.number(),
                    type: z.string(),
                  }),
                  metacritic: z.object({
                    votes: z.number(),
                    value: z.number(),
                    type: z.string(),
                  }),
                  rottenTomatoes: z.object({
                    votes: z.number(),
                    value: z.number(),
                    type: z.string(),
                  }),
                }),
                collectionTmdbId: z.number(),
                collectionTitle: z.string(),
                lastInfoSync: z.string(),
                runtime: z.number(),
                website: z.string(),
                imdbId: z.string(),
                title: z.string(),
                cleanTitle: z.string(),
                sortTitle: z.string(),
                status: z.string(),
                overview: z.string(),
                alternativeTitles: z.array(
                  z.object({
                    id: z.number(),
                    sourceType: z.string(),
                    movieMetadataId: z.number(),
                    title: z.string(),
                    cleanTitle: z.string(),
                    sourceId: z.number(),
                    votes: z.number(),
                    voteCount: z.number(),
                    language: z.object({ id: z.number(), name: z.string() }),
                  }),
                ),
                translations: z.array(
                  z.object({
                    id: z.number(),
                    movieMetadataId: z.number(),
                    title: z.string(),
                    cleanTitle: z.string(),
                    overview: z.string(),
                    language: z.object({ id: z.number(), name: z.string() }),
                  }),
                ),
                secondaryYear: z.number(),
                youTubeTrailerId: z.string(),
                studio: z.string(),
                originalTitle: z.string(),
                cleanOriginalTitle: z.string(),
                originalLanguage: z.object({
                  id: z.number(),
                  name: z.string(),
                }),
                recommendations: z.array(z.number()),
                popularity: z.number(),
                isRecentMovie: z.boolean(),
              }),
            ),
          }),
          popularity: z.number(),
        })
        .optional(),
      languages: z.array(z.object({ id: z.number(), name: z.string() })),
      quality: z.object({
        quality: z.object({
          id: z.number(),
          name: z.string(),
          source: z.string(),
          resolution: z.number(),
          modifier: z.string(),
        }),
        revision: z.object({
          version: z.number(),
          real: z.number(),
          isRepack: z.boolean(),
        }),
        hardcodedSubs: z.string().optional(),
      }),
      customFormats: z.array(
        z.object({
          id: z.number(),
          name: z.string(),
          includeCustomFormatWhenRenaming: z.boolean(),
          specifications: z.array(
            z.object({
              id: z.number().optional(),
              name: z.string(),
              implementation: z.string(),
              implementationName: z.string(),
              infoLink: z.string(),
              negate: z.boolean(),
              required: z.boolean(),
              fields: z.array(
                z.object({
                  order: z.number(),
                  name: z.string(),
                  label: z.string(),
                  unit: z.string().optional(),
                  helpText: z.string().optional(),
                  helpLink: z.string().optional(),
                  type: z.string(),
                  advanced: z.boolean(),
                  selectOptions: z
                    .array(
                      z.object({
                        value: z.number(),
                        name: z.string(),
                        order: z.number(),
                        hint: z.string().optional(),
                        dividerAfter: z.boolean(),
                      }),
                    )
                    .optional(),
                  selectOptionsProviderAction: z.string().optional(),
                  section: z.string().optional(),
                  hidden: z.string().optional(),
                  placeholder: z.string().optional(),
                }),
              ),
              presets: z.array(z.any()).optional(),
            }),
          ),
        }),
      ),
      size: z.number(),
      title: z.string(),
      sizeleft: z.number(),
      timeleft: z
        .object({
          ticks: z.number(),
          days: z.number(),
          hours: z.number(),
          milliseconds: z.number(),
          minutes: z.number(),
          seconds: z.number(),
          totalDays: z.number(),
          totalHours: z.number(),
          totalMilliseconds: z.number(),
          totalMinutes: z.number(),
          totalSeconds: z.number(),
        })
        .or(z.string())
        .optional(),
      estimatedCompletionTime: z.string().optional(),
      status: z.string(),
      trackedDownloadStatus: z.string().optional(),
      trackedDownloadState: z.string().optional(),
      statusMessages: z
        .array(
          z.object({
            title: z.string(),
            messages: z.array(z.string()),
          }),
        )
        .optional(),
      errorMessage: z.string().optional(),
      downloadId: z.string().optional(),
      protocol: z.string(),
      downloadClient: z.string().optional(),
      indexer: z.string(),
      outputPath: z.string().optional(),
    }),
  ),
});
export type Queue = z.infer<typeof QueueSchema>;

export const QueueEndpoint = makeApi([
  {
    method: 'get',
    path: '/api/v3/queue',
    parameters: [
      {
        name: 'page',
        type: 'Query',
        schema: z.number().optional(),
      },
    ],
    response: QueueSchema,
  },
]);
