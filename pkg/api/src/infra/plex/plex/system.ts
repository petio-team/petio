import { makeApi } from '@zodios/core';
import { z } from 'zod';

export const SystemStatusSchema = z.object({
  MediaContainer: z.object({
    size: z.number(),
    allowCameraUpload: z.boolean(),
    allowChannelAccess: z.boolean(),
    allowMediaDeletion: z.boolean(),
    allowSharing: z.boolean(),
    allowSync: z.boolean(),
    allowTuners: z.boolean(),
    backgroundProcessing: z.boolean(),
    certificate: z.boolean(),
    companionProxy: z.boolean(),
    countryCode: z.string(),
    diagnostics: z.string(),
    eventStream: z.boolean(),
    friendlyName: z.string(),
    hubSearch: z.boolean(),
    itemClusters: z.boolean(),
    livetv: z.number(),
    machineIdentifier: z.string(),
    mediaProviders: z.boolean(),
    multiuser: z.boolean(),
    musicAnalysis: z.number(),
    myPlex: z.boolean(),
    myPlexMappingState: z.string(),
    myPlexSigninState: z.string(),
    myPlexSubscription: z.boolean(),
    myPlexUsername: z.string(),
    offlineTranscode: z.number(),
    ownerFeatures: z.string(),
    photoAutoTag: z.boolean(),
    platform: z.string(),
    platformVersion: z.string(),
    pluginHost: z.boolean(),
    pushNotifications: z.boolean(),
    readOnlyLibraries: z.boolean(),
    streamingBrainABRVersion: z.number(),
    streamingBrainVersion: z.number(),
    sync: z.boolean(),
    transcoderActiveVideoSessions: z.number(),
    transcoderAudio: z.boolean(),
    transcoderLyrics: z.boolean(),
    transcoderPhoto: z.boolean(),
    transcoderSubtitles: z.boolean(),
    transcoderVideo: z.boolean(),
    transcoderVideoBitrates: z.string(),
    transcoderVideoQualities: z.string(),
    transcoderVideoResolutions: z.string(),
    updatedAt: z.number(),
    updater: z.boolean(),
    version: z.string(),
    voiceSearch: z.boolean(),
    Directory: z.array(
      z.object({
        count: z.number(),
        key: z.string(),
        title: z.string(),
      }),
    ),
  }),
});
export type SystemStatus = z.infer<typeof SystemStatusSchema>;

export const SystemStatusEndpoint = makeApi([
  {
    description: 'gets the plex system data',
    method: 'get',
    path: '/',
    parameters: [],
    response: SystemStatusSchema,
  },
]);
