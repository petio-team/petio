import { makeApi } from '@zodios/core';
import { z } from 'zod';

export const ResourcesSchema = z.array(
  z.union([
    z.object({
      name: z.string(),
      product: z.string(),
      productVersion: z.string(),
      platform: z.string(),
      platformVersion: z.string(),
      device: z.string(),
      clientIdentifier: z.string(),
      createdAt: z.string(),
      lastSeenAt: z.string(),
      provides: z.string(),
      ownerId: z.null(),
      sourceTitle: z.null(),
      publicAddress: z.string(),
      accessToken: z.string(),
      owned: z.boolean(),
      home: z.boolean(),
      synced: z.boolean(),
      relay: z.boolean(),
      presence: z.boolean(),
      httpsRequired: z.boolean(),
      publicAddressMatches: z.boolean(),
      dnsRebindingProtection: z.boolean(),
      natLoopbackSupported: z.boolean(),
      connections: z.array(
        z.object({
          protocol: z.string(),
          address: z.string(),
          port: z.number(),
          uri: z.string(),
          local: z.boolean(),
          relay: z.boolean(),
          IPv6: z.boolean(),
        }),
      ),
    }),
    z.object({
      name: z.string(),
      product: z.string(),
      productVersion: z.string(),
      platform: z.string(),
      platformVersion: z.string(),
      device: z.null(),
      clientIdentifier: z.string(),
      createdAt: z.string(),
      lastSeenAt: z.string(),
      provides: z.string(),
      ownerId: z.null(),
      sourceTitle: z.null(),
      publicAddress: z.string(),
      accessToken: z.string(),
      owned: z.boolean(),
      home: z.boolean(),
      synced: z.boolean(),
      relay: z.boolean(),
      presence: z.boolean(),
      httpsRequired: z.boolean(),
      publicAddressMatches: z.boolean(),
      connections: z.array(
        z.object({
          protocol: z.string(),
          address: z.string(),
          port: z.number(),
          uri: z.string(),
          local: z.boolean(),
          relay: z.boolean(),
          IPv6: z.boolean(),
        }),
      ),
    }),
    z.object({
      name: z.string(),
      product: z.string(),
      productVersion: z.string(),
      platform: z.string(),
      platformVersion: z.string(),
      device: z.string(),
      clientIdentifier: z.string(),
      createdAt: z.string(),
      lastSeenAt: z.string(),
      provides: z.string(),
      ownerId: z.null(),
      sourceTitle: z.null(),
      publicAddress: z.string(),
      accessToken: z.null(),
      owned: z.boolean(),
      home: z.boolean(),
      synced: z.boolean(),
      relay: z.boolean(),
      presence: z.boolean(),
      httpsRequired: z.boolean(),
      publicAddressMatches: z.boolean(),
      connections: z.array(
        z.object({
          protocol: z.string(),
          address: z.string(),
          port: z.number(),
          uri: z.string(),
          local: z.boolean(),
          relay: z.boolean(),
          IPv6: z.boolean(),
        }),
      ),
    }),
  ]),
);
export type Resources = z.infer<typeof ResourcesSchema>;

export const ResourcesEndpoint = makeApi([
  {
    description: 'gets a list of devices associated with a plex server',
    method: 'get',
    path: '/api/v2/resources',
    parameters: [
      {
        description: 'plex token',
        name: 'x-plex-token',
        type: 'Header',
        schema: z.string().min(1),
      },
      {
        description: 'plex client id',
        name: 'x-plex-client-identifier',
        type: 'Header',
        schema: z.string().uuid().min(1),
      },
      {
        description: 'enables showing https versions of the resource urls',
        name: 'includeHttps',
        type: 'Query',
        schema: z.boolean().optional(),
      },
    ],
    response: ResourcesSchema,
  },
]);
