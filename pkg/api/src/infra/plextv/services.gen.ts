// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  GetCompanionsDataResponse,
  GetDevicesData,
  GetDevicesResponse,
  GetGeoDataResponse,
  GetHomeDataResponse,
  GetPinData,
  GetPinResponse,
  GetTokenData,
  GetTokenResponse,
  GetUserDetailsResponse,
  GetUserOptOutSettingsResponse,
  GetUserSettingsResponse,
} from './types.gen';

export class PlexTvService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Companions Data
   * Get Companions Data
   * @returns unknown Companions Data
   * @throws ApiError
   */
  public getCompanionsData(): CancelablePromise<GetCompanionsDataResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/companions',
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }

  /**
   * Get Geo Data
   * Get Geo Data
   * @returns unknown Geo Data
   * @throws ApiError
   */
  public getGeoData(): CancelablePromise<GetGeoDataResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/geoip',
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }

  /**
   * Get Home Data
   * Get Home Data
   * @returns unknown Home Data
   * @throws ApiError
   */
  public getHomeData(): CancelablePromise<GetHomeDataResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/home',
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }

  /**
   * Get a Pin
   * Retrieve a Pin from Plex.tv for authentication flows
   * @param data The data for the request.
   * @param data.strong Determines the kind of code returned by the API call
   * Strong codes are used for Pin authentication flows
   * Non-Strong codes are used for `Plex.tv/link`
   *
   * @returns unknown The Pin
   * @throws ApiError
   */
  public getPin(data: GetPinData = {}): CancelablePromise<GetPinResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/pins',
      query: {
        strong: data.strong,
      },
      errors: {
        400: 'X-Plex-Client-Identifier is missing',
      },
    });
  }

  /**
   * Get Access Token
   * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
   * @param data The data for the request.
   * @param data.pinId The PinID to retrieve an access token for
   * @returns unknown Access Token
   * @throws ApiError
   */
  public getToken(data: GetTokenData): CancelablePromise<GetTokenResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/pins/{pinID}',
      path: {
        pinID: data.pinId,
      },
      errors: {
        400: 'X-Plex-Client-Identifier is missing',
      },
    });
  }

  /**
   * Get Devices
   * Get Devices
   * @param data The data for the request.
   * @param data.includeHttps Include Https entries in the results
   * @param data.includeRelay Include Relay addresses in the results
   * @param data.includeIpv6 Include IPv6 entries in the results
   * @returns unknown List of Plex Devices
   * @throws ApiError
   */
  public getDevices(
    data: GetDevicesData = {},
  ): CancelablePromise<GetDevicesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/resources',
      query: {
        includeHttps: data.includeHttps,
        includeRelay: data.includeRelay,
        includeIPv6: data.includeIpv6,
      },
      headers: {
        'X-Plex-Client-Identifier': data.clientIdentifier,
      },
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }

  /**
   * Get Logged in User
   * Get Logged in User
   * @returns unknown Logged in user details
   * @throws ApiError
   */
  public getUserDetails(): CancelablePromise<GetUserDetailsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/user',
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }

  /**
   * Get User Settings
   * Get User Settings
   * @returns unknown User Settings
   * @throws ApiError
   */
  public getUserSettings(): CancelablePromise<GetUserSettingsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/user/settings',
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }

  /**
   * Get User Opt Out Settings
   * Get User Opt Out Settings
   * @returns unknown User Opt Out Settings
   * @throws ApiError
   */
  public getUserOptOutSettings(): CancelablePromise<GetUserOptOutSettingsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/user/settings/opt_outs',
      errors: {
        400: 'Bad Request - A parameter was not specified, or was specified incorrectly.',
        401: 'Unauthorized - Returned if the X-Plex-Token is missing from the header or query.',
      },
    });
  }
}
